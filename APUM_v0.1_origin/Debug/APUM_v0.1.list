
APUM_v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011558  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001030  080116f8  080116f8  000216f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012728  08012728  00030300  2**0
                  CONTENTS
  4 .ARM          00000008  08012728  08012728  00022728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012730  08012730  00030300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012730  08012730  00022730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012734  08012734  00022734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  08012738  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000216dc  20000300  08012a38  00030300  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200219dc  08012a38  000319dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042333  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007edc  00000000  00000000  00072663  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021f8  00000000  00000000  0007a540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002068  00000000  00000000  0007c738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cf93  00000000  00000000  0007e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b36a  00000000  00000000  000ab733  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea177  00000000  00000000  000d6a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c0c14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f9c  00000000  00000000  001c0c90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000300 	.word	0x20000300
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080116e0 	.word	0x080116e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000304 	.word	0x20000304
 80001dc:	080116e0 	.word	0x080116e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <LMN_GetErrorMessage>:
};

//----------------------------------------------------------------
//get error message from enum value
char* LMN_GetErrorMessage(int32_t inValue)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < sizeof(Messages) / sizeof(ErrorMsgEntry_t); i++)
 8000588:	2300      	movs	r3, #0
 800058a:	81fb      	strh	r3, [r7, #14]
 800058c:	e00f      	b.n	80005ae <LMN_GetErrorMessage+0x2e>
		if (Messages[i].Value == inValue) return Messages[i].String;
 800058e:	89fb      	ldrh	r3, [r7, #14]
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <LMN_GetErrorMessage+0x44>)
 8000592:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	d105      	bne.n	80005a8 <LMN_GetErrorMessage+0x28>
 800059c:	89fb      	ldrh	r3, [r7, #14]
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <LMN_GetErrorMessage+0x44>)
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	4413      	add	r3, r2
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	e006      	b.n	80005b6 <LMN_GetErrorMessage+0x36>
	for (uint16_t i = 0; i < sizeof(Messages) / sizeof(ErrorMsgEntry_t); i++)
 80005a8:	89fb      	ldrh	r3, [r7, #14]
 80005aa:	3301      	adds	r3, #1
 80005ac:	81fb      	strh	r3, [r7, #14]
 80005ae:	89fb      	ldrh	r3, [r7, #14]
 80005b0:	2b0c      	cmp	r3, #12
 80005b2:	d9ec      	bls.n	800058e <LMN_GetErrorMessage+0xe>

	return "unknown error value";
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <LMN_GetErrorMessage+0x48>)
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000
 80005c8:	080118a0 	.word	0x080118a0

080005cc <Misc_SwapByteOrder16>:
#include <stm32l4xx.h>

//----------------------------------------------------------------
//helper - swap short byte order for 16 bit value
uint16_t Misc_SwapByteOrder16(uint16_t value)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	uint16_t tempRet = value >> 8;
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	81fb      	strh	r3, [r7, #14]
	tempRet |= value << 8;
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	021b      	lsls	r3, r3, #8
 80005e0:	b21a      	sxth	r2, r3
 80005e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	81fb      	strh	r3, [r7, #14]
	return tempRet;
 80005ec:	89fb      	ldrh	r3, [r7, #14]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <Misc_SwapByteOrder32>:

//----------------------------------------------------------------
//helper - swap short byte order for 32 bit value
uint32_t Misc_SwapByteOrder32(uint32_t value)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b087      	sub	sp, #28
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
	uint32_t tempRet = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
	uint8_t* tempVp = (uint8_t*)&value;
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	60fb      	str	r3, [r7, #12]
	
	for (uint8_t i = 0; i < 4; i++)
 800060a:	2300      	movs	r3, #0
 800060c:	74fb      	strb	r3, [r7, #19]
 800060e:	e00d      	b.n	800062c <Misc_SwapByteOrder32+0x32>
	{
		tempRet <<= 8;
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	021b      	lsls	r3, r3, #8
 8000614:	617b      	str	r3, [r7, #20]
		tempRet |= tempVp[i];
 8000616:	7cfb      	ldrb	r3, [r7, #19]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	4313      	orrs	r3, r2
 8000624:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 4; i++)
 8000626:	7cfb      	ldrb	r3, [r7, #19]
 8000628:	3301      	adds	r3, #1
 800062a:	74fb      	strb	r3, [r7, #19]
 800062c:	7cfb      	ldrb	r3, [r7, #19]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d9ee      	bls.n	8000610 <Misc_SwapByteOrder32+0x16>
	}
	
	return tempRet;
 8000632:	697b      	ldr	r3, [r7, #20]
}
 8000634:	4618      	mov	r0, r3
 8000636:	371c      	adds	r7, #28
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <OBIS_MappingGet>:
const uint16_t OBIS_MappingCnt = sizeof(OBIS_Mapping) / sizeof(OBISMapping_t);

//----------------------------------------------------------------
//get mapping for PID
OBISMapping_t* OBIS_MappingGet(ParamID_t inPID)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < OBIS_MappingCnt; i++)
 800064a:	2300      	movs	r3, #0
 800064c:	81fb      	strh	r3, [r7, #14]
 800064e:	e015      	b.n	800067c <OBIS_MappingGet+0x3c>
		if (OBIS_Mapping[i].PID == inPID) return (OBISMapping_t*)&OBIS_Mapping[i];
 8000650:	89fa      	ldrh	r2, [r7, #14]
 8000652:	4910      	ldr	r1, [pc, #64]	; (8000694 <OBIS_MappingGet+0x54>)
 8000654:	4613      	mov	r3, r2
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	4413      	add	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	440b      	add	r3, r1
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	79fa      	ldrb	r2, [r7, #7]
 8000662:	429a      	cmp	r2, r3
 8000664:	d107      	bne.n	8000676 <OBIS_MappingGet+0x36>
 8000666:	89fa      	ldrh	r2, [r7, #14]
 8000668:	4613      	mov	r3, r2
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	4413      	add	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4a08      	ldr	r2, [pc, #32]	; (8000694 <OBIS_MappingGet+0x54>)
 8000672:	4413      	add	r3, r2
 8000674:	e007      	b.n	8000686 <OBIS_MappingGet+0x46>
	for (uint16_t i = 0; i < OBIS_MappingCnt; i++)
 8000676:	89fb      	ldrh	r3, [r7, #14]
 8000678:	3301      	adds	r3, #1
 800067a:	81fb      	strh	r3, [r7, #14]
 800067c:	2216      	movs	r2, #22
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	4293      	cmp	r3, r2
 8000682:	d3e5      	bcc.n	8000650 <OBIS_MappingGet+0x10>
	
	return NULL;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	0801230c 	.word	0x0801230c

08000698 <OBIS_MappingGet2>:

//----------------------------------------------------------------
//get mapping for OBIS
OBISMapping_t* OBIS_MappingGet2(uint8_t* inOBIS)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	if (!inOBIS) return NULL;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <OBIS_MappingGet2+0x12>
 80006a6:	2300      	movs	r3, #0
 80006a8:	e022      	b.n	80006f0 <OBIS_MappingGet2+0x58>
	
	for (uint16_t i = 0; i < OBIS_MappingCnt; i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	81fb      	strh	r3, [r7, #14]
 80006ae:	e01a      	b.n	80006e6 <OBIS_MappingGet2+0x4e>
		if (!memcmp(OBIS_Mapping[i].OBIS, inOBIS, sizeof(OBIS_Mapping[i].OBIS))) return (OBISMapping_t*)&OBIS_Mapping[i];
 80006b0:	89fa      	ldrh	r2, [r7, #14]
 80006b2:	4613      	mov	r3, r2
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	4413      	add	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <OBIS_MappingGet2+0x60>)
 80006bc:	4413      	add	r3, r2
 80006be:	3301      	adds	r3, #1
 80006c0:	2206      	movs	r2, #6
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f00f fea1 	bl	801040c <memcmp>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d107      	bne.n	80006e0 <OBIS_MappingGet2+0x48>
 80006d0:	89fa      	ldrh	r2, [r7, #14]
 80006d2:	4613      	mov	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	4413      	add	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <OBIS_MappingGet2+0x60>)
 80006dc:	4413      	add	r3, r2
 80006de:	e007      	b.n	80006f0 <OBIS_MappingGet2+0x58>
	for (uint16_t i = 0; i < OBIS_MappingCnt; i++)
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	3301      	adds	r3, #1
 80006e4:	81fb      	strh	r3, [r7, #14]
 80006e6:	2216      	movs	r2, #22
 80006e8:	89fb      	ldrh	r3, [r7, #14]
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d3e0      	bcc.n	80006b0 <OBIS_MappingGet2+0x18>
	
	return NULL;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	0801230c 	.word	0x0801230c

080006fc <OBIS_DataFreeSingle>:
#define realloc pvPortRealloc

//----------------------------------------------------------------
//free single data chain entry
void OBIS_DataFreeSingle(OBISDataChain_t* inEntry)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if (!inEntry) return;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d043      	beq.n	8000792 <OBIS_DataFreeSingle+0x96>
	
	//string?
	if(inEntry->Mapping && inEntry->Mapping->PType == PT_String)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d02f      	beq.n	8000772 <OBIS_DataFreeSingle+0x76>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d129      	bne.n	8000772 <OBIS_DataFreeSingle+0x76>
	{
		switch (inEntry->Mapping->COSEMClass)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	891b      	ldrh	r3, [r3, #8]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d010      	beq.n	800074a <OBIS_DataFreeSingle+0x4e>
 8000728:	f248 0202 	movw	r2, #32770	; 0x8002
 800072c:	4293      	cmp	r3, r2
 800072e:	d016      	beq.n	800075e <OBIS_DataFreeSingle+0x62>
 8000730:	2b01      	cmp	r3, #1
 8000732:	d000      	beq.n	8000736 <OBIS_DataFreeSingle+0x3a>
				if (inEntry->Data.CAdvExtReg.Value.Bytes.Array)
					free(inEntry->Data.CAdvExtReg.Value.Bytes.Array);
				break;
			}
		default:
			break;
 8000734:	e024      	b.n	8000780 <OBIS_DataFreeSingle+0x84>
				if (inEntry->Data.CData.Value.Bytes.Array)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	691b      	ldr	r3, [r3, #16]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d01b      	beq.n	8000776 <OBIS_DataFreeSingle+0x7a>
					free(inEntry->Data.CData.Value.Bytes.Array);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	691b      	ldr	r3, [r3, #16]
 8000742:	4618      	mov	r0, r3
 8000744:	f008 fd4e 	bl	80091e4 <vPortFree>
				break;
 8000748:	e015      	b.n	8000776 <OBIS_DataFreeSingle+0x7a>
				if (inEntry->Data.CReg.Value.Bytes.Array)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d013      	beq.n	800077a <OBIS_DataFreeSingle+0x7e>
					free(inEntry->Data.CReg.Value.Bytes.Array);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	4618      	mov	r0, r3
 8000758:	f008 fd44 	bl	80091e4 <vPortFree>
				break;
 800075c:	e00d      	b.n	800077a <OBIS_DataFreeSingle+0x7e>
				if (inEntry->Data.CAdvExtReg.Value.Bytes.Array)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00b      	beq.n	800077e <OBIS_DataFreeSingle+0x82>
					free(inEntry->Data.CAdvExtReg.Value.Bytes.Array);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	691b      	ldr	r3, [r3, #16]
 800076a:	4618      	mov	r0, r3
 800076c:	f008 fd3a 	bl	80091e4 <vPortFree>
				break;
 8000770:	e005      	b.n	800077e <OBIS_DataFreeSingle+0x82>
		}
	}
 8000772:	bf00      	nop
 8000774:	e004      	b.n	8000780 <OBIS_DataFreeSingle+0x84>
				break;
 8000776:	bf00      	nop
 8000778:	e002      	b.n	8000780 <OBIS_DataFreeSingle+0x84>
				break;
 800077a:	bf00      	nop
 800077c:	e000      	b.n	8000780 <OBIS_DataFreeSingle+0x84>
				break;
 800077e:	bf00      	nop

	memset(inEntry, 0, sizeof(OBISDataChain_t)); //erase, just to be sure??
 8000780:	2230      	movs	r2, #48	; 0x30
 8000782:	2100      	movs	r1, #0
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f00f fe5b 	bl	8010440 <memset>
	free(inEntry);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f008 fd2a 	bl	80091e4 <vPortFree>
 8000790:	e000      	b.n	8000794 <OBIS_DataFreeSingle+0x98>
	if (!inEntry) return;
 8000792:	bf00      	nop
}
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <OBIS_DataFreeChain>:

//----------------------------------------------------------------
//free entire data chain
void OBIS_DataFreeChain(OBISDataChain_t* inChain)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
	while (inChain)
 80007a2:	e007      	b.n	80007b4 <OBIS_DataFreeChain+0x1a>
	{
		OBISDataChain_t* tempN = inChain->Next;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a8:	60fb      	str	r3, [r7, #12]
		OBIS_DataFreeSingle(inChain);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffa6 	bl	80006fc <OBIS_DataFreeSingle>
		inChain = tempN;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	607b      	str	r3, [r7, #4]
	while (inChain)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f4      	bne.n	80007a4 <OBIS_DataFreeChain+0xa>
	}
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <SMLF_FileFree>:
//sml file handling

//----------------------------------------------------------------
//free file ressources recursively
void SMLF_FileFree(sml_file* inFile)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
	sml_file_free(inFile);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f009 faa1 	bl	8009d12 <sml_file_free>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SMLF_FileGetBuf>:

//----------------------------------------------------------------
//get buffer of file
uint8_t* SMLF_FileGetBuf(sml_file* inFile)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	if (!(TEST_P(inFile, buf, buffer))) return NULL;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SMLF_FileGetBuf+0x20>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <SMLF_FileGetBuf+0x20>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <SMLF_FileGetBuf+0x24>
 80007f8:	2300      	movs	r3, #0
 80007fa:	e002      	b.n	8000802 <SMLF_FileGetBuf+0x2a>
	return inFile->buf->buffer;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	681b      	ldr	r3, [r3, #0]
}
 8000802:	4618      	mov	r0, r3
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <SMLF_FileGetBufLen>:

//----------------------------------------------------------------
//get buffer len of file
uint16_t SMLF_FileGetBufLen(sml_file* inFile)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	return sml_file_get_buffer_len(inFile);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f009 fb00 	bl	8009e1c <sml_file_get_buffer_len>
 800081c:	4603      	mov	r3, r0
 800081e:	b29b      	uxth	r3, r3
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <SMLF_FileParseFromBuf>:

//----------------------------------------------------------------
//parse sml file from buffer
sml_file* SMLF_FileParseFromBuf(uint8_t* inData, uint16_t inLen)
{
 8000828:	b5b0      	push	{r4, r5, r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	807b      	strh	r3, [r7, #2]
 8000834:	466b      	mov	r3, sp
 8000836:	461d      	mov	r5, r3
	uint8_t tempBuf[inLen];
 8000838:	8878      	ldrh	r0, [r7, #2]
 800083a:	4603      	mov	r3, r0
 800083c:	3b01      	subs	r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	b281      	uxth	r1, r0
 8000842:	f04f 0200 	mov.w	r2, #0
 8000846:	f04f 0300 	mov.w	r3, #0
 800084a:	f04f 0400 	mov.w	r4, #0
 800084e:	00d4      	lsls	r4, r2, #3
 8000850:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000854:	00cb      	lsls	r3, r1, #3
 8000856:	b281      	uxth	r1, r0
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	f04f 0400 	mov.w	r4, #0
 8000864:	00d4      	lsls	r4, r2, #3
 8000866:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800086a:	00cb      	lsls	r3, r1, #3
 800086c:	4603      	mov	r3, r0
 800086e:	3307      	adds	r3, #7
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	ebad 0d03 	sub.w	sp, sp, r3
 8000878:	466b      	mov	r3, sp
 800087a:	3300      	adds	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
	inLen = sml_transport_read(inData, tempBuf, inLen);	
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	887a      	ldrh	r2, [r7, #2]
 8000882:	4619      	mov	r1, r3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f00d fc15 	bl	800e0b4 <sml_transport_read>
 800088a:	4603      	mov	r3, r0
 800088c:	807b      	strh	r3, [r7, #2]
	return sml_file_parse(tempBuf, inLen, 0);
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	8879      	ldrh	r1, [r7, #2]
 8000892:	2200      	movs	r2, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f009 f993 	bl	8009bc0 <sml_file_parse>
 800089a:	4603      	mov	r3, r0
 800089c:	46ad      	mov	sp, r5
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bdb0      	pop	{r4, r5, r7, pc}

080008a6 <SMLF_CreateGetPPReqFilePID>:
//sml file creation

//----------------------------------------------------------------
//create sml file containing GPPReq messages for OBIS parameter
int32_t SMLF_CreateGetPPReqFilePID(ParamID_t inPID, sml_file** outFile)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	6039      	str	r1, [r7, #0]
 80008b0:	71fb      	strb	r3, [r7, #7]
	return SMLF_CreateGetPPReqFilePID2(&inPID, 1, outFile);
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	2101      	movs	r1, #1
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f805 	bl	80008c8 <SMLF_CreateGetPPReqFilePID2>
 80008be:	4603      	mov	r3, r0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <SMLF_CreateGetPPReqFilePID2>:

//----------------------------------------------------------------
//create sml file containing GPPReq messages for array of OBIS parameter
int32_t SMLF_CreateGetPPReqFilePID2(ParamID_t* inPIDArray, uint16_t inLen, sml_file** outFile)
{
 80008c8:	b5b0      	push	{r4, r5, r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	460b      	mov	r3, r1
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	817b      	strh	r3, [r7, #10]
 80008d6:	466b      	mov	r3, sp
 80008d8:	461d      	mov	r5, r3
	int32_t tempRet = SMLF_E_Unknown;
 80008da:	f46f 637a 	mvn.w	r3, #4000	; 0xfa0
 80008de:	61bb      	str	r3, [r7, #24]
	OBISMapping_t* tempOM[inLen];
 80008e0:	8978      	ldrh	r0, [r7, #10]
 80008e2:	4603      	mov	r3, r0
 80008e4:	3b01      	subs	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	b281      	uxth	r1, r0
 80008ea:	f04f 0200 	mov.w	r2, #0
 80008ee:	f04f 0300 	mov.w	r3, #0
 80008f2:	f04f 0400 	mov.w	r4, #0
 80008f6:	0154      	lsls	r4, r2, #5
 80008f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80008fc:	014b      	lsls	r3, r1, #5
 80008fe:	b281      	uxth	r1, r0
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	f04f 0400 	mov.w	r4, #0
 800090c:	0154      	lsls	r4, r2, #5
 800090e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000912:	014b      	lsls	r3, r1, #5
 8000914:	4603      	mov	r3, r0
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	3303      	adds	r3, #3
 800091a:	3307      	adds	r3, #7
 800091c:	08db      	lsrs	r3, r3, #3
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	ebad 0d03 	sub.w	sp, sp, r3
 8000924:	466b      	mov	r3, sp
 8000926:	3303      	adds	r3, #3
 8000928:	089b      	lsrs	r3, r3, #2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	613b      	str	r3, [r7, #16]
	
	ASSERT_B(inPIDArray && inLen > 0, SMLF_E_ParamInput);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d002      	beq.n	800093a <SMLF_CreateGetPPReqFilePID2+0x72>
 8000934:	897b      	ldrh	r3, [r7, #10]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d113      	bne.n	8000962 <SMLF_CreateGetPPReqFilePID2+0x9a>
 800093a:	2253      	movs	r2, #83	; 0x53
 800093c:	491d      	ldr	r1, [pc, #116]	; (80009b4 <SMLF_CreateGetPPReqFilePID2+0xec>)
 800093e:	481e      	ldr	r0, [pc, #120]	; (80009b8 <SMLF_CreateGetPPReqFilePID2+0xf0>)
 8000940:	f010 f858 	bl	80109f4 <iprintf>
 8000944:	481d      	ldr	r0, [pc, #116]	; (80009bc <SMLF_CreateGetPPReqFilePID2+0xf4>)
 8000946:	f7ff fe1b 	bl	8000580 <LMN_GetErrorMessage>
 800094a:	4603      	mov	r3, r0
 800094c:	4618      	mov	r0, r3
 800094e:	f010 f851 	bl	80109f4 <iprintf>
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <SMLF_CreateGetPPReqFilePID2+0xf8>)
 8000954:	f010 f8c2 	bl	8010adc <puts>
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <SMLF_CreateGetPPReqFilePID2+0xf4>)
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	bf00      	nop
		tempOM[i] = OBIS_MappingGet(inPIDArray[i]);
	
	return SMLF_CreateGetPPReqFileOBIS2(tempOM, inLen, outFile);
	
err:
	return tempRet;
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	e023      	b.n	80009aa <SMLF_CreateGetPPReqFilePID2+0xe2>
	memset(tempOM, 0, inLen* sizeof(OBISMapping_t*));
 8000962:	6938      	ldr	r0, [r7, #16]
 8000964:	897b      	ldrh	r3, [r7, #10]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	461a      	mov	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f00f fd68 	bl	8010440 <memset>
	for (size_t i = 0; i < inLen; i++)
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	e00e      	b.n	8000994 <SMLF_CreateGetPPReqFilePID2+0xcc>
		tempOM[i] = OBIS_MappingGet(inPIDArray[i]);
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe5e 	bl	8000640 <OBIS_MappingGet>
 8000984:	4601      	mov	r1, r0
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	69fa      	ldr	r2, [r7, #28]
 800098a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (size_t i = 0; i < inLen; i++)
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3301      	adds	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
 8000994:	897b      	ldrh	r3, [r7, #10]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	429a      	cmp	r2, r3
 800099a:	d3ec      	bcc.n	8000976 <SMLF_CreateGetPPReqFilePID2+0xae>
	return SMLF_CreateGetPPReqFileOBIS2(tempOM, inLen, outFile);
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	8979      	ldrh	r1, [r7, #10]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f80e 	bl	80009c4 <SMLF_CreateGetPPReqFileOBIS2>
 80009a8:	4603      	mov	r3, r0
 80009aa:	46ad      	mov	sp, r5
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bdb0      	pop	{r4, r5, r7, pc}
 80009b4:	08012498 	.word	0x08012498
 80009b8:	080118b4 	.word	0x080118b4
 80009bc:	fffff05e 	.word	0xfffff05e
 80009c0:	080118c4 	.word	0x080118c4

080009c4 <SMLF_CreateGetPPReqFileOBIS2>:
}

//----------------------------------------------------------------
//create sml file containing GPPReq messages for array of OBIS parameter
int32_t SMLF_CreateGetPPReqFileOBIS2(OBISMapping_t** inOBISArray, uint16_t inLen, sml_file** outFile)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	460b      	mov	r3, r1
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	817b      	strh	r3, [r7, #10]
	int32_t tempRet = SMLF_E_Unknown;
 80009d2:	f46f 637a 	mvn.w	r3, #4000	; 0xfa0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
	sml_file* tempF = NULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
	
	ASSERT_B(inOBISArray && inLen > 0 && outFile, SMLF_E_ParamInput);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d005      	beq.n	80009ee <SMLF_CreateGetPPReqFileOBIS2+0x2a>
 80009e2:	897b      	ldrh	r3, [r7, #10]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d002      	beq.n	80009ee <SMLF_CreateGetPPReqFileOBIS2+0x2a>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d111      	bne.n	8000a12 <SMLF_CreateGetPPReqFileOBIS2+0x4e>
 80009ee:	226e      	movs	r2, #110	; 0x6e
 80009f0:	496f      	ldr	r1, [pc, #444]	; (8000bb0 <SMLF_CreateGetPPReqFileOBIS2+0x1ec>)
 80009f2:	4870      	ldr	r0, [pc, #448]	; (8000bb4 <SMLF_CreateGetPPReqFileOBIS2+0x1f0>)
 80009f4:	f00f fffe 	bl	80109f4 <iprintf>
 80009f8:	486f      	ldr	r0, [pc, #444]	; (8000bb8 <SMLF_CreateGetPPReqFileOBIS2+0x1f4>)
 80009fa:	f7ff fdc1 	bl	8000580 <LMN_GetErrorMessage>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f00f fff7 	bl	80109f4 <iprintf>
 8000a06:	486d      	ldr	r0, [pc, #436]	; (8000bbc <SMLF_CreateGetPPReqFileOBIS2+0x1f8>)
 8000a08:	f010 f868 	bl	8010adc <puts>
 8000a0c:	4b6a      	ldr	r3, [pc, #424]	; (8000bb8 <SMLF_CreateGetPPReqFileOBIS2+0x1f4>)
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8000a10:	e0c6      	b.n	8000ba0 <SMLF_CreateGetPPReqFileOBIS2+0x1dc>
	
	tempF = sml_file_init(0);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f009 f898 	bl	8009b48 <sml_file_init>
 8000a18:	6338      	str	r0, [r7, #48]	; 0x30
	ASSERT_B(tempF, SMLF_E_Malloc);
 8000a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d111      	bne.n	8000a44 <SMLF_CreateGetPPReqFileOBIS2+0x80>
 8000a20:	2271      	movs	r2, #113	; 0x71
 8000a22:	4963      	ldr	r1, [pc, #396]	; (8000bb0 <SMLF_CreateGetPPReqFileOBIS2+0x1ec>)
 8000a24:	4863      	ldr	r0, [pc, #396]	; (8000bb4 <SMLF_CreateGetPPReqFileOBIS2+0x1f0>)
 8000a26:	f00f ffe5 	bl	80109f4 <iprintf>
 8000a2a:	4865      	ldr	r0, [pc, #404]	; (8000bc0 <SMLF_CreateGetPPReqFileOBIS2+0x1fc>)
 8000a2c:	f7ff fda8 	bl	8000580 <LMN_GetErrorMessage>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00f ffde 	bl	80109f4 <iprintf>
 8000a38:	4860      	ldr	r0, [pc, #384]	; (8000bbc <SMLF_CreateGetPPReqFileOBIS2+0x1f8>)
 8000a3a:	f010 f84f 	bl	8010adc <puts>
 8000a3e:	4b60      	ldr	r3, [pc, #384]	; (8000bc0 <SMLF_CreateGetPPReqFileOBIS2+0x1fc>)
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
 8000a42:	e0ad      	b.n	8000ba0 <SMLF_CreateGetPPReqFileOBIS2+0x1dc>
	
	uint32_t tempReqID = Misc_SwapByteOrder32(_ReqFileID++);
 8000a44:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <SMLF_CreateGetPPReqFileOBIS2+0x200>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	495e      	ldr	r1, [pc, #376]	; (8000bc4 <SMLF_CreateGetPPReqFileOBIS2+0x200>)
 8000a4c:	600a      	str	r2, [r1, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fdd3 	bl	80005fa <Misc_SwapByteOrder32>
 8000a54:	4603      	mov	r3, r0
 8000a56:	61bb      	str	r3, [r7, #24]
	sml_message* tempOR = SMLP_Message_GenerateOpenRequest(_SML_Server_ID, sizeof(_SML_Server_ID), (uint8_t*)&tempReqID, sizeof(tempReqID));
 8000a58:	f107 0218 	add.w	r2, r7, #24
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	210a      	movs	r1, #10
 8000a60:	4859      	ldr	r0, [pc, #356]	; (8000bc8 <SMLF_CreateGetPPReqFileOBIS2+0x204>)
 8000a62:	f001 fb6d 	bl	8002140 <SMLP_Message_GenerateOpenRequest>
 8000a66:	62b8      	str	r0, [r7, #40]	; 0x28
	ASSERT_B(tempOR, SMLF_E_Malloc);
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d111      	bne.n	8000a92 <SMLF_CreateGetPPReqFileOBIS2+0xce>
 8000a6e:	2275      	movs	r2, #117	; 0x75
 8000a70:	494f      	ldr	r1, [pc, #316]	; (8000bb0 <SMLF_CreateGetPPReqFileOBIS2+0x1ec>)
 8000a72:	4850      	ldr	r0, [pc, #320]	; (8000bb4 <SMLF_CreateGetPPReqFileOBIS2+0x1f0>)
 8000a74:	f00f ffbe 	bl	80109f4 <iprintf>
 8000a78:	4851      	ldr	r0, [pc, #324]	; (8000bc0 <SMLF_CreateGetPPReqFileOBIS2+0x1fc>)
 8000a7a:	f7ff fd81 	bl	8000580 <LMN_GetErrorMessage>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f00f ffb7 	bl	80109f4 <iprintf>
 8000a86:	484d      	ldr	r0, [pc, #308]	; (8000bbc <SMLF_CreateGetPPReqFileOBIS2+0x1f8>)
 8000a88:	f010 f828 	bl	8010adc <puts>
 8000a8c:	4b4c      	ldr	r3, [pc, #304]	; (8000bc0 <SMLF_CreateGetPPReqFileOBIS2+0x1fc>)
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8000a90:	e086      	b.n	8000ba0 <SMLF_CreateGetPPReqFileOBIS2+0x1dc>
	
	sml_file_add_message(tempF, tempOR);
 8000a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a96:	f009 f973 	bl	8009d80 <sml_file_add_message>
	
	for (uint16_t i = 0; i < inLen; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000a9e:	e03e      	b.n	8000b1e <SMLF_CreateGetPPReqFileOBIS2+0x15a>
	{
		if (!inOBISArray[i] || !(inOBISArray[i]->Flags & PF_R)) continue;
 8000aa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d033      	beq.n	8000b16 <SMLF_CreateGetPPReqFileOBIS2+0x152>
 8000aae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	7c1b      	ldrb	r3, [r3, #16]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d029      	beq.n	8000b16 <SMLF_CreateGetPPReqFileOBIS2+0x152>
		
		sml_message* tempM = NULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
		ASSERT_F(_SMLF_CreateGetPPReqMessage(inOBISArray[i], &tempM));
 8000ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4413      	add	r3, r2
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f107 0214 	add.w	r2, r7, #20
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f878 	bl	8000bcc <_SMLF_CreateGetPPReqMessage>
 8000adc:	61f8      	str	r0, [r7, #28]
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d012      	beq.n	8000b0a <SMLF_CreateGetPPReqFileOBIS2+0x146>
 8000ae4:	227e      	movs	r2, #126	; 0x7e
 8000ae6:	4932      	ldr	r1, [pc, #200]	; (8000bb0 <SMLF_CreateGetPPReqFileOBIS2+0x1ec>)
 8000ae8:	4832      	ldr	r0, [pc, #200]	; (8000bb4 <SMLF_CreateGetPPReqFileOBIS2+0x1f0>)
 8000aea:	f00f ff83 	bl	80109f4 <iprintf>
 8000aee:	69f8      	ldr	r0, [r7, #28]
 8000af0:	f7ff fd46 	bl	8000580 <LMN_GetErrorMessage>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f00f ff7c 	bl	80109f4 <iprintf>
 8000afc:	482f      	ldr	r0, [pc, #188]	; (8000bbc <SMLF_CreateGetPPReqFileOBIS2+0x1f8>)
 8000afe:	f00f ffed 	bl	8010adc <puts>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
 8000b06:	bf00      	nop
 8000b08:	e04a      	b.n	8000ba0 <SMLF_CreateGetPPReqFileOBIS2+0x1dc>
		
		sml_file_add_message(tempF, tempM);
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b10:	f009 f936 	bl	8009d80 <sml_file_add_message>
 8000b14:	e000      	b.n	8000b18 <SMLF_CreateGetPPReqFileOBIS2+0x154>
		if (!inOBISArray[i] || !(inOBISArray[i]->Flags & PF_R)) continue;
 8000b16:	bf00      	nop
	for (uint16_t i = 0; i < inLen; i++)
 8000b18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000b1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000b20:	897b      	ldrh	r3, [r7, #10]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d3bc      	bcc.n	8000aa0 <SMLF_CreateGetPPReqFileOBIS2+0xdc>
	}
	
	sml_message* tempCR = SMLP_Message_GenerateCloseRequest();
 8000b26:	f001 fb47 	bl	80021b8 <SMLP_Message_GenerateCloseRequest>
 8000b2a:	6278      	str	r0, [r7, #36]	; 0x24
	ASSERT_B(tempCR, SMLF_E_Malloc);
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d111      	bne.n	8000b56 <SMLF_CreateGetPPReqFileOBIS2+0x192>
 8000b32:	2284      	movs	r2, #132	; 0x84
 8000b34:	491e      	ldr	r1, [pc, #120]	; (8000bb0 <SMLF_CreateGetPPReqFileOBIS2+0x1ec>)
 8000b36:	481f      	ldr	r0, [pc, #124]	; (8000bb4 <SMLF_CreateGetPPReqFileOBIS2+0x1f0>)
 8000b38:	f00f ff5c 	bl	80109f4 <iprintf>
 8000b3c:	4820      	ldr	r0, [pc, #128]	; (8000bc0 <SMLF_CreateGetPPReqFileOBIS2+0x1fc>)
 8000b3e:	f7ff fd1f 	bl	8000580 <LMN_GetErrorMessage>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00f ff55 	bl	80109f4 <iprintf>
 8000b4a:	481c      	ldr	r0, [pc, #112]	; (8000bbc <SMLF_CreateGetPPReqFileOBIS2+0x1f8>)
 8000b4c:	f00f ffc6 	bl	8010adc <puts>
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <SMLF_CreateGetPPReqFileOBIS2+0x1fc>)
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
 8000b54:	e024      	b.n	8000ba0 <SMLF_CreateGetPPReqFileOBIS2+0x1dc>
	
	sml_file_add_message(tempF, tempCR);
 8000b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b5a:	f009 f911 	bl	8009d80 <sml_file_add_message>
	
	ASSERT_F(SMLP_File_Verify(tempF));
 8000b5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b60:	f001 fb5c 	bl	800221c <SMLP_File_Verify>
 8000b64:	6238      	str	r0, [r7, #32]
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d011      	beq.n	8000b90 <SMLF_CreateGetPPReqFileOBIS2+0x1cc>
 8000b6c:	2288      	movs	r2, #136	; 0x88
 8000b6e:	4910      	ldr	r1, [pc, #64]	; (8000bb0 <SMLF_CreateGetPPReqFileOBIS2+0x1ec>)
 8000b70:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <SMLF_CreateGetPPReqFileOBIS2+0x1f0>)
 8000b72:	f00f ff3f 	bl	80109f4 <iprintf>
 8000b76:	6a38      	ldr	r0, [r7, #32]
 8000b78:	f7ff fd02 	bl	8000580 <LMN_GetErrorMessage>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f00f ff38 	bl	80109f4 <iprintf>
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <SMLF_CreateGetPPReqFileOBIS2+0x1f8>)
 8000b86:	f00f ffa9 	bl	8010adc <puts>
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b8e:	e007      	b.n	8000ba0 <SMLF_CreateGetPPReqFileOBIS2+0x1dc>
	
	//serialize 2 buffer
	sml_transport_write(tempF);
 8000b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b92:	f00d fb77 	bl	800e284 <sml_transport_write>
	*outFile = tempF;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b9a:	601a      	str	r2, [r3, #0]
	
	return SMLF_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e003      	b.n	8000ba8 <SMLF_CreateGetPPReqFileOBIS2+0x1e4>
	
err:
	sml_file_free(tempF);
 8000ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ba2:	f009 f8b6 	bl	8009d12 <sml_file_free>
	return tempRet;
 8000ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3738      	adds	r7, #56	; 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	080124b4 	.word	0x080124b4
 8000bb4:	080118b4 	.word	0x080118b4
 8000bb8:	fffff05e 	.word	0xfffff05e
 8000bbc:	080118c4 	.word	0x080118c4
 8000bc0:	fffff05d 	.word	0xfffff05d
 8000bc4:	2000031c 	.word	0x2000031c
 8000bc8:	20000068 	.word	0x20000068

08000bcc <_SMLF_CreateGetPPReqMessage>:

//----------------------------------------------------------------
//create get proc parameter req message
int32_t _SMLF_CreateGetPPReqMessage(OBISMapping_t* inOM, sml_message** outM)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b08f      	sub	sp, #60	; 0x3c
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
	int32_t tempRet = SMLF_E_Unknown;
 8000bd6:	f46f 637a 	mvn.w	r3, #4000	; 0xfa0
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
	sml_message* tempR = NULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
	sml_tree_path* tempTP = NULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	ASSERT_B(inOM && outM, SMLF_E_ParamInput);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <_SMLF_CreateGetPPReqMessage+0x24>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d111      	bne.n	8000c14 <_SMLF_CreateGetPPReqMessage+0x48>
 8000bf0:	229d      	movs	r2, #157	; 0x9d
 8000bf2:	49a0      	ldr	r1, [pc, #640]	; (8000e74 <_SMLF_CreateGetPPReqMessage+0x2a8>)
 8000bf4:	48a0      	ldr	r0, [pc, #640]	; (8000e78 <_SMLF_CreateGetPPReqMessage+0x2ac>)
 8000bf6:	f00f fefd 	bl	80109f4 <iprintf>
 8000bfa:	48a0      	ldr	r0, [pc, #640]	; (8000e7c <_SMLF_CreateGetPPReqMessage+0x2b0>)
 8000bfc:	f7ff fcc0 	bl	8000580 <LMN_GetErrorMessage>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00f fef6 	bl	80109f4 <iprintf>
 8000c08:	489d      	ldr	r0, [pc, #628]	; (8000e80 <_SMLF_CreateGetPPReqMessage+0x2b4>)
 8000c0a:	f00f ff67 	bl	8010adc <puts>
 8000c0e:	4b9b      	ldr	r3, [pc, #620]	; (8000e7c <_SMLF_CreateGetPPReqMessage+0x2b0>)
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
 8000c12:	e123      	b.n	8000e5c <_SMLF_CreateGetPPReqMessage+0x290>
	
	tempTP = sml_tree_path_init();
 8000c14:	f00d fc68 	bl	800e4e8 <sml_tree_path_init>
 8000c18:	62f8      	str	r0, [r7, #44]	; 0x2c
	ASSERT_B(tempTP, SMLF_E_Malloc);
 8000c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d111      	bne.n	8000c44 <_SMLF_CreateGetPPReqMessage+0x78>
 8000c20:	22a0      	movs	r2, #160	; 0xa0
 8000c22:	4994      	ldr	r1, [pc, #592]	; (8000e74 <_SMLF_CreateGetPPReqMessage+0x2a8>)
 8000c24:	4894      	ldr	r0, [pc, #592]	; (8000e78 <_SMLF_CreateGetPPReqMessage+0x2ac>)
 8000c26:	f00f fee5 	bl	80109f4 <iprintf>
 8000c2a:	4896      	ldr	r0, [pc, #600]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000c2c:	f7ff fca8 	bl	8000580 <LMN_GetErrorMessage>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f00f fede 	bl	80109f4 <iprintf>
 8000c38:	4891      	ldr	r0, [pc, #580]	; (8000e80 <_SMLF_CreateGetPPReqMessage+0x2b4>)
 8000c3a:	f00f ff4f 	bl	8010adc <puts>
 8000c3e:	4b91      	ldr	r3, [pc, #580]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
 8000c42:	e10b      	b.n	8000e5c <_SMLF_CreateGetPPReqMessage+0x290>
			
	uint8_t tempB[LEN_OBIS_CLASS_VERS] = { 0 };
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	721a      	strb	r2, [r3, #8]
	memcpy(tempB, inOM->OBIS, LEN_OBIS);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	1c59      	adds	r1, r3, #1
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2206      	movs	r2, #6
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f00f fbe5 	bl	801042a <memcpy>
	*(uint16_t*)(tempB + LEN_OBIS) = Misc_SwapByteOrder16(inOM->COSEMClass);  //set class
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	891b      	ldrh	r3, [r3, #8]
 8000c64:	f107 0414 	add.w	r4, r7, #20
 8000c68:	3406      	adds	r4, #6
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fcae 	bl	80005cc <Misc_SwapByteOrder16>
 8000c70:	4603      	mov	r3, r0
 8000c72:	8023      	strh	r3, [r4, #0]
	tempB[LEN_OBIS + 2] = 0;   //all class versions 0
 8000c74:	2300      	movs	r3, #0
 8000c76:	773b      	strb	r3, [r7, #28]
	
	ASSERT_B(sml_tree_path_add_path_entry(tempTP, sml_octet_string_init(tempB, sizeof(tempB))) == SML_OK, SMLF_E_Malloc);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2109      	movs	r1, #9
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00b ffe2 	bl	800cc48 <sml_octet_string_init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4619      	mov	r1, r3
 8000c88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c8a:	f00d fd2d 	bl	800e6e8 <sml_tree_path_add_path_entry>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d011      	beq.n	8000cb8 <_SMLF_CreateGetPPReqMessage+0xec>
 8000c94:	22a7      	movs	r2, #167	; 0xa7
 8000c96:	4977      	ldr	r1, [pc, #476]	; (8000e74 <_SMLF_CreateGetPPReqMessage+0x2a8>)
 8000c98:	4877      	ldr	r0, [pc, #476]	; (8000e78 <_SMLF_CreateGetPPReqMessage+0x2ac>)
 8000c9a:	f00f feab 	bl	80109f4 <iprintf>
 8000c9e:	4879      	ldr	r0, [pc, #484]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000ca0:	f7ff fc6e 	bl	8000580 <LMN_GetErrorMessage>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00f fea4 	bl	80109f4 <iprintf>
 8000cac:	4874      	ldr	r0, [pc, #464]	; (8000e80 <_SMLF_CreateGetPPReqMessage+0x2b4>)
 8000cae:	f00f ff15 	bl	8010adc <puts>
 8000cb2:	4b74      	ldr	r3, [pc, #464]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb6:	e0d1      	b.n	8000e5c <_SMLF_CreateGetPPReqMessage+0x290>
	
#define _M_LOOP(_i)  do{for(uint16_t i=2; i<=_i; i++) { uint16_t ar = Misc_SwapByteOrder16(i); ASSERT_B(sml_tree_path_add_path_entry(tempTP, sml_octet_string_init((uint8_t*)&ar, 2)) == SML_OK, SMLF_E_Malloc); }} while(0)
	
	switch (inOM->COSEMClass)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	891b      	ldrh	r3, [r3, #8]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d036      	beq.n	8000d2e <_SMLF_CreateGetPPReqMessage+0x162>
 8000cc0:	f248 0202 	movw	r2, #32770	; 0x8002
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d062      	beq.n	8000d8e <_SMLF_CreateGetPPReqMessage+0x1c2>
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	f040 8090 	bne.w	8000dee <_SMLF_CreateGetPPReqMessage+0x222>
	{
	case COSC_Data: //2 data
		{
			_M_LOOP(2);
 8000cce:	2302      	movs	r3, #2
 8000cd0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000cd2:	e028      	b.n	8000d26 <_SMLF_CreateGetPPReqMessage+0x15a>
 8000cd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fc78 	bl	80005cc <Misc_SwapByteOrder16>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	827b      	strh	r3, [r7, #18]
 8000ce0:	f107 0312 	add.w	r3, r7, #18
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f00b ffae 	bl	800cc48 <sml_octet_string_init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000cf2:	f00d fcf9 	bl	800e6e8 <sml_tree_path_add_path_entry>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d011      	beq.n	8000d20 <_SMLF_CreateGetPPReqMessage+0x154>
 8000cfc:	22af      	movs	r2, #175	; 0xaf
 8000cfe:	495d      	ldr	r1, [pc, #372]	; (8000e74 <_SMLF_CreateGetPPReqMessage+0x2a8>)
 8000d00:	485d      	ldr	r0, [pc, #372]	; (8000e78 <_SMLF_CreateGetPPReqMessage+0x2ac>)
 8000d02:	f00f fe77 	bl	80109f4 <iprintf>
 8000d06:	485f      	ldr	r0, [pc, #380]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000d08:	f7ff fc3a 	bl	8000580 <LMN_GetErrorMessage>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f00f fe70 	bl	80109f4 <iprintf>
 8000d14:	485a      	ldr	r0, [pc, #360]	; (8000e80 <_SMLF_CreateGetPPReqMessage+0x2b4>)
 8000d16:	f00f fee1 	bl	8010adc <puts>
 8000d1a:	4b5a      	ldr	r3, [pc, #360]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d1e:	e09d      	b.n	8000e5c <_SMLF_CreateGetPPReqMessage+0x290>
 8000d20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d22:	3301      	adds	r3, #1
 8000d24:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000d26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d9d3      	bls.n	8000cd4 <_SMLF_CreateGetPPReqMessage+0x108>
			break;
 8000d2c:	e076      	b.n	8000e1c <_SMLF_CreateGetPPReqMessage+0x250>
		}
	case COSC_Reg: //2 data, 3 scaler_unit
		{
			_M_LOOP(3);
 8000d2e:	2302      	movs	r3, #2
 8000d30:	853b      	strh	r3, [r7, #40]	; 0x28
 8000d32:	e028      	b.n	8000d86 <_SMLF_CreateGetPPReqMessage+0x1ba>
 8000d34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fc48 	bl	80005cc <Misc_SwapByteOrder16>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	823b      	strh	r3, [r7, #16]
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	2102      	movs	r1, #2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f00b ff7e 	bl	800cc48 <sml_octet_string_init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d52:	f00d fcc9 	bl	800e6e8 <sml_tree_path_add_path_entry>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d011      	beq.n	8000d80 <_SMLF_CreateGetPPReqMessage+0x1b4>
 8000d5c:	22b4      	movs	r2, #180	; 0xb4
 8000d5e:	4945      	ldr	r1, [pc, #276]	; (8000e74 <_SMLF_CreateGetPPReqMessage+0x2a8>)
 8000d60:	4845      	ldr	r0, [pc, #276]	; (8000e78 <_SMLF_CreateGetPPReqMessage+0x2ac>)
 8000d62:	f00f fe47 	bl	80109f4 <iprintf>
 8000d66:	4847      	ldr	r0, [pc, #284]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000d68:	f7ff fc0a 	bl	8000580 <LMN_GetErrorMessage>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00f fe40 	bl	80109f4 <iprintf>
 8000d74:	4842      	ldr	r0, [pc, #264]	; (8000e80 <_SMLF_CreateGetPPReqMessage+0x2b4>)
 8000d76:	f00f feb1 	bl	8010adc <puts>
 8000d7a:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d7e:	e06d      	b.n	8000e5c <_SMLF_CreateGetPPReqMessage+0x290>
 8000d80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d82:	3301      	adds	r3, #1
 8000d84:	853b      	strh	r3, [r7, #40]	; 0x28
 8000d86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d9d3      	bls.n	8000d34 <_SMLF_CreateGetPPReqMessage+0x168>
			break;
 8000d8c:	e046      	b.n	8000e1c <_SMLF_CreateGetPPReqMessage+0x250>
		}
	case COSC_AdvExtReg: //2 data, 3 scaler_unit, 4 capture time, 5 status
		{
			_M_LOOP(5);
 8000d8e:	2302      	movs	r3, #2
 8000d90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d92:	e028      	b.n	8000de6 <_SMLF_CreateGetPPReqMessage+0x21a>
 8000d94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fc18 	bl	80005cc <Misc_SwapByteOrder16>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	81fb      	strh	r3, [r7, #14]
 8000da0:	f107 030e 	add.w	r3, r7, #14
 8000da4:	2102      	movs	r1, #2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00b ff4e 	bl	800cc48 <sml_octet_string_init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4619      	mov	r1, r3
 8000db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000db2:	f00d fc99 	bl	800e6e8 <sml_tree_path_add_path_entry>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d011      	beq.n	8000de0 <_SMLF_CreateGetPPReqMessage+0x214>
 8000dbc:	22b9      	movs	r2, #185	; 0xb9
 8000dbe:	492d      	ldr	r1, [pc, #180]	; (8000e74 <_SMLF_CreateGetPPReqMessage+0x2a8>)
 8000dc0:	482d      	ldr	r0, [pc, #180]	; (8000e78 <_SMLF_CreateGetPPReqMessage+0x2ac>)
 8000dc2:	f00f fe17 	bl	80109f4 <iprintf>
 8000dc6:	482f      	ldr	r0, [pc, #188]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000dc8:	f7ff fbda 	bl	8000580 <LMN_GetErrorMessage>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00f fe10 	bl	80109f4 <iprintf>
 8000dd4:	482a      	ldr	r0, [pc, #168]	; (8000e80 <_SMLF_CreateGetPPReqMessage+0x2b4>)
 8000dd6:	f00f fe81 	bl	8010adc <puts>
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8000dde:	e03d      	b.n	8000e5c <_SMLF_CreateGetPPReqMessage+0x290>
 8000de0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000de2:	3301      	adds	r3, #1
 8000de4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000de6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d9d3      	bls.n	8000d94 <_SMLF_CreateGetPPReqMessage+0x1c8>
			break;
 8000dec:	e016      	b.n	8000e1c <_SMLF_CreateGetPPReqMessage+0x250>
		}
	default:
		ASSERT_F(SMLF_E_COSEMClassType);
 8000dee:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <_SMLF_CreateGetPPReqMessage+0x2bc>)
 8000df0:	623b      	str	r3, [r7, #32]
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d011      	beq.n	8000e1c <_SMLF_CreateGetPPReqMessage+0x250>
 8000df8:	22bd      	movs	r2, #189	; 0xbd
 8000dfa:	491e      	ldr	r1, [pc, #120]	; (8000e74 <_SMLF_CreateGetPPReqMessage+0x2a8>)
 8000dfc:	481e      	ldr	r0, [pc, #120]	; (8000e78 <_SMLF_CreateGetPPReqMessage+0x2ac>)
 8000dfe:	f00f fdf9 	bl	80109f4 <iprintf>
 8000e02:	6a38      	ldr	r0, [r7, #32]
 8000e04:	f7ff fbbc 	bl	8000580 <LMN_GetErrorMessage>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00f fdf2 	bl	80109f4 <iprintf>
 8000e10:	481b      	ldr	r0, [pc, #108]	; (8000e80 <_SMLF_CreateGetPPReqMessage+0x2b4>)
 8000e12:	f00f fe63 	bl	8010adc <puts>
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
 8000e1a:	e01f      	b.n	8000e5c <_SMLF_CreateGetPPReqMessage+0x290>
	}
	
#undef _M_LOOP
	
	tempR = SMLP_Message_GenerateGetProcParameterRequest(_SML_Server_ID, sizeof(_SML_Server_ID), tempTP);
 8000e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e1e:	210a      	movs	r1, #10
 8000e20:	481a      	ldr	r0, [pc, #104]	; (8000e8c <_SMLF_CreateGetPPReqMessage+0x2c0>)
 8000e22:	f001 f9d5 	bl	80021d0 <SMLP_Message_GenerateGetProcParameterRequest>
 8000e26:	6338      	str	r0, [r7, #48]	; 0x30
	ASSERT_B(tempR, SMLF_E_Malloc);
 8000e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d111      	bne.n	8000e52 <_SMLF_CreateGetPPReqMessage+0x286>
 8000e2e:	22c3      	movs	r2, #195	; 0xc3
 8000e30:	4910      	ldr	r1, [pc, #64]	; (8000e74 <_SMLF_CreateGetPPReqMessage+0x2a8>)
 8000e32:	4811      	ldr	r0, [pc, #68]	; (8000e78 <_SMLF_CreateGetPPReqMessage+0x2ac>)
 8000e34:	f00f fdde 	bl	80109f4 <iprintf>
 8000e38:	4812      	ldr	r0, [pc, #72]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000e3a:	f7ff fba1 	bl	8000580 <LMN_GetErrorMessage>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f00f fdd7 	bl	80109f4 <iprintf>
 8000e46:	480e      	ldr	r0, [pc, #56]	; (8000e80 <_SMLF_CreateGetPPReqMessage+0x2b4>)
 8000e48:	f00f fe48 	bl	8010adc <puts>
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <_SMLF_CreateGetPPReqMessage+0x2b8>)
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8000e50:	e004      	b.n	8000e5c <_SMLF_CreateGetPPReqMessage+0x290>
	*outM = tempR;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e56:	601a      	str	r2, [r3, #0]
	
	return SMLF_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e006      	b.n	8000e6a <_SMLF_CreateGetPPReqMessage+0x29e>
	
err:
	sml_tree_path_free(tempTP);
 8000e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e5e:	f00d fc14 	bl	800e68a <sml_tree_path_free>
	sml_message_free(tempR);
 8000e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e64:	f00b f9dc 	bl	800c220 <sml_message_free>
	return tempRet;
 8000e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	373c      	adds	r7, #60	; 0x3c
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd90      	pop	{r4, r7, pc}
 8000e72:	bf00      	nop
 8000e74:	080124d4 	.word	0x080124d4
 8000e78:	080118b4 	.word	0x080118b4
 8000e7c:	fffff05e 	.word	0xfffff05e
 8000e80:	080118c4 	.word	0x080118c4
 8000e84:	fffff05d 	.word	0xfffff05d
 8000e88:	fffff05c 	.word	0xfffff05c
 8000e8c:	20000068 	.word	0x20000068

08000e90 <SMLF_ParseGetPPRespFile>:
}

//----------------------------------------------------------------
//parse sml file containing GPPResp messages
int32_t SMLF_ParseGetPPRespFile(sml_file* inFile, OBISDataChain_t** outData)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	int32_t tempRet = SMLF_E_Unknown;
 8000e9a:	f46f 637a 	mvn.w	r3, #4000	; 0xfa0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
	
	ASSERT_B(inFile && outData, SMLF_E_ParamInput);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <SMLF_ParseGetPPRespFile+0x1c>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d112      	bne.n	8000ed2 <SMLF_ParseGetPPRespFile+0x42>
 8000eac:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8000eb0:	494a      	ldr	r1, [pc, #296]	; (8000fdc <SMLF_ParseGetPPRespFile+0x14c>)
 8000eb2:	484b      	ldr	r0, [pc, #300]	; (8000fe0 <SMLF_ParseGetPPRespFile+0x150>)
 8000eb4:	f00f fd9e 	bl	80109f4 <iprintf>
 8000eb8:	484a      	ldr	r0, [pc, #296]	; (8000fe4 <SMLF_ParseGetPPRespFile+0x154>)
 8000eba:	f7ff fb61 	bl	8000580 <LMN_GetErrorMessage>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f00f fd97 	bl	80109f4 <iprintf>
 8000ec6:	4848      	ldr	r0, [pc, #288]	; (8000fe8 <SMLF_ParseGetPPRespFile+0x158>)
 8000ec8:	f00f fe08 	bl	8010adc <puts>
 8000ecc:	4b45      	ldr	r3, [pc, #276]	; (8000fe4 <SMLF_ParseGetPPRespFile+0x154>)
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed0:	e07f      	b.n	8000fd2 <SMLF_ParseGetPPRespFile+0x142>
	ASSERT_F(SMLP_File_Verify(inFile));
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f001 f9a2 	bl	800221c <SMLP_File_Verify>
 8000ed8:	61f8      	str	r0, [r7, #28]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d012      	beq.n	8000f06 <SMLF_ParseGetPPRespFile+0x76>
 8000ee0:	f240 127f 	movw	r2, #383	; 0x17f
 8000ee4:	493d      	ldr	r1, [pc, #244]	; (8000fdc <SMLF_ParseGetPPRespFile+0x14c>)
 8000ee6:	483e      	ldr	r0, [pc, #248]	; (8000fe0 <SMLF_ParseGetPPRespFile+0x150>)
 8000ee8:	f00f fd84 	bl	80109f4 <iprintf>
 8000eec:	69f8      	ldr	r0, [r7, #28]
 8000eee:	f7ff fb47 	bl	8000580 <LMN_GetErrorMessage>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00f fd7d 	bl	80109f4 <iprintf>
 8000efa:	483b      	ldr	r0, [pc, #236]	; (8000fe8 <SMLF_ParseGetPPRespFile+0x158>)
 8000efc:	f00f fdee 	bl	8010adc <puts>
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
 8000f04:	e065      	b.n	8000fd2 <SMLF_ParseGetPPRespFile+0x142>
	
	for (uint16_t i = 1; i < inFile->messages_len - 1; i++)
 8000f06:	2301      	movs	r3, #1
 8000f08:	847b      	strh	r3, [r7, #34]	; 0x22
 8000f0a:	e059      	b.n	8000fc0 <SMLF_ParseGetPPRespFile+0x130>
	{
		sml_message* tempM = inFile->messages[i];
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
		
		switch (*tempM->message_body->tag)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f240 5201 	movw	r2, #1281	; 0x501
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d018      	beq.n	8000f5c <SMLF_ParseGetPPRespFile+0xcc>
 8000f2a:	f64f 7201 	movw	r2, #65281	; 0xff01
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d131      	bne.n	8000f96 <SMLF_ParseGetPPRespFile+0x106>
		{
		case SML_MESSAGE_ATTENTION_RESPONSE:
			{
				TRACE(LMN_GetErrorMessage(SMLF_E_SMLAttention));
 8000f32:	f240 1289 	movw	r2, #393	; 0x189
 8000f36:	4929      	ldr	r1, [pc, #164]	; (8000fdc <SMLF_ParseGetPPRespFile+0x14c>)
 8000f38:	4829      	ldr	r0, [pc, #164]	; (8000fe0 <SMLF_ParseGetPPRespFile+0x150>)
 8000f3a:	f00f fd5b 	bl	80109f4 <iprintf>
 8000f3e:	482b      	ldr	r0, [pc, #172]	; (8000fec <SMLF_ParseGetPPRespFile+0x15c>)
 8000f40:	f7ff fb1e 	bl	8000580 <LMN_GetErrorMessage>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00f fd54 	bl	80109f4 <iprintf>
 8000f4c:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <SMLF_ParseGetPPRespFile+0x158>)
 8000f4e:	f00f fdc5 	bl	8010adc <puts>
				
				sml_attention_response* tempSpec = tempM->message_body->d.attention_response;
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	617b      	str	r3, [r7, #20]
				break;
 8000f5a:	e02e      	b.n	8000fba <SMLF_ParseGetPPRespFile+0x12a>
			}
		case SML_MESSAGE_GET_PROC_PARAMETER_RESPONSE:
			{
				sml_get_proc_parameter_response* tempSpec = tempM->message_body->d.get_proc_parameter_response;
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	613b      	str	r3, [r7, #16]
				int32_t tempR = _SMLF_ParseGetPPRespMessage(tempSpec, outData);
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	6938      	ldr	r0, [r7, #16]
 8000f68:	f000 f844 	bl	8000ff4 <_SMLF_ParseGetPPRespMessage>
 8000f6c:	60f8      	str	r0, [r7, #12]
				if (tempR != SMLF_OK) TRACE(LMN_GetErrorMessage(tempR));
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d021      	beq.n	8000fb8 <SMLF_ParseGetPPRespFile+0x128>
 8000f74:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8000f78:	4918      	ldr	r1, [pc, #96]	; (8000fdc <SMLF_ParseGetPPRespFile+0x14c>)
 8000f7a:	4819      	ldr	r0, [pc, #100]	; (8000fe0 <SMLF_ParseGetPPRespFile+0x150>)
 8000f7c:	f00f fd3a 	bl	80109f4 <iprintf>
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff fafd 	bl	8000580 <LMN_GetErrorMessage>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f00f fd33 	bl	80109f4 <iprintf>
 8000f8e:	4816      	ldr	r0, [pc, #88]	; (8000fe8 <SMLF_ParseGetPPRespFile+0x158>)
 8000f90:	f00f fda4 	bl	8010adc <puts>
				break;
 8000f94:	e010      	b.n	8000fb8 <SMLF_ParseGetPPRespFile+0x128>
			}
		default:
			{
				TRACE(LMN_GetErrorMessage(SMLF_E_SMLMessageType));
 8000f96:	f240 1297 	movw	r2, #407	; 0x197
 8000f9a:	4910      	ldr	r1, [pc, #64]	; (8000fdc <SMLF_ParseGetPPRespFile+0x14c>)
 8000f9c:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <SMLF_ParseGetPPRespFile+0x150>)
 8000f9e:	f00f fd29 	bl	80109f4 <iprintf>
 8000fa2:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <SMLF_ParseGetPPRespFile+0x160>)
 8000fa4:	f7ff faec 	bl	8000580 <LMN_GetErrorMessage>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00f fd22 	bl	80109f4 <iprintf>
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <SMLF_ParseGetPPRespFile+0x158>)
 8000fb2:	f00f fd93 	bl	8010adc <puts>
				break;
 8000fb6:	e000      	b.n	8000fba <SMLF_ParseGetPPRespFile+0x12a>
				break;
 8000fb8:	bf00      	nop
	for (uint16_t i = 1; i < inFile->messages_len - 1; i++)
 8000fba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8000fc0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	db9e      	blt.n	8000f0c <SMLF_ParseGetPPRespFile+0x7c>
			}
		}
	}
	
	return SMLF_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <SMLF_ParseGetPPRespFile+0x144>
	
err:
	return tempRet;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	080124f0 	.word	0x080124f0
 8000fe0:	080118b4 	.word	0x080118b4
 8000fe4:	fffff05e 	.word	0xfffff05e
 8000fe8:	080118c4 	.word	0x080118c4
 8000fec:	fffff058 	.word	0xfffff058
 8000ff0:	fffff059 	.word	0xfffff059

08000ff4 <_SMLF_ParseGetPPRespMessage>:

//----------------------------------------------------------------
//parse GPPResp sml message
int32_t _SMLF_ParseGetPPRespMessage(sml_get_proc_parameter_response* inMsg, OBISDataChain_t** outData)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	int32_t tempRet = SMLF_E_Unknown;
 8000ffe:	f46f 637a 	mvn.w	r3, #4000	; 0xfa0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
	
	ASSERT_B(inMsg && outData, SMLF_E_ParamInput);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <_SMLF_ParseGetPPRespMessage+0x1c>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d112      	bne.n	8001036 <_SMLF_ParseGetPPRespMessage+0x42>
 8001010:	f240 12a9 	movw	r2, #425	; 0x1a9
 8001014:	4989      	ldr	r1, [pc, #548]	; (800123c <_SMLF_ParseGetPPRespMessage+0x248>)
 8001016:	488a      	ldr	r0, [pc, #552]	; (8001240 <_SMLF_ParseGetPPRespMessage+0x24c>)
 8001018:	f00f fcec 	bl	80109f4 <iprintf>
 800101c:	4889      	ldr	r0, [pc, #548]	; (8001244 <_SMLF_ParseGetPPRespMessage+0x250>)
 800101e:	f7ff faaf 	bl	8000580 <LMN_GetErrorMessage>
 8001022:	4603      	mov	r3, r0
 8001024:	4618      	mov	r0, r3
 8001026:	f00f fce5 	bl	80109f4 <iprintf>
 800102a:	4887      	ldr	r0, [pc, #540]	; (8001248 <_SMLF_ParseGetPPRespMessage+0x254>)
 800102c:	f00f fd56 	bl	8010adc <puts>
 8001030:	4b84      	ldr	r3, [pc, #528]	; (8001244 <_SMLF_ParseGetPPRespMessage+0x250>)
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
 8001034:	e0fd      	b.n	8001232 <_SMLF_ParseGetPPRespMessage+0x23e>
	
	ASSERT_B((TEST_P(inMsg, parameter_tree, parameter_name, str)) && inMsg->parameter_tree->parameter_name->len == LEN_OBIS_CLASS_VERS, SMLF_E_SMLGPPRespMalformed);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d014      	beq.n	8001066 <_SMLF_ParseGetPPRespMessage+0x72>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d010      	beq.n	8001066 <_SMLF_ParseGetPPRespMessage+0x72>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <_SMLF_ParseGetPPRespMessage+0x72>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d005      	beq.n	8001066 <_SMLF_ParseGetPPRespMessage+0x72>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b09      	cmp	r3, #9
 8001064:	d012      	beq.n	800108c <_SMLF_ParseGetPPRespMessage+0x98>
 8001066:	f240 12ab 	movw	r2, #427	; 0x1ab
 800106a:	4974      	ldr	r1, [pc, #464]	; (800123c <_SMLF_ParseGetPPRespMessage+0x248>)
 800106c:	4874      	ldr	r0, [pc, #464]	; (8001240 <_SMLF_ParseGetPPRespMessage+0x24c>)
 800106e:	f00f fcc1 	bl	80109f4 <iprintf>
 8001072:	4876      	ldr	r0, [pc, #472]	; (800124c <_SMLF_ParseGetPPRespMessage+0x258>)
 8001074:	f7ff fa84 	bl	8000580 <LMN_GetErrorMessage>
 8001078:	4603      	mov	r3, r0
 800107a:	4618      	mov	r0, r3
 800107c:	f00f fcba 	bl	80109f4 <iprintf>
 8001080:	4871      	ldr	r0, [pc, #452]	; (8001248 <_SMLF_ParseGetPPRespMessage+0x254>)
 8001082:	f00f fd2b 	bl	8010adc <puts>
 8001086:	4b71      	ldr	r3, [pc, #452]	; (800124c <_SMLF_ParseGetPPRespMessage+0x258>)
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
 800108a:	e0d2      	b.n	8001232 <_SMLF_ParseGetPPRespMessage+0x23e>
	uint8_t* tempOBIS = inMsg->parameter_tree->parameter_name->str;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	623b      	str	r3, [r7, #32]
	
	OBISMapping_t* tempOM = OBIS_MappingGet2(tempOBIS);
 8001096:	6a38      	ldr	r0, [r7, #32]
 8001098:	f7ff fafe 	bl	8000698 <OBIS_MappingGet2>
 800109c:	61f8      	str	r0, [r7, #28]
	ASSERT_B(tempOM, SMLF_E_OBISUnknown);
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d112      	bne.n	80010ca <_SMLF_ParseGetPPRespMessage+0xd6>
 80010a4:	f240 12af 	movw	r2, #431	; 0x1af
 80010a8:	4964      	ldr	r1, [pc, #400]	; (800123c <_SMLF_ParseGetPPRespMessage+0x248>)
 80010aa:	4865      	ldr	r0, [pc, #404]	; (8001240 <_SMLF_ParseGetPPRespMessage+0x24c>)
 80010ac:	f00f fca2 	bl	80109f4 <iprintf>
 80010b0:	4867      	ldr	r0, [pc, #412]	; (8001250 <_SMLF_ParseGetPPRespMessage+0x25c>)
 80010b2:	f7ff fa65 	bl	8000580 <LMN_GetErrorMessage>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00f fc9b 	bl	80109f4 <iprintf>
 80010be:	4862      	ldr	r0, [pc, #392]	; (8001248 <_SMLF_ParseGetPPRespMessage+0x254>)
 80010c0:	f00f fd0c 	bl	8010adc <puts>
 80010c4:	4b62      	ldr	r3, [pc, #392]	; (8001250 <_SMLF_ParseGetPPRespMessage+0x25c>)
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	e0b3      	b.n	8001232 <_SMLF_ParseGetPPRespMessage+0x23e>
	
	uint16_t tempClass = Misc_SwapByteOrder16(*((uint16_t*)&tempOBIS[LEN_OBIS]));
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	3306      	adds	r3, #6
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa7b 	bl	80005cc <Misc_SwapByteOrder16>
 80010d6:	4603      	mov	r3, r0
 80010d8:	837b      	strh	r3, [r7, #26]
	uint8_t tempVers = tempOBIS[LEN_OBIS + 2];
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	7a1b      	ldrb	r3, [r3, #8]
 80010de:	767b      	strb	r3, [r7, #25]
	
	ASSERT_B(tempClass == tempOM->COSEMClass && tempVers == 0, SMLF_E_COSEMClassProperties);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	891b      	ldrh	r3, [r3, #8]
 80010e4:	8b7a      	ldrh	r2, [r7, #26]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d102      	bne.n	80010f0 <_SMLF_ParseGetPPRespMessage+0xfc>
 80010ea:	7e7b      	ldrb	r3, [r7, #25]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d012      	beq.n	8001116 <_SMLF_ParseGetPPRespMessage+0x122>
 80010f0:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80010f4:	4951      	ldr	r1, [pc, #324]	; (800123c <_SMLF_ParseGetPPRespMessage+0x248>)
 80010f6:	4852      	ldr	r0, [pc, #328]	; (8001240 <_SMLF_ParseGetPPRespMessage+0x24c>)
 80010f8:	f00f fc7c 	bl	80109f4 <iprintf>
 80010fc:	4855      	ldr	r0, [pc, #340]	; (8001254 <_SMLF_ParseGetPPRespMessage+0x260>)
 80010fe:	f7ff fa3f 	bl	8000580 <LMN_GetErrorMessage>
 8001102:	4603      	mov	r3, r0
 8001104:	4618      	mov	r0, r3
 8001106:	f00f fc75 	bl	80109f4 <iprintf>
 800110a:	484f      	ldr	r0, [pc, #316]	; (8001248 <_SMLF_ParseGetPPRespMessage+0x254>)
 800110c:	f00f fce6 	bl	8010adc <puts>
 8001110:	4b50      	ldr	r3, [pc, #320]	; (8001254 <_SMLF_ParseGetPPRespMessage+0x260>)
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
 8001114:	e08d      	b.n	8001232 <_SMLF_ParseGetPPRespMessage+0x23e>
	
	switch (tempClass)
 8001116:	8b7b      	ldrh	r3, [r7, #26]
 8001118:	2b03      	cmp	r3, #3
 800111a:	d027      	beq.n	800116c <_SMLF_ParseGetPPRespMessage+0x178>
 800111c:	f248 0202 	movw	r2, #32770	; 0x8002
 8001120:	4293      	cmp	r3, r2
 8001122:	d045      	beq.n	80011b0 <_SMLF_ParseGetPPRespMessage+0x1bc>
 8001124:	2b01      	cmp	r3, #1
 8001126:	d165      	bne.n	80011f4 <_SMLF_ParseGetPPRespMessage+0x200>
	{
	case COSC_Data: //2 data
		{
			ASSERT_F(_SMLF_ParseCOSEMClass_1(inMsg->parameter_tree->child_list, inMsg->parameter_tree->child_list_len, tempOM, outData));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	6898      	ldr	r0, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	b299      	uxth	r1, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f000 f88f 	bl	800125c <_SMLF_ParseCOSEMClass_1>
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d06e      	beq.n	8001224 <_SMLF_ParseGetPPRespMessage+0x230>
 8001146:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 800114a:	493c      	ldr	r1, [pc, #240]	; (800123c <_SMLF_ParseGetPPRespMessage+0x248>)
 800114c:	483c      	ldr	r0, [pc, #240]	; (8001240 <_SMLF_ParseGetPPRespMessage+0x24c>)
 800114e:	f00f fc51 	bl	80109f4 <iprintf>
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff fa14 	bl	8000580 <LMN_GetErrorMessage>
 8001158:	4603      	mov	r3, r0
 800115a:	4618      	mov	r0, r3
 800115c:	f00f fc4a 	bl	80109f4 <iprintf>
 8001160:	4839      	ldr	r0, [pc, #228]	; (8001248 <_SMLF_ParseGetPPRespMessage+0x254>)
 8001162:	f00f fcbb 	bl	8010adc <puts>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
 800116a:	e062      	b.n	8001232 <_SMLF_ParseGetPPRespMessage+0x23e>
			break;
		}
	case COSC_Reg: //2 data, 3 scaler_unit
		{
			ASSERT_F(_SMLF_ParseCOSEMClass_3(inMsg->parameter_tree->child_list, inMsg->parameter_tree->child_list_len, tempOM, outData));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	6898      	ldr	r0, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	b299      	uxth	r1, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	f000 f99f 	bl	80014c0 <_SMLF_ParseCOSEMClass_3>
 8001182:	6138      	str	r0, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d04e      	beq.n	8001228 <_SMLF_ParseGetPPRespMessage+0x234>
 800118a:	f240 12bf 	movw	r2, #447	; 0x1bf
 800118e:	492b      	ldr	r1, [pc, #172]	; (800123c <_SMLF_ParseGetPPRespMessage+0x248>)
 8001190:	482b      	ldr	r0, [pc, #172]	; (8001240 <_SMLF_ParseGetPPRespMessage+0x24c>)
 8001192:	f00f fc2f 	bl	80109f4 <iprintf>
 8001196:	6938      	ldr	r0, [r7, #16]
 8001198:	f7ff f9f2 	bl	8000580 <LMN_GetErrorMessage>
 800119c:	4603      	mov	r3, r0
 800119e:	4618      	mov	r0, r3
 80011a0:	f00f fc28 	bl	80109f4 <iprintf>
 80011a4:	4828      	ldr	r0, [pc, #160]	; (8001248 <_SMLF_ParseGetPPRespMessage+0x254>)
 80011a6:	f00f fc99 	bl	8010adc <puts>
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
 80011ae:	e040      	b.n	8001232 <_SMLF_ParseGetPPRespMessage+0x23e>
			break;
		}
	case COSC_AdvExtReg: //2 data, 3 scaler_unit, 4 capture time, 5 status
		{
			ASSERT_F(_SMLF_ParseCOSEMClass_32770(inMsg->parameter_tree->child_list, inMsg->parameter_tree->child_list_len, tempOM, outData));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	6898      	ldr	r0, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	b299      	uxth	r1, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f000 fb61 	bl	8001888 <_SMLF_ParseCOSEMClass_32770>
 80011c6:	6178      	str	r0, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d02e      	beq.n	800122c <_SMLF_ParseGetPPRespMessage+0x238>
 80011ce:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 80011d2:	491a      	ldr	r1, [pc, #104]	; (800123c <_SMLF_ParseGetPPRespMessage+0x248>)
 80011d4:	481a      	ldr	r0, [pc, #104]	; (8001240 <_SMLF_ParseGetPPRespMessage+0x24c>)
 80011d6:	f00f fc0d 	bl	80109f4 <iprintf>
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff f9d0 	bl	8000580 <LMN_GetErrorMessage>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00f fc06 	bl	80109f4 <iprintf>
 80011e8:	4817      	ldr	r0, [pc, #92]	; (8001248 <_SMLF_ParseGetPPRespMessage+0x254>)
 80011ea:	f00f fc77 	bl	8010adc <puts>
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
 80011f2:	e01e      	b.n	8001232 <_SMLF_ParseGetPPRespMessage+0x23e>
			break;
		}
	default:
		ASSERT_F(SMLF_E_COSEMClassType);
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <_SMLF_ParseGetPPRespMessage+0x264>)
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d017      	beq.n	800122e <_SMLF_ParseGetPPRespMessage+0x23a>
 80011fe:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8001202:	490e      	ldr	r1, [pc, #56]	; (800123c <_SMLF_ParseGetPPRespMessage+0x248>)
 8001204:	480e      	ldr	r0, [pc, #56]	; (8001240 <_SMLF_ParseGetPPRespMessage+0x24c>)
 8001206:	f00f fbf5 	bl	80109f4 <iprintf>
 800120a:	68b8      	ldr	r0, [r7, #8]
 800120c:	f7ff f9b8 	bl	8000580 <LMN_GetErrorMessage>
 8001210:	4603      	mov	r3, r0
 8001212:	4618      	mov	r0, r3
 8001214:	f00f fbee 	bl	80109f4 <iprintf>
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <_SMLF_ParseGetPPRespMessage+0x254>)
 800121a:	f00f fc5f 	bl	8010adc <puts>
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
 8001222:	e006      	b.n	8001232 <_SMLF_ParseGetPPRespMessage+0x23e>
			break;
 8001224:	bf00      	nop
 8001226:	e002      	b.n	800122e <_SMLF_ParseGetPPRespMessage+0x23a>
			break;
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <_SMLF_ParseGetPPRespMessage+0x23a>
			break;
 800122c:	bf00      	nop
	}
	
	return SMLF_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <_SMLF_ParseGetPPRespMessage+0x240>
	
err:
	return tempRet;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001234:	4618      	mov	r0, r3
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	08012508 	.word	0x08012508
 8001240:	080118b4 	.word	0x080118b4
 8001244:	fffff05e 	.word	0xfffff05e
 8001248:	080118c4 	.word	0x080118c4
 800124c:	fffff057 	.word	0xfffff057
 8001250:	fffff055 	.word	0xfffff055
 8001254:	fffff05b 	.word	0xfffff05b
 8001258:	fffff05c 	.word	0xfffff05c

0800125c <_SMLF_ParseCOSEMClass_1>:

//----------------------------------------------------------------
//parse GPPResp sml message for COSEM data class
int32_t _SMLF_ParseCOSEMClass_1(struct s_tree** inTree, uint16_t inTreeLen, OBISMapping_t* inOM, OBISDataChain_t** outData)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	460b      	mov	r3, r1
 800126a:	817b      	strh	r3, [r7, #10]
	int32_t tempRet = SMLF_E_Unknown;
 800126c:	f46f 637a 	mvn.w	r3, #4000	; 0xfa0
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
	OBISDataChain_t* tempD = NULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
	
	ASSERT_B(inTree && inTreeLen > 0 && inOM && outData, SMLF_E_ParamInput);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d008      	beq.n	800128e <_SMLF_ParseCOSEMClass_1+0x32>
 800127c:	897b      	ldrh	r3, [r7, #10]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <_SMLF_ParseCOSEMClass_1+0x32>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <_SMLF_ParseCOSEMClass_1+0x32>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d112      	bne.n	80012b4 <_SMLF_ParseCOSEMClass_1+0x58>
 800128e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001292:	4983      	ldr	r1, [pc, #524]	; (80014a0 <_SMLF_ParseCOSEMClass_1+0x244>)
 8001294:	4883      	ldr	r0, [pc, #524]	; (80014a4 <_SMLF_ParseCOSEMClass_1+0x248>)
 8001296:	f00f fbad 	bl	80109f4 <iprintf>
 800129a:	4883      	ldr	r0, [pc, #524]	; (80014a8 <_SMLF_ParseCOSEMClass_1+0x24c>)
 800129c:	f7ff f970 	bl	8000580 <LMN_GetErrorMessage>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f00f fba6 	bl	80109f4 <iprintf>
 80012a8:	4880      	ldr	r0, [pc, #512]	; (80014ac <_SMLF_ParseCOSEMClass_1+0x250>)
 80012aa:	f00f fc17 	bl	8010adc <puts>
 80012ae:	4b7e      	ldr	r3, [pc, #504]	; (80014a8 <_SMLF_ParseCOSEMClass_1+0x24c>)
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b2:	e0ec      	b.n	800148e <_SMLF_ParseCOSEMClass_1+0x232>
	
	tempD = malloc(sizeof(OBISDataChain_t));
 80012b4:	2030      	movs	r0, #48	; 0x30
 80012b6:	f007 fed3 	bl	8009060 <pvPortMalloc>
 80012ba:	62b8      	str	r0, [r7, #40]	; 0x28
	ASSERT_B(tempD, SMLF_E_Malloc);
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d112      	bne.n	80012e8 <_SMLF_ParseCOSEMClass_1+0x8c>
 80012c2:	f240 12db 	movw	r2, #475	; 0x1db
 80012c6:	4976      	ldr	r1, [pc, #472]	; (80014a0 <_SMLF_ParseCOSEMClass_1+0x244>)
 80012c8:	4876      	ldr	r0, [pc, #472]	; (80014a4 <_SMLF_ParseCOSEMClass_1+0x248>)
 80012ca:	f00f fb93 	bl	80109f4 <iprintf>
 80012ce:	4878      	ldr	r0, [pc, #480]	; (80014b0 <_SMLF_ParseCOSEMClass_1+0x254>)
 80012d0:	f7ff f956 	bl	8000580 <LMN_GetErrorMessage>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00f fb8c 	bl	80109f4 <iprintf>
 80012dc:	4873      	ldr	r0, [pc, #460]	; (80014ac <_SMLF_ParseCOSEMClass_1+0x250>)
 80012de:	f00f fbfd 	bl	8010adc <puts>
 80012e2:	4b73      	ldr	r3, [pc, #460]	; (80014b0 <_SMLF_ParseCOSEMClass_1+0x254>)
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e6:	e0d2      	b.n	800148e <_SMLF_ParseCOSEMClass_1+0x232>
	memset(tempD, 0, sizeof(OBISDataChain_t));
 80012e8:	2230      	movs	r2, #48	; 0x30
 80012ea:	2100      	movs	r1, #0
 80012ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012ee:	f00f f8a7 	bl	8010440 <memset>
	tempD->Mapping = inOM;
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	601a      	str	r2, [r3, #0]

	for (uint16_t i = 0; i < inTreeLen; i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80012fc:	e0b9      	b.n	8001472 <_SMLF_ParseCOSEMClass_1+0x216>
	{
		ASSERT_B((TEST_P(inTree[i], parameter_name, str)) && inTree[i]->parameter_name->len == 2, SMLF_E_SMLGPPRespMalformed);
 80012fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d019      	beq.n	8001340 <_SMLF_ParseCOSEMClass_1+0xe4>
 800130c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d011      	beq.n	8001340 <_SMLF_ParseCOSEMClass_1+0xe4>
 800131c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d008      	beq.n	8001340 <_SMLF_ParseCOSEMClass_1+0xe4>
 800132e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d012      	beq.n	8001366 <_SMLF_ParseCOSEMClass_1+0x10a>
 8001340:	f240 12e1 	movw	r2, #481	; 0x1e1
 8001344:	4956      	ldr	r1, [pc, #344]	; (80014a0 <_SMLF_ParseCOSEMClass_1+0x244>)
 8001346:	4857      	ldr	r0, [pc, #348]	; (80014a4 <_SMLF_ParseCOSEMClass_1+0x248>)
 8001348:	f00f fb54 	bl	80109f4 <iprintf>
 800134c:	4859      	ldr	r0, [pc, #356]	; (80014b4 <_SMLF_ParseCOSEMClass_1+0x258>)
 800134e:	f7ff f917 	bl	8000580 <LMN_GetErrorMessage>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	f00f fb4d 	bl	80109f4 <iprintf>
 800135a:	4854      	ldr	r0, [pc, #336]	; (80014ac <_SMLF_ParseCOSEMClass_1+0x250>)
 800135c:	f00f fbbe 	bl	8010adc <puts>
 8001360:	4b54      	ldr	r3, [pc, #336]	; (80014b4 <_SMLF_ParseCOSEMClass_1+0x258>)
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001364:	e093      	b.n	800148e <_SMLF_ParseCOSEMClass_1+0x232>
		uint16_t tempAttrIdx = Misc_SwapByteOrder16(*((uint16_t*)inTree[i]->parameter_name->str));
 8001366:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4413      	add	r3, r2
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f928 	bl	80005cc <Misc_SwapByteOrder16>
 800137c:	4603      	mov	r3, r0
 800137e:	84bb      	strh	r3, [r7, #36]	; 0x24
		
		sml_proc_par_value* tempPPV = inTree[i]->parameter_value;
 8001380:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	623b      	str	r3, [r7, #32]
		ASSERT_B(tempPPV && tempPPV->tag, SMLF_E_SMLGPPRespMalformed);
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <_SMLF_ParseCOSEMClass_1+0x140>
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d112      	bne.n	80013c2 <_SMLF_ParseCOSEMClass_1+0x166>
 800139c:	f240 12e5 	movw	r2, #485	; 0x1e5
 80013a0:	493f      	ldr	r1, [pc, #252]	; (80014a0 <_SMLF_ParseCOSEMClass_1+0x244>)
 80013a2:	4840      	ldr	r0, [pc, #256]	; (80014a4 <_SMLF_ParseCOSEMClass_1+0x248>)
 80013a4:	f00f fb26 	bl	80109f4 <iprintf>
 80013a8:	4842      	ldr	r0, [pc, #264]	; (80014b4 <_SMLF_ParseCOSEMClass_1+0x258>)
 80013aa:	f7ff f8e9 	bl	8000580 <LMN_GetErrorMessage>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00f fb1f 	bl	80109f4 <iprintf>
 80013b6:	483d      	ldr	r0, [pc, #244]	; (80014ac <_SMLF_ParseCOSEMClass_1+0x250>)
 80013b8:	f00f fb90 	bl	8010adc <puts>
 80013bc:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <_SMLF_ParseCOSEMClass_1+0x258>)
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	e065      	b.n	800148e <_SMLF_ParseCOSEMClass_1+0x232>
		
		switch (tempAttrIdx)
 80013c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d138      	bne.n	800143a <_SMLF_ParseCOSEMClass_1+0x1de>
		{
		case 2://data
			{
				ASSERT_B(*tempPPV->tag == SML_PROC_PAR_VALUE_TAG_VALUE, SMLF_E_ValueTypeMismatch);
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d012      	beq.n	80013f8 <_SMLF_ParseCOSEMClass_1+0x19c>
 80013d2:	f240 12eb 	movw	r2, #491	; 0x1eb
 80013d6:	4932      	ldr	r1, [pc, #200]	; (80014a0 <_SMLF_ParseCOSEMClass_1+0x244>)
 80013d8:	4832      	ldr	r0, [pc, #200]	; (80014a4 <_SMLF_ParseCOSEMClass_1+0x248>)
 80013da:	f00f fb0b 	bl	80109f4 <iprintf>
 80013de:	4836      	ldr	r0, [pc, #216]	; (80014b8 <_SMLF_ParseCOSEMClass_1+0x25c>)
 80013e0:	f7ff f8ce 	bl	8000580 <LMN_GetErrorMessage>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00f fb04 	bl	80109f4 <iprintf>
 80013ec:	482f      	ldr	r0, [pc, #188]	; (80014ac <_SMLF_ParseCOSEMClass_1+0x250>)
 80013ee:	f00f fb75 	bl	8010adc <puts>
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <_SMLF_ParseCOSEMClass_1+0x25c>)
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013f6:	e04a      	b.n	800148e <_SMLF_ParseCOSEMClass_1+0x232>
				sml_value* tempV = tempPPV->data.value;
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	61fb      	str	r3, [r7, #28]
				
				ASSERT_F(_SMLF_TxferSMLValue2OBISData(inOM, tempV, &tempD->Data.CReg.Value));
 80013fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001400:	3308      	adds	r3, #8
 8001402:	461a      	mov	r2, r3
 8001404:	69f9      	ldr	r1, [r7, #28]
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fcf4 	bl	8001df4 <_SMLF_TxferSMLValue2OBISData>
 800140c:	61b8      	str	r0, [r7, #24]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d02a      	beq.n	800146a <_SMLF_ParseCOSEMClass_1+0x20e>
 8001414:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8001418:	4921      	ldr	r1, [pc, #132]	; (80014a0 <_SMLF_ParseCOSEMClass_1+0x244>)
 800141a:	4822      	ldr	r0, [pc, #136]	; (80014a4 <_SMLF_ParseCOSEMClass_1+0x248>)
 800141c:	f00f faea 	bl	80109f4 <iprintf>
 8001420:	69b8      	ldr	r0, [r7, #24]
 8001422:	f7ff f8ad 	bl	8000580 <LMN_GetErrorMessage>
 8001426:	4603      	mov	r3, r0
 8001428:	4618      	mov	r0, r3
 800142a:	f00f fae3 	bl	80109f4 <iprintf>
 800142e:	481f      	ldr	r0, [pc, #124]	; (80014ac <_SMLF_ParseCOSEMClass_1+0x250>)
 8001430:	f00f fb54 	bl	8010adc <puts>
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001438:	e029      	b.n	800148e <_SMLF_ParseCOSEMClass_1+0x232>
				
				break;
			}
		default:
			ASSERT_F(SMLF_E_COSEMClassProperties);
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <_SMLF_ParseCOSEMClass_1+0x260>)
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <_SMLF_ParseCOSEMClass_1+0x210>
 8001444:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001448:	4915      	ldr	r1, [pc, #84]	; (80014a0 <_SMLF_ParseCOSEMClass_1+0x244>)
 800144a:	4816      	ldr	r0, [pc, #88]	; (80014a4 <_SMLF_ParseCOSEMClass_1+0x248>)
 800144c:	f00f fad2 	bl	80109f4 <iprintf>
 8001450:	6978      	ldr	r0, [r7, #20]
 8001452:	f7ff f895 	bl	8000580 <LMN_GetErrorMessage>
 8001456:	4603      	mov	r3, r0
 8001458:	4618      	mov	r0, r3
 800145a:	f00f facb 	bl	80109f4 <iprintf>
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <_SMLF_ParseCOSEMClass_1+0x250>)
 8001460:	f00f fb3c 	bl	8010adc <puts>
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001468:	e011      	b.n	800148e <_SMLF_ParseCOSEMClass_1+0x232>
				break;
 800146a:	bf00      	nop
	for (uint16_t i = 0; i < inTreeLen; i++)
 800146c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800146e:	3301      	adds	r3, #1
 8001470:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001472:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001474:	897b      	ldrh	r3, [r7, #10]
 8001476:	429a      	cmp	r2, r3
 8001478:	f4ff af41 	bcc.w	80012fe <_SMLF_ParseCOSEMClass_1+0xa2>
		}	
	}
	
	//insert data @ chain start
	tempD->Next = *outData;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
	*outData = tempD;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001488:	601a      	str	r2, [r3, #0]
	
	return SMLF_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e003      	b.n	8001496 <_SMLF_ParseCOSEMClass_1+0x23a>
	
err:
	OBIS_DataFreeSingle(tempD);
 800148e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001490:	f7ff f934 	bl	80006fc <OBIS_DataFreeSingle>
	return tempRet;
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001496:	4618      	mov	r0, r3
 8001498:	3730      	adds	r7, #48	; 0x30
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	08012524 	.word	0x08012524
 80014a4:	080118b4 	.word	0x080118b4
 80014a8:	fffff05e 	.word	0xfffff05e
 80014ac:	080118c4 	.word	0x080118c4
 80014b0:	fffff05d 	.word	0xfffff05d
 80014b4:	fffff057 	.word	0xfffff057
 80014b8:	fffff054 	.word	0xfffff054
 80014bc:	fffff05b 	.word	0xfffff05b

080014c0 <_SMLF_ParseCOSEMClass_3>:

//----------------------------------------------------------------
//parse GPPResp sml message for COSEM register class
int32_t _SMLF_ParseCOSEMClass_3(struct s_tree** inTree, uint16_t inTreeLen, OBISMapping_t* inOM, OBISDataChain_t** outData)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b090      	sub	sp, #64	; 0x40
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	460b      	mov	r3, r1
 80014ce:	817b      	strh	r3, [r7, #10]
	int32_t tempRet = SMLF_E_Unknown;
 80014d0:	f46f 637a 	mvn.w	r3, #4000	; 0xfa0
 80014d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	OBISDataChain_t* tempD = NULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	63bb      	str	r3, [r7, #56]	; 0x38
	
	ASSERT_B(inTree && inTreeLen > 0 && inOM && outData, SMLF_E_ParamInput);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <_SMLF_ParseCOSEMClass_3+0x32>
 80014e0:	897b      	ldrh	r3, [r7, #10]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <_SMLF_ParseCOSEMClass_3+0x32>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <_SMLF_ParseCOSEMClass_3+0x32>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d112      	bne.n	8001518 <_SMLF_ParseCOSEMClass_3+0x58>
 80014f2:	f240 2209 	movw	r2, #521	; 0x209
 80014f6:	49a8      	ldr	r1, [pc, #672]	; (8001798 <_SMLF_ParseCOSEMClass_3+0x2d8>)
 80014f8:	48a8      	ldr	r0, [pc, #672]	; (800179c <_SMLF_ParseCOSEMClass_3+0x2dc>)
 80014fa:	f00f fa7b 	bl	80109f4 <iprintf>
 80014fe:	48a8      	ldr	r0, [pc, #672]	; (80017a0 <_SMLF_ParseCOSEMClass_3+0x2e0>)
 8001500:	f7ff f83e 	bl	8000580 <LMN_GetErrorMessage>
 8001504:	4603      	mov	r3, r0
 8001506:	4618      	mov	r0, r3
 8001508:	f00f fa74 	bl	80109f4 <iprintf>
 800150c:	48a5      	ldr	r0, [pc, #660]	; (80017a4 <_SMLF_ParseCOSEMClass_3+0x2e4>)
 800150e:	f00f fae5 	bl	8010adc <puts>
 8001512:	4ba3      	ldr	r3, [pc, #652]	; (80017a0 <_SMLF_ParseCOSEMClass_3+0x2e0>)
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001516:	e1a4      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
	
	tempD = malloc(sizeof(OBISDataChain_t));
 8001518:	2030      	movs	r0, #48	; 0x30
 800151a:	f007 fda1 	bl	8009060 <pvPortMalloc>
 800151e:	63b8      	str	r0, [r7, #56]	; 0x38
	ASSERT_B(tempD, SMLF_E_Malloc);
 8001520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001522:	2b00      	cmp	r3, #0
 8001524:	d112      	bne.n	800154c <_SMLF_ParseCOSEMClass_3+0x8c>
 8001526:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800152a:	499b      	ldr	r1, [pc, #620]	; (8001798 <_SMLF_ParseCOSEMClass_3+0x2d8>)
 800152c:	489b      	ldr	r0, [pc, #620]	; (800179c <_SMLF_ParseCOSEMClass_3+0x2dc>)
 800152e:	f00f fa61 	bl	80109f4 <iprintf>
 8001532:	489d      	ldr	r0, [pc, #628]	; (80017a8 <_SMLF_ParseCOSEMClass_3+0x2e8>)
 8001534:	f7ff f824 	bl	8000580 <LMN_GetErrorMessage>
 8001538:	4603      	mov	r3, r0
 800153a:	4618      	mov	r0, r3
 800153c:	f00f fa5a 	bl	80109f4 <iprintf>
 8001540:	4898      	ldr	r0, [pc, #608]	; (80017a4 <_SMLF_ParseCOSEMClass_3+0x2e4>)
 8001542:	f00f facb 	bl	8010adc <puts>
 8001546:	4b98      	ldr	r3, [pc, #608]	; (80017a8 <_SMLF_ParseCOSEMClass_3+0x2e8>)
 8001548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800154a:	e18a      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
	memset(tempD, 0, sizeof(OBISDataChain_t));
 800154c:	2230      	movs	r2, #48	; 0x30
 800154e:	2100      	movs	r1, #0
 8001550:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001552:	f00e ff75 	bl	8010440 <memset>
	tempD->Mapping = inOM;
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	601a      	str	r2, [r3, #0]

	for (uint16_t i = 0; i < inTreeLen; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001560:	e171      	b.n	8001846 <_SMLF_ParseCOSEMClass_3+0x386>
	{
		ASSERT_B((TEST_P(inTree[i], parameter_name, str)) && inTree[i]->parameter_name->len == 2, SMLF_E_SMLGPPRespMalformed);
 8001562:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4413      	add	r3, r2
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d019      	beq.n	80015a4 <_SMLF_ParseCOSEMClass_3+0xe4>
 8001570:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d011      	beq.n	80015a4 <_SMLF_ParseCOSEMClass_3+0xe4>
 8001580:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d008      	beq.n	80015a4 <_SMLF_ParseCOSEMClass_3+0xe4>
 8001592:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4413      	add	r3, r2
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d012      	beq.n	80015ca <_SMLF_ParseCOSEMClass_3+0x10a>
 80015a4:	f240 2212 	movw	r2, #530	; 0x212
 80015a8:	497b      	ldr	r1, [pc, #492]	; (8001798 <_SMLF_ParseCOSEMClass_3+0x2d8>)
 80015aa:	487c      	ldr	r0, [pc, #496]	; (800179c <_SMLF_ParseCOSEMClass_3+0x2dc>)
 80015ac:	f00f fa22 	bl	80109f4 <iprintf>
 80015b0:	487e      	ldr	r0, [pc, #504]	; (80017ac <_SMLF_ParseCOSEMClass_3+0x2ec>)
 80015b2:	f7fe ffe5 	bl	8000580 <LMN_GetErrorMessage>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00f fa1b 	bl	80109f4 <iprintf>
 80015be:	4879      	ldr	r0, [pc, #484]	; (80017a4 <_SMLF_ParseCOSEMClass_3+0x2e4>)
 80015c0:	f00f fa8c 	bl	8010adc <puts>
 80015c4:	4b79      	ldr	r3, [pc, #484]	; (80017ac <_SMLF_ParseCOSEMClass_3+0x2ec>)
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c8:	e14b      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
		uint16_t tempAttrIdx = Misc_SwapByteOrder16(*((uint16_t*)inTree[i]->parameter_name->str));
 80015ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4413      	add	r3, r2
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe fff6 	bl	80005cc <Misc_SwapByteOrder16>
 80015e0:	4603      	mov	r3, r0
 80015e2:	86bb      	strh	r3, [r7, #52]	; 0x34
		
		sml_proc_par_value* tempPPV = inTree[i]->parameter_value;
 80015e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
		ASSERT_B(tempPPV && tempPPV->tag, SMLF_E_SMLGPPRespMalformed);
 80015f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <_SMLF_ParseCOSEMClass_3+0x140>
 80015f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d112      	bne.n	8001626 <_SMLF_ParseCOSEMClass_3+0x166>
 8001600:	f240 2216 	movw	r2, #534	; 0x216
 8001604:	4964      	ldr	r1, [pc, #400]	; (8001798 <_SMLF_ParseCOSEMClass_3+0x2d8>)
 8001606:	4865      	ldr	r0, [pc, #404]	; (800179c <_SMLF_ParseCOSEMClass_3+0x2dc>)
 8001608:	f00f f9f4 	bl	80109f4 <iprintf>
 800160c:	4867      	ldr	r0, [pc, #412]	; (80017ac <_SMLF_ParseCOSEMClass_3+0x2ec>)
 800160e:	f7fe ffb7 	bl	8000580 <LMN_GetErrorMessage>
 8001612:	4603      	mov	r3, r0
 8001614:	4618      	mov	r0, r3
 8001616:	f00f f9ed 	bl	80109f4 <iprintf>
 800161a:	4862      	ldr	r0, [pc, #392]	; (80017a4 <_SMLF_ParseCOSEMClass_3+0x2e4>)
 800161c:	f00f fa5e 	bl	8010adc <puts>
 8001620:	4b62      	ldr	r3, [pc, #392]	; (80017ac <_SMLF_ParseCOSEMClass_3+0x2ec>)
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001624:	e11d      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
		
		switch (tempAttrIdx)
 8001626:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001628:	2b02      	cmp	r3, #2
 800162a:	d002      	beq.n	8001632 <_SMLF_ParseCOSEMClass_3+0x172>
 800162c:	2b03      	cmp	r3, #3
 800162e:	d03a      	beq.n	80016a6 <_SMLF_ParseCOSEMClass_3+0x1e6>
 8001630:	e0ed      	b.n	800180e <_SMLF_ParseCOSEMClass_3+0x34e>
		{
		case 2://data
			{
				ASSERT_B(*tempPPV->tag == SML_PROC_PAR_VALUE_TAG_VALUE, SMLF_E_ValueTypeMismatch);
 8001632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d012      	beq.n	8001662 <_SMLF_ParseCOSEMClass_3+0x1a2>
 800163c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001640:	4955      	ldr	r1, [pc, #340]	; (8001798 <_SMLF_ParseCOSEMClass_3+0x2d8>)
 8001642:	4856      	ldr	r0, [pc, #344]	; (800179c <_SMLF_ParseCOSEMClass_3+0x2dc>)
 8001644:	f00f f9d6 	bl	80109f4 <iprintf>
 8001648:	4859      	ldr	r0, [pc, #356]	; (80017b0 <_SMLF_ParseCOSEMClass_3+0x2f0>)
 800164a:	f7fe ff99 	bl	8000580 <LMN_GetErrorMessage>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f00f f9cf 	bl	80109f4 <iprintf>
 8001656:	4853      	ldr	r0, [pc, #332]	; (80017a4 <_SMLF_ParseCOSEMClass_3+0x2e4>)
 8001658:	f00f fa40 	bl	8010adc <puts>
 800165c:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <_SMLF_ParseCOSEMClass_3+0x2f0>)
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001660:	e0ff      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
				sml_value* tempV = tempPPV->data.value;
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61fb      	str	r3, [r7, #28]

				ASSERT_F(_SMLF_TxferSMLValue2OBISData(inOM, tempV, &tempD->Data.CReg.Value));
 8001668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800166a:	3308      	adds	r3, #8
 800166c:	461a      	mov	r2, r3
 800166e:	69f9      	ldr	r1, [r7, #28]
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fbbf 	bl	8001df4 <_SMLF_TxferSMLValue2OBISData>
 8001676:	61b8      	str	r0, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80df 	beq.w	800183e <_SMLF_ParseCOSEMClass_3+0x37e>
 8001680:	f240 221f 	movw	r2, #543	; 0x21f
 8001684:	4944      	ldr	r1, [pc, #272]	; (8001798 <_SMLF_ParseCOSEMClass_3+0x2d8>)
 8001686:	4845      	ldr	r0, [pc, #276]	; (800179c <_SMLF_ParseCOSEMClass_3+0x2dc>)
 8001688:	f00f f9b4 	bl	80109f4 <iprintf>
 800168c:	69b8      	ldr	r0, [r7, #24]
 800168e:	f7fe ff77 	bl	8000580 <LMN_GetErrorMessage>
 8001692:	4603      	mov	r3, r0
 8001694:	4618      	mov	r0, r3
 8001696:	f00f f9ad 	bl	80109f4 <iprintf>
 800169a:	4842      	ldr	r0, [pc, #264]	; (80017a4 <_SMLF_ParseCOSEMClass_3+0x2e4>)
 800169c:	f00f fa1e 	bl	8010adc <puts>
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a4:	e0dd      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
				
				break;
			}
		case 3://scaler_unit
			{
				ASSERT_B(*tempPPV->tag == SML_PROC_PAR_VALUE_TAG_VALUE, SMLF_E_ValueTypeMismatch);
 80016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d012      	beq.n	80016d6 <_SMLF_ParseCOSEMClass_3+0x216>
 80016b0:	f240 2225 	movw	r2, #549	; 0x225
 80016b4:	4938      	ldr	r1, [pc, #224]	; (8001798 <_SMLF_ParseCOSEMClass_3+0x2d8>)
 80016b6:	4839      	ldr	r0, [pc, #228]	; (800179c <_SMLF_ParseCOSEMClass_3+0x2dc>)
 80016b8:	f00f f99c 	bl	80109f4 <iprintf>
 80016bc:	483c      	ldr	r0, [pc, #240]	; (80017b0 <_SMLF_ParseCOSEMClass_3+0x2f0>)
 80016be:	f7fe ff5f 	bl	8000580 <LMN_GetErrorMessage>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00f f995 	bl	80109f4 <iprintf>
 80016ca:	4836      	ldr	r0, [pc, #216]	; (80017a4 <_SMLF_ParseCOSEMClass_3+0x2e4>)
 80016cc:	f00f fa06 	bl	8010adc <puts>
 80016d0:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <_SMLF_ParseCOSEMClass_3+0x2f0>)
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d4:	e0c5      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
				sml_value* tempV = tempPPV->data.value;
 80016d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
				ASSERT_B(tempV && tempV->type == SML_TYPE_LIST, SMLF_E_ValueTypeMismatch);
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <_SMLF_ParseCOSEMClass_3+0x22a>
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b70      	cmp	r3, #112	; 0x70
 80016e8:	d012      	beq.n	8001710 <_SMLF_ParseCOSEMClass_3+0x250>
 80016ea:	f240 2227 	movw	r2, #551	; 0x227
 80016ee:	492a      	ldr	r1, [pc, #168]	; (8001798 <_SMLF_ParseCOSEMClass_3+0x2d8>)
 80016f0:	482a      	ldr	r0, [pc, #168]	; (800179c <_SMLF_ParseCOSEMClass_3+0x2dc>)
 80016f2:	f00f f97f 	bl	80109f4 <iprintf>
 80016f6:	482e      	ldr	r0, [pc, #184]	; (80017b0 <_SMLF_ParseCOSEMClass_3+0x2f0>)
 80016f8:	f7fe ff42 	bl	8000580 <LMN_GetErrorMessage>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4618      	mov	r0, r3
 8001700:	f00f f978 	bl	80109f4 <iprintf>
 8001704:	4827      	ldr	r0, [pc, #156]	; (80017a4 <_SMLF_ParseCOSEMClass_3+0x2e4>)
 8001706:	f00f f9e9 	bl	8010adc <puts>
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <_SMLF_ParseCOSEMClass_3+0x2f0>)
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800170e:	e0a8      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
				sml_list_type* tempL = tempV->data.smlList;
 8001710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
				ASSERT_B(tempL && tempL->tag && *tempL->tag == SML_LIST_TYPE_COSEM_VALUE, SMLF_E_ValueTypeMismatch);
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <_SMLF_ParseCOSEMClass_3+0x26e>
 800171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <_SMLF_ParseCOSEMClass_3+0x26e>
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d012      	beq.n	8001754 <_SMLF_ParseCOSEMClass_3+0x294>
 800172e:	f240 2229 	movw	r2, #553	; 0x229
 8001732:	4919      	ldr	r1, [pc, #100]	; (8001798 <_SMLF_ParseCOSEMClass_3+0x2d8>)
 8001734:	4819      	ldr	r0, [pc, #100]	; (800179c <_SMLF_ParseCOSEMClass_3+0x2dc>)
 8001736:	f00f f95d 	bl	80109f4 <iprintf>
 800173a:	481d      	ldr	r0, [pc, #116]	; (80017b0 <_SMLF_ParseCOSEMClass_3+0x2f0>)
 800173c:	f7fe ff20 	bl	8000580 <LMN_GetErrorMessage>
 8001740:	4603      	mov	r3, r0
 8001742:	4618      	mov	r0, r3
 8001744:	f00f f956 	bl	80109f4 <iprintf>
 8001748:	4816      	ldr	r0, [pc, #88]	; (80017a4 <_SMLF_ParseCOSEMClass_3+0x2e4>)
 800174a:	f00f f9c7 	bl	8010adc <puts>
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <_SMLF_ParseCOSEMClass_3+0x2f0>)
 8001750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001752:	e086      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
				sml_cosem_value *tempCV = tempL->data.cosem_value;
 8001754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
				ASSERT_B(tempCV && tempCV->tag && *tempCV->tag == SML_COSEM_VALUE_SCALER_UNIT, SMLF_E_ValueTypeMismatch);
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <_SMLF_ParseCOSEMClass_3+0x2b2>
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <_SMLF_ParseCOSEMClass_3+0x2b2>
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d020      	beq.n	80017b4 <_SMLF_ParseCOSEMClass_3+0x2f4>
 8001772:	f240 222b 	movw	r2, #555	; 0x22b
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <_SMLF_ParseCOSEMClass_3+0x2d8>)
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <_SMLF_ParseCOSEMClass_3+0x2dc>)
 800177a:	f00f f93b 	bl	80109f4 <iprintf>
 800177e:	480c      	ldr	r0, [pc, #48]	; (80017b0 <_SMLF_ParseCOSEMClass_3+0x2f0>)
 8001780:	f7fe fefe 	bl	8000580 <LMN_GetErrorMessage>
 8001784:	4603      	mov	r3, r0
 8001786:	4618      	mov	r0, r3
 8001788:	f00f f934 	bl	80109f4 <iprintf>
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <_SMLF_ParseCOSEMClass_3+0x2e4>)
 800178e:	f00f f9a5 	bl	8010adc <puts>
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_SMLF_ParseCOSEMClass_3+0x2f0>)
 8001794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001796:	e064      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
 8001798:	0801253c 	.word	0x0801253c
 800179c:	080118b4 	.word	0x080118b4
 80017a0:	fffff05e 	.word	0xfffff05e
 80017a4:	080118c4 	.word	0x080118c4
 80017a8:	fffff05d 	.word	0xfffff05d
 80017ac:	fffff057 	.word	0xfffff057
 80017b0:	fffff054 	.word	0xfffff054
				sml_cosem_scaler_unit *tempSU = tempCV->data.scaler_unit;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	623b      	str	r3, [r7, #32]
				ASSERT_B(tempSU && tempSU->scaler && tempSU->unit, SMLF_E_ValueTypeMismatch);
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <_SMLF_ParseCOSEMClass_3+0x310>
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <_SMLF_ParseCOSEMClass_3+0x310>
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d112      	bne.n	80017f6 <_SMLF_ParseCOSEMClass_3+0x336>
 80017d0:	f240 222d 	movw	r2, #557	; 0x22d
 80017d4:	4927      	ldr	r1, [pc, #156]	; (8001874 <_SMLF_ParseCOSEMClass_3+0x3b4>)
 80017d6:	4828      	ldr	r0, [pc, #160]	; (8001878 <_SMLF_ParseCOSEMClass_3+0x3b8>)
 80017d8:	f00f f90c 	bl	80109f4 <iprintf>
 80017dc:	4827      	ldr	r0, [pc, #156]	; (800187c <_SMLF_ParseCOSEMClass_3+0x3bc>)
 80017de:	f7fe fecf 	bl	8000580 <LMN_GetErrorMessage>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00f f905 	bl	80109f4 <iprintf>
 80017ea:	4825      	ldr	r0, [pc, #148]	; (8001880 <_SMLF_ParseCOSEMClass_3+0x3c0>)
 80017ec:	f00f f976 	bl	8010adc <puts>
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <_SMLF_ParseCOSEMClass_3+0x3bc>)
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017f4:	e035      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
				
				tempD->Data.CReg.Scaler = *tempSU->scaler;
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f993 2000 	ldrsb.w	r2, [r3]
 80017fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001800:	761a      	strb	r2, [r3, #24]
				tempD->Data.CReg.Unit = *tempSU->unit;
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800180a:	765a      	strb	r2, [r3, #25]
				
				break;
 800180c:	e018      	b.n	8001840 <_SMLF_ParseCOSEMClass_3+0x380>
			}
		default:
			ASSERT_F(SMLF_E_COSEMClassProperties);
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <_SMLF_ParseCOSEMClass_3+0x3c4>)
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d013      	beq.n	8001840 <_SMLF_ParseCOSEMClass_3+0x380>
 8001818:	f240 2235 	movw	r2, #565	; 0x235
 800181c:	4915      	ldr	r1, [pc, #84]	; (8001874 <_SMLF_ParseCOSEMClass_3+0x3b4>)
 800181e:	4816      	ldr	r0, [pc, #88]	; (8001878 <_SMLF_ParseCOSEMClass_3+0x3b8>)
 8001820:	f00f f8e8 	bl	80109f4 <iprintf>
 8001824:	6978      	ldr	r0, [r7, #20]
 8001826:	f7fe feab 	bl	8000580 <LMN_GetErrorMessage>
 800182a:	4603      	mov	r3, r0
 800182c:	4618      	mov	r0, r3
 800182e:	f00f f8e1 	bl	80109f4 <iprintf>
 8001832:	4813      	ldr	r0, [pc, #76]	; (8001880 <_SMLF_ParseCOSEMClass_3+0x3c0>)
 8001834:	f00f f952 	bl	8010adc <puts>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800183c:	e011      	b.n	8001862 <_SMLF_ParseCOSEMClass_3+0x3a2>
				break;
 800183e:	bf00      	nop
	for (uint16_t i = 0; i < inTreeLen; i++)
 8001840:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001842:	3301      	adds	r3, #1
 8001844:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001846:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001848:	897b      	ldrh	r3, [r7, #10]
 800184a:	429a      	cmp	r2, r3
 800184c:	f4ff ae89 	bcc.w	8001562 <_SMLF_ParseCOSEMClass_3+0xa2>
		}	
	}
	
	//insert data @ chain start
	tempD->Next = *outData;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
	*outData = tempD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800185c:	601a      	str	r2, [r3, #0]
	
	return SMLF_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e003      	b.n	800186a <_SMLF_ParseCOSEMClass_3+0x3aa>
	
err:
	OBIS_DataFreeSingle(tempD);
 8001862:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001864:	f7fe ff4a 	bl	80006fc <OBIS_DataFreeSingle>
	return tempRet;
 8001868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800186a:	4618      	mov	r0, r3
 800186c:	3740      	adds	r7, #64	; 0x40
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	0801253c 	.word	0x0801253c
 8001878:	080118b4 	.word	0x080118b4
 800187c:	fffff054 	.word	0xfffff054
 8001880:	080118c4 	.word	0x080118c4
 8001884:	fffff05b 	.word	0xfffff05b

08001888 <_SMLF_ParseCOSEMClass_32770>:

//----------------------------------------------------------------
//parse GPPResp sml message for COSEM advanced ext register class
int32_t _SMLF_ParseCOSEMClass_32770(struct s_tree** inTree, uint16_t inTreeLen, OBISMapping_t* inOM, OBISDataChain_t** outData)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b09c      	sub	sp, #112	; 0x70
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	460b      	mov	r3, r1
 8001896:	817b      	strh	r3, [r7, #10]
	int32_t tempRet = SMLF_E_Unknown;
 8001898:	f46f 637a 	mvn.w	r3, #4000	; 0xfa0
 800189c:	66fb      	str	r3, [r7, #108]	; 0x6c
	OBISDataChain_t* tempD = NULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	66bb      	str	r3, [r7, #104]	; 0x68
	
	ASSERT_B(inTree && inTreeLen > 0 && inOM && outData, SMLF_E_ParamInput);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <_SMLF_ParseCOSEMClass_32770+0x32>
 80018a8:	897b      	ldrh	r3, [r7, #10]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <_SMLF_ParseCOSEMClass_32770+0x32>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d002      	beq.n	80018ba <_SMLF_ParseCOSEMClass_32770+0x32>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d112      	bne.n	80018e0 <_SMLF_ParseCOSEMClass_32770+0x58>
 80018ba:	f240 224b 	movw	r2, #587	; 0x24b
 80018be:	49a1      	ldr	r1, [pc, #644]	; (8001b44 <_SMLF_ParseCOSEMClass_32770+0x2bc>)
 80018c0:	48a1      	ldr	r0, [pc, #644]	; (8001b48 <_SMLF_ParseCOSEMClass_32770+0x2c0>)
 80018c2:	f00f f897 	bl	80109f4 <iprintf>
 80018c6:	48a1      	ldr	r0, [pc, #644]	; (8001b4c <_SMLF_ParseCOSEMClass_32770+0x2c4>)
 80018c8:	f7fe fe5a 	bl	8000580 <LMN_GetErrorMessage>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00f f890 	bl	80109f4 <iprintf>
 80018d4:	489e      	ldr	r0, [pc, #632]	; (8001b50 <_SMLF_ParseCOSEMClass_32770+0x2c8>)
 80018d6:	f00f f901 	bl	8010adc <puts>
 80018da:	4b9c      	ldr	r3, [pc, #624]	; (8001b4c <_SMLF_ParseCOSEMClass_32770+0x2c4>)
 80018dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018de:	e277      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
	
	tempD = malloc(sizeof(OBISDataChain_t));
 80018e0:	2030      	movs	r0, #48	; 0x30
 80018e2:	f007 fbbd 	bl	8009060 <pvPortMalloc>
 80018e6:	66b8      	str	r0, [r7, #104]	; 0x68
	ASSERT_B(tempD, SMLF_E_Malloc);
 80018e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d112      	bne.n	8001914 <_SMLF_ParseCOSEMClass_32770+0x8c>
 80018ee:	f240 224e 	movw	r2, #590	; 0x24e
 80018f2:	4994      	ldr	r1, [pc, #592]	; (8001b44 <_SMLF_ParseCOSEMClass_32770+0x2bc>)
 80018f4:	4894      	ldr	r0, [pc, #592]	; (8001b48 <_SMLF_ParseCOSEMClass_32770+0x2c0>)
 80018f6:	f00f f87d 	bl	80109f4 <iprintf>
 80018fa:	4896      	ldr	r0, [pc, #600]	; (8001b54 <_SMLF_ParseCOSEMClass_32770+0x2cc>)
 80018fc:	f7fe fe40 	bl	8000580 <LMN_GetErrorMessage>
 8001900:	4603      	mov	r3, r0
 8001902:	4618      	mov	r0, r3
 8001904:	f00f f876 	bl	80109f4 <iprintf>
 8001908:	4891      	ldr	r0, [pc, #580]	; (8001b50 <_SMLF_ParseCOSEMClass_32770+0x2c8>)
 800190a:	f00f f8e7 	bl	8010adc <puts>
 800190e:	4b91      	ldr	r3, [pc, #580]	; (8001b54 <_SMLF_ParseCOSEMClass_32770+0x2cc>)
 8001910:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001912:	e25d      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
	memset(tempD, 0, sizeof(OBISDataChain_t));
 8001914:	2230      	movs	r2, #48	; 0x30
 8001916:	2100      	movs	r1, #0
 8001918:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800191a:	f00e fd91 	bl	8010440 <memset>
	tempD->Mapping = inOM;
 800191e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	601a      	str	r2, [r3, #0]

	for (uint16_t i = 0; i < inTreeLen; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800192a:	e242      	b.n	8001db2 <_SMLF_ParseCOSEMClass_32770+0x52a>
	{
		ASSERT_B((TEST_P(inTree[i], parameter_name, str)) && inTree[i]->parameter_name->len == 2, SMLF_E_SMLGPPRespMalformed);
 800192c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01c      	beq.n	8001976 <_SMLF_ParseCOSEMClass_32770+0xee>
 800193c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d013      	beq.n	8001976 <_SMLF_ParseCOSEMClass_32770+0xee>
 800194e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <_SMLF_ParseCOSEMClass_32770+0xee>
 8001962:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d012      	beq.n	800199c <_SMLF_ParseCOSEMClass_32770+0x114>
 8001976:	f44f 7215 	mov.w	r2, #596	; 0x254
 800197a:	4972      	ldr	r1, [pc, #456]	; (8001b44 <_SMLF_ParseCOSEMClass_32770+0x2bc>)
 800197c:	4872      	ldr	r0, [pc, #456]	; (8001b48 <_SMLF_ParseCOSEMClass_32770+0x2c0>)
 800197e:	f00f f839 	bl	80109f4 <iprintf>
 8001982:	4875      	ldr	r0, [pc, #468]	; (8001b58 <_SMLF_ParseCOSEMClass_32770+0x2d0>)
 8001984:	f7fe fdfc 	bl	8000580 <LMN_GetErrorMessage>
 8001988:	4603      	mov	r3, r0
 800198a:	4618      	mov	r0, r3
 800198c:	f00f f832 	bl	80109f4 <iprintf>
 8001990:	486f      	ldr	r0, [pc, #444]	; (8001b50 <_SMLF_ParseCOSEMClass_32770+0x2c8>)
 8001992:	f00f f8a3 	bl	8010adc <puts>
 8001996:	4b70      	ldr	r3, [pc, #448]	; (8001b58 <_SMLF_ParseCOSEMClass_32770+0x2d0>)
 8001998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800199a:	e219      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
		uint16_t tempAttrIdx = Misc_SwapByteOrder16(*((uint16_t*)inTree[i]->parameter_name->str));
 800199c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fe0c 	bl	80005cc <Misc_SwapByteOrder16>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		
		sml_proc_par_value* tempPPV = inTree[i]->parameter_value;
 80019ba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	663b      	str	r3, [r7, #96]	; 0x60
		ASSERT_B(tempPPV && tempPPV->tag, SMLF_E_SMLGPPRespMalformed);
 80019ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <_SMLF_ParseCOSEMClass_32770+0x150>
 80019d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d112      	bne.n	80019fe <_SMLF_ParseCOSEMClass_32770+0x176>
 80019d8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80019dc:	4959      	ldr	r1, [pc, #356]	; (8001b44 <_SMLF_ParseCOSEMClass_32770+0x2bc>)
 80019de:	485a      	ldr	r0, [pc, #360]	; (8001b48 <_SMLF_ParseCOSEMClass_32770+0x2c0>)
 80019e0:	f00f f808 	bl	80109f4 <iprintf>
 80019e4:	485c      	ldr	r0, [pc, #368]	; (8001b58 <_SMLF_ParseCOSEMClass_32770+0x2d0>)
 80019e6:	f7fe fdcb 	bl	8000580 <LMN_GetErrorMessage>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f00f f801 	bl	80109f4 <iprintf>
 80019f2:	4857      	ldr	r0, [pc, #348]	; (8001b50 <_SMLF_ParseCOSEMClass_32770+0x2c8>)
 80019f4:	f00f f872 	bl	8010adc <puts>
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <_SMLF_ParseCOSEMClass_32770+0x2d0>)
 80019fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019fc:	e1e8      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
		
		switch (tempAttrIdx)
 80019fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001a02:	3b02      	subs	r3, #2
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	f200 81b6 	bhi.w	8001d76 <_SMLF_ParseCOSEMClass_32770+0x4ee>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <_SMLF_ParseCOSEMClass_32770+0x188>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a21 	.word	0x08001a21
 8001a14:	08001a95 	.word	0x08001a95
 8001a18:	08001bff 	.word	0x08001bff
 8001a1c:	08001cbb 	.word	0x08001cbb
		{
		case 2://data
			{
				ASSERT_B(*tempPPV->tag == SML_PROC_PAR_VALUE_TAG_VALUE, SMLF_E_ValueTypeMismatch);
 8001a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d012      	beq.n	8001a50 <_SMLF_ParseCOSEMClass_32770+0x1c8>
 8001a2a:	f240 225e 	movw	r2, #606	; 0x25e
 8001a2e:	4945      	ldr	r1, [pc, #276]	; (8001b44 <_SMLF_ParseCOSEMClass_32770+0x2bc>)
 8001a30:	4845      	ldr	r0, [pc, #276]	; (8001b48 <_SMLF_ParseCOSEMClass_32770+0x2c0>)
 8001a32:	f00e ffdf 	bl	80109f4 <iprintf>
 8001a36:	4849      	ldr	r0, [pc, #292]	; (8001b5c <_SMLF_ParseCOSEMClass_32770+0x2d4>)
 8001a38:	f7fe fda2 	bl	8000580 <LMN_GetErrorMessage>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00e ffd8 	bl	80109f4 <iprintf>
 8001a44:	4842      	ldr	r0, [pc, #264]	; (8001b50 <_SMLF_ParseCOSEMClass_32770+0x2c8>)
 8001a46:	f00f f849 	bl	8010adc <puts>
 8001a4a:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <_SMLF_ParseCOSEMClass_32770+0x2d4>)
 8001a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a4e:	e1bf      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				sml_value* tempV = tempPPV->data.value;
 8001a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	63fb      	str	r3, [r7, #60]	; 0x3c

				ASSERT_F(_SMLF_TxferSMLValue2OBISData(inOM, tempV, &tempD->Data.CAdvExtReg.Value));
 8001a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a58:	3308      	adds	r3, #8
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f9c8 	bl	8001df4 <_SMLF_TxferSMLValue2OBISData>
 8001a64:	63b8      	str	r0, [r7, #56]	; 0x38
 8001a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 819c 	beq.w	8001da6 <_SMLF_ParseCOSEMClass_32770+0x51e>
 8001a6e:	f240 2261 	movw	r2, #609	; 0x261
 8001a72:	4934      	ldr	r1, [pc, #208]	; (8001b44 <_SMLF_ParseCOSEMClass_32770+0x2bc>)
 8001a74:	4834      	ldr	r0, [pc, #208]	; (8001b48 <_SMLF_ParseCOSEMClass_32770+0x2c0>)
 8001a76:	f00e ffbd 	bl	80109f4 <iprintf>
 8001a7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a7c:	f7fe fd80 	bl	8000580 <LMN_GetErrorMessage>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f00e ffb6 	bl	80109f4 <iprintf>
 8001a88:	4831      	ldr	r0, [pc, #196]	; (8001b50 <_SMLF_ParseCOSEMClass_32770+0x2c8>)
 8001a8a:	f00f f827 	bl	8010adc <puts>
 8001a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a92:	e19d      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				
				break;
			}
		case 3://scaler_unit
			{
				ASSERT_B(*tempPPV->tag == SML_PROC_PAR_VALUE_TAG_VALUE, SMLF_E_ValueTypeMismatch);
 8001a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d012      	beq.n	8001ac4 <_SMLF_ParseCOSEMClass_32770+0x23c>
 8001a9e:	f240 2267 	movw	r2, #615	; 0x267
 8001aa2:	4928      	ldr	r1, [pc, #160]	; (8001b44 <_SMLF_ParseCOSEMClass_32770+0x2bc>)
 8001aa4:	4828      	ldr	r0, [pc, #160]	; (8001b48 <_SMLF_ParseCOSEMClass_32770+0x2c0>)
 8001aa6:	f00e ffa5 	bl	80109f4 <iprintf>
 8001aaa:	482c      	ldr	r0, [pc, #176]	; (8001b5c <_SMLF_ParseCOSEMClass_32770+0x2d4>)
 8001aac:	f7fe fd68 	bl	8000580 <LMN_GetErrorMessage>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00e ff9e 	bl	80109f4 <iprintf>
 8001ab8:	4825      	ldr	r0, [pc, #148]	; (8001b50 <_SMLF_ParseCOSEMClass_32770+0x2c8>)
 8001aba:	f00f f80f 	bl	8010adc <puts>
 8001abe:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <_SMLF_ParseCOSEMClass_32770+0x2d4>)
 8001ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ac2:	e185      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				sml_value* tempV = tempPPV->data.value;
 8001ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
				ASSERT_B(tempV && tempV->type == SML_TYPE_LIST, SMLF_E_ValueTypeMismatch);
 8001aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <_SMLF_ParseCOSEMClass_32770+0x250>
 8001ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b70      	cmp	r3, #112	; 0x70
 8001ad6:	d012      	beq.n	8001afe <_SMLF_ParseCOSEMClass_32770+0x276>
 8001ad8:	f240 2269 	movw	r2, #617	; 0x269
 8001adc:	4919      	ldr	r1, [pc, #100]	; (8001b44 <_SMLF_ParseCOSEMClass_32770+0x2bc>)
 8001ade:	481a      	ldr	r0, [pc, #104]	; (8001b48 <_SMLF_ParseCOSEMClass_32770+0x2c0>)
 8001ae0:	f00e ff88 	bl	80109f4 <iprintf>
 8001ae4:	481d      	ldr	r0, [pc, #116]	; (8001b5c <_SMLF_ParseCOSEMClass_32770+0x2d4>)
 8001ae6:	f7fe fd4b 	bl	8000580 <LMN_GetErrorMessage>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f00e ff81 	bl	80109f4 <iprintf>
 8001af2:	4817      	ldr	r0, [pc, #92]	; (8001b50 <_SMLF_ParseCOSEMClass_32770+0x2c8>)
 8001af4:	f00e fff2 	bl	8010adc <puts>
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <_SMLF_ParseCOSEMClass_32770+0x2d4>)
 8001afa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001afc:	e168      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				sml_list_type* tempL = tempV->data.smlList;
 8001afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	64bb      	str	r3, [r7, #72]	; 0x48
				ASSERT_B(tempL && tempL->tag && *tempL->tag == SML_LIST_TYPE_COSEM_VALUE, SMLF_E_ValueTypeMismatch);
 8001b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <_SMLF_ParseCOSEMClass_32770+0x294>
 8001b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <_SMLF_ParseCOSEMClass_32770+0x294>
 8001b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d021      	beq.n	8001b60 <_SMLF_ParseCOSEMClass_32770+0x2d8>
 8001b1c:	f240 226b 	movw	r2, #619	; 0x26b
 8001b20:	4908      	ldr	r1, [pc, #32]	; (8001b44 <_SMLF_ParseCOSEMClass_32770+0x2bc>)
 8001b22:	4809      	ldr	r0, [pc, #36]	; (8001b48 <_SMLF_ParseCOSEMClass_32770+0x2c0>)
 8001b24:	f00e ff66 	bl	80109f4 <iprintf>
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <_SMLF_ParseCOSEMClass_32770+0x2d4>)
 8001b2a:	f7fe fd29 	bl	8000580 <LMN_GetErrorMessage>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f00e ff5f 	bl	80109f4 <iprintf>
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <_SMLF_ParseCOSEMClass_32770+0x2c8>)
 8001b38:	f00e ffd0 	bl	8010adc <puts>
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <_SMLF_ParseCOSEMClass_32770+0x2d4>)
 8001b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b40:	e146      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
 8001b42:	bf00      	nop
 8001b44:	08012554 	.word	0x08012554
 8001b48:	080118b4 	.word	0x080118b4
 8001b4c:	fffff05e 	.word	0xfffff05e
 8001b50:	080118c4 	.word	0x080118c4
 8001b54:	fffff05d 	.word	0xfffff05d
 8001b58:	fffff057 	.word	0xfffff057
 8001b5c:	fffff054 	.word	0xfffff054
				sml_cosem_value *tempCV = tempL->data.cosem_value;
 8001b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	647b      	str	r3, [r7, #68]	; 0x44
				ASSERT_B(tempCV && tempCV->tag && *tempCV->tag == SML_COSEM_VALUE_SCALER_UNIT, SMLF_E_ValueTypeMismatch);
 8001b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <_SMLF_ParseCOSEMClass_32770+0x2f6>
 8001b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <_SMLF_ParseCOSEMClass_32770+0x2f6>
 8001b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d012      	beq.n	8001ba4 <_SMLF_ParseCOSEMClass_32770+0x31c>
 8001b7e:	f240 226d 	movw	r2, #621	; 0x26d
 8001b82:	4997      	ldr	r1, [pc, #604]	; (8001de0 <_SMLF_ParseCOSEMClass_32770+0x558>)
 8001b84:	4897      	ldr	r0, [pc, #604]	; (8001de4 <_SMLF_ParseCOSEMClass_32770+0x55c>)
 8001b86:	f00e ff35 	bl	80109f4 <iprintf>
 8001b8a:	4897      	ldr	r0, [pc, #604]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001b8c:	f7fe fcf8 	bl	8000580 <LMN_GetErrorMessage>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f00e ff2e 	bl	80109f4 <iprintf>
 8001b98:	4894      	ldr	r0, [pc, #592]	; (8001dec <_SMLF_ParseCOSEMClass_32770+0x564>)
 8001b9a:	f00e ff9f 	bl	8010adc <puts>
 8001b9e:	4b92      	ldr	r3, [pc, #584]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ba2:	e115      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				sml_cosem_scaler_unit *tempSU = tempCV->data.scaler_unit;
 8001ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	643b      	str	r3, [r7, #64]	; 0x40
				ASSERT_B(tempSU && tempSU->scaler && tempSU->unit, SMLF_E_ValueTypeMismatch);
 8001baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <_SMLF_ParseCOSEMClass_32770+0x338>
 8001bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <_SMLF_ParseCOSEMClass_32770+0x338>
 8001bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d112      	bne.n	8001be6 <_SMLF_ParseCOSEMClass_32770+0x35e>
 8001bc0:	f240 226f 	movw	r2, #623	; 0x26f
 8001bc4:	4986      	ldr	r1, [pc, #536]	; (8001de0 <_SMLF_ParseCOSEMClass_32770+0x558>)
 8001bc6:	4887      	ldr	r0, [pc, #540]	; (8001de4 <_SMLF_ParseCOSEMClass_32770+0x55c>)
 8001bc8:	f00e ff14 	bl	80109f4 <iprintf>
 8001bcc:	4886      	ldr	r0, [pc, #536]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001bce:	f7fe fcd7 	bl	8000580 <LMN_GetErrorMessage>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f00e ff0d 	bl	80109f4 <iprintf>
 8001bda:	4884      	ldr	r0, [pc, #528]	; (8001dec <_SMLF_ParseCOSEMClass_32770+0x564>)
 8001bdc:	f00e ff7e 	bl	8010adc <puts>
 8001be0:	4b81      	ldr	r3, [pc, #516]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001be4:	e0f4      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				
				tempD->Data.CAdvExtReg.Scaler = *tempSU->scaler;
 8001be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f993 2000 	ldrsb.w	r2, [r3]
 8001bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf0:	761a      	strb	r2, [r3, #24]
				tempD->Data.CAdvExtReg.Unit = *tempSU->unit;
 8001bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bfa:	765a      	strb	r2, [r3, #25]
				
				break;
 8001bfc:	e0d4      	b.n	8001da8 <_SMLF_ParseCOSEMClass_32770+0x520>
			}
		case 4://capture time
			{
				ASSERT_B(*tempPPV->tag == SML_PROC_PAR_VALUE_TAG_VALUE, SMLF_E_ValueTypeMismatch);
 8001bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d012      	beq.n	8001c2e <_SMLF_ParseCOSEMClass_32770+0x3a6>
 8001c08:	f44f 721e 	mov.w	r2, #632	; 0x278
 8001c0c:	4974      	ldr	r1, [pc, #464]	; (8001de0 <_SMLF_ParseCOSEMClass_32770+0x558>)
 8001c0e:	4875      	ldr	r0, [pc, #468]	; (8001de4 <_SMLF_ParseCOSEMClass_32770+0x55c>)
 8001c10:	f00e fef0 	bl	80109f4 <iprintf>
 8001c14:	4874      	ldr	r0, [pc, #464]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001c16:	f7fe fcb3 	bl	8000580 <LMN_GetErrorMessage>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f00e fee9 	bl	80109f4 <iprintf>
 8001c22:	4872      	ldr	r0, [pc, #456]	; (8001dec <_SMLF_ParseCOSEMClass_32770+0x564>)
 8001c24:	f00e ff5a 	bl	8010adc <puts>
 8001c28:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c2c:	e0d0      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				sml_value* tempV = tempPPV->data.value;
 8001c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	657b      	str	r3, [r7, #84]	; 0x54
				ASSERT_B((tempV->type & 0xfffffff0) == SML_TYPE_UNSIGNED, SMLF_E_ValueTypeMismatch);
 8001c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	f023 030f 	bic.w	r3, r3, #15
 8001c3c:	2b60      	cmp	r3, #96	; 0x60
 8001c3e:	d012      	beq.n	8001c66 <_SMLF_ParseCOSEMClass_32770+0x3de>
 8001c40:	f240 227a 	movw	r2, #634	; 0x27a
 8001c44:	4966      	ldr	r1, [pc, #408]	; (8001de0 <_SMLF_ParseCOSEMClass_32770+0x558>)
 8001c46:	4867      	ldr	r0, [pc, #412]	; (8001de4 <_SMLF_ParseCOSEMClass_32770+0x55c>)
 8001c48:	f00e fed4 	bl	80109f4 <iprintf>
 8001c4c:	4866      	ldr	r0, [pc, #408]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001c4e:	f7fe fc97 	bl	8000580 <LMN_GetErrorMessage>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00e fecd 	bl	80109f4 <iprintf>
 8001c5a:	4864      	ldr	r0, [pc, #400]	; (8001dec <_SMLF_ParseCOSEMClass_32770+0x564>)
 8001c5c:	f00e ff3e 	bl	8010adc <puts>
 8001c60:	4b61      	ldr	r3, [pc, #388]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c64:	e0b4      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				
				uCOSEMValue_t tempCV = { 0 };
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
				ASSERT_F(_SMLF_TxferSMLValue2OBISData(NULL, tempV, &tempCV));
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	461a      	mov	r2, r3
 8001c7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f000 f8b9 	bl	8001df4 <_SMLF_TxferSMLValue2OBISData>
 8001c82:	6538      	str	r0, [r7, #80]	; 0x50
 8001c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d013      	beq.n	8001cb2 <_SMLF_ParseCOSEMClass_32770+0x42a>
 8001c8a:	f240 227d 	movw	r2, #637	; 0x27d
 8001c8e:	4954      	ldr	r1, [pc, #336]	; (8001de0 <_SMLF_ParseCOSEMClass_32770+0x558>)
 8001c90:	4854      	ldr	r0, [pc, #336]	; (8001de4 <_SMLF_ParseCOSEMClass_32770+0x55c>)
 8001c92:	f00e feaf 	bl	80109f4 <iprintf>
 8001c96:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c98:	f7fe fc72 	bl	8000580 <LMN_GetErrorMessage>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f00e fea8 	bl	80109f4 <iprintf>
 8001ca4:	4851      	ldr	r0, [pc, #324]	; (8001dec <_SMLF_ParseCOSEMClass_32770+0x564>)
 8001ca6:	f00e ff19 	bl	8010adc <puts>
 8001caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001cae:	bf00      	nop
 8001cb0:	e08e      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				
				tempD->Data.CAdvExtReg.CaptureTime = tempCV.UInt32;
 8001cb2:	6a3a      	ldr	r2, [r7, #32]
 8001cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cb6:	61da      	str	r2, [r3, #28]
 8001cb8:	e076      	b.n	8001da8 <_SMLF_ParseCOSEMClass_32770+0x520>
				
				break;
			}
		case 5://status
			{
				ASSERT_B(*tempPPV->tag == SML_PROC_PAR_VALUE_TAG_VALUE, SMLF_E_ValueTypeMismatch);
 8001cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d012      	beq.n	8001cea <_SMLF_ParseCOSEMClass_32770+0x462>
 8001cc4:	f240 2285 	movw	r2, #645	; 0x285
 8001cc8:	4945      	ldr	r1, [pc, #276]	; (8001de0 <_SMLF_ParseCOSEMClass_32770+0x558>)
 8001cca:	4846      	ldr	r0, [pc, #280]	; (8001de4 <_SMLF_ParseCOSEMClass_32770+0x55c>)
 8001ccc:	f00e fe92 	bl	80109f4 <iprintf>
 8001cd0:	4845      	ldr	r0, [pc, #276]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001cd2:	f7fe fc55 	bl	8000580 <LMN_GetErrorMessage>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f00e fe8b 	bl	80109f4 <iprintf>
 8001cde:	4843      	ldr	r0, [pc, #268]	; (8001dec <_SMLF_ParseCOSEMClass_32770+0x564>)
 8001ce0:	f00e fefc 	bl	8010adc <puts>
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ce8:	e072      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				sml_value* tempV = tempPPV->data.value;
 8001cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	65fb      	str	r3, [r7, #92]	; 0x5c
				ASSERT_B((tempV->type & 0xfffffff0) == SML_TYPE_UNSIGNED, SMLF_E_ValueTypeMismatch);
 8001cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	f023 030f 	bic.w	r3, r3, #15
 8001cf8:	2b60      	cmp	r3, #96	; 0x60
 8001cfa:	d012      	beq.n	8001d22 <_SMLF_ParseCOSEMClass_32770+0x49a>
 8001cfc:	f240 2287 	movw	r2, #647	; 0x287
 8001d00:	4937      	ldr	r1, [pc, #220]	; (8001de0 <_SMLF_ParseCOSEMClass_32770+0x558>)
 8001d02:	4838      	ldr	r0, [pc, #224]	; (8001de4 <_SMLF_ParseCOSEMClass_32770+0x55c>)
 8001d04:	f00e fe76 	bl	80109f4 <iprintf>
 8001d08:	4837      	ldr	r0, [pc, #220]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001d0a:	f7fe fc39 	bl	8000580 <LMN_GetErrorMessage>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00e fe6f 	bl	80109f4 <iprintf>
 8001d16:	4835      	ldr	r0, [pc, #212]	; (8001dec <_SMLF_ParseCOSEMClass_32770+0x564>)
 8001d18:	f00e fee0 	bl	8010adc <puts>
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <_SMLF_ParseCOSEMClass_32770+0x560>)
 8001d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d20:	e056      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				
				uCOSEMValue_t tempCV = { 0 };
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
				ASSERT_F(_SMLF_TxferSMLValue2OBISData(NULL, tempV, &tempCV));
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	461a      	mov	r2, r3
 8001d36:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f000 f85b 	bl	8001df4 <_SMLF_TxferSMLValue2OBISData>
 8001d3e:	65b8      	str	r0, [r7, #88]	; 0x58
 8001d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d013      	beq.n	8001d6e <_SMLF_ParseCOSEMClass_32770+0x4e6>
 8001d46:	f240 228a 	movw	r2, #650	; 0x28a
 8001d4a:	4925      	ldr	r1, [pc, #148]	; (8001de0 <_SMLF_ParseCOSEMClass_32770+0x558>)
 8001d4c:	4825      	ldr	r0, [pc, #148]	; (8001de4 <_SMLF_ParseCOSEMClass_32770+0x55c>)
 8001d4e:	f00e fe51 	bl	80109f4 <iprintf>
 8001d52:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001d54:	f7fe fc14 	bl	8000580 <LMN_GetErrorMessage>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00e fe4a 	bl	80109f4 <iprintf>
 8001d60:	4822      	ldr	r0, [pc, #136]	; (8001dec <_SMLF_ParseCOSEMClass_32770+0x564>)
 8001d62:	f00e febb 	bl	8010adc <puts>
 8001d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d6a:	bf00      	nop
 8001d6c:	e030      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				
				tempD->Data.CAdvExtReg.Status = tempCV.UInt32;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d72:	621a      	str	r2, [r3, #32]
 8001d74:	e018      	b.n	8001da8 <_SMLF_ParseCOSEMClass_32770+0x520>
				
				break;
			}
		default:
			ASSERT_F(SMLF_E_COSEMClassProperties);
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <_SMLF_ParseCOSEMClass_32770+0x568>)
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <_SMLF_ParseCOSEMClass_32770+0x520>
 8001d80:	f240 2291 	movw	r2, #657	; 0x291
 8001d84:	4916      	ldr	r1, [pc, #88]	; (8001de0 <_SMLF_ParseCOSEMClass_32770+0x558>)
 8001d86:	4817      	ldr	r0, [pc, #92]	; (8001de4 <_SMLF_ParseCOSEMClass_32770+0x55c>)
 8001d88:	f00e fe34 	bl	80109f4 <iprintf>
 8001d8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d8e:	f7fe fbf7 	bl	8000580 <LMN_GetErrorMessage>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00e fe2d 	bl	80109f4 <iprintf>
 8001d9a:	4814      	ldr	r0, [pc, #80]	; (8001dec <_SMLF_ParseCOSEMClass_32770+0x564>)
 8001d9c:	f00e fe9e 	bl	8010adc <puts>
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001da4:	e014      	b.n	8001dd0 <_SMLF_ParseCOSEMClass_32770+0x548>
				break;
 8001da6:	bf00      	nop
	for (uint16_t i = 0; i < inTreeLen; i++)
 8001da8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001dac:	3301      	adds	r3, #1
 8001dae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001db2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001db6:	897b      	ldrh	r3, [r7, #10]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f4ff adb7 	bcc.w	800192c <_SMLF_ParseCOSEMClass_32770+0xa4>
		}	
	}
	
	//insert data @ chain start
	tempD->Next = *outData;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
	*outData = tempD;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001dca:	601a      	str	r2, [r3, #0]
	
	return SMLF_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e003      	b.n	8001dd8 <_SMLF_ParseCOSEMClass_32770+0x550>
	
err:
	OBIS_DataFreeSingle(tempD);
 8001dd0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001dd2:	f7fe fc93 	bl	80006fc <OBIS_DataFreeSingle>
	return tempRet;
 8001dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3770      	adds	r7, #112	; 0x70
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	08012554 	.word	0x08012554
 8001de4:	080118b4 	.word	0x080118b4
 8001de8:	fffff054 	.word	0xfffff054
 8001dec:	080118c4 	.word	0x080118c4
 8001df0:	fffff05b 	.word	0xfffff05b

08001df4 <_SMLF_TxferSMLValue2OBISData>:

//----------------------------------------------------------------
//txfer data value from sml_value to COSEMValue
//mapping optional to test for expectet type
int32_t _SMLF_TxferSMLValue2OBISData(OBISMapping_t* inOM, sml_value* inSMLValue, uCOSEMValue_t* inCValue)
{
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
	int32_t tempRet = SMLF_E_Unknown;
 8001e00:	f46f 627a 	mvn.w	r2, #4000	; 0xfa0
 8001e04:	61fa      	str	r2, [r7, #28]
	
	ASSERT_B(inSMLValue && inCValue, SMLF_E_ParamInput);
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	d002      	beq.n	8001e12 <_SMLF_TxferSMLValue2OBISData+0x1e>
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d112      	bne.n	8001e38 <_SMLF_TxferSMLValue2OBISData+0x44>
 8001e12:	f240 22a7 	movw	r2, #679	; 0x2a7
 8001e16:	49a8      	ldr	r1, [pc, #672]	; (80020b8 <_SMLF_TxferSMLValue2OBISData+0x2c4>)
 8001e18:	48a8      	ldr	r0, [pc, #672]	; (80020bc <_SMLF_TxferSMLValue2OBISData+0x2c8>)
 8001e1a:	f00e fdeb 	bl	80109f4 <iprintf>
 8001e1e:	48a8      	ldr	r0, [pc, #672]	; (80020c0 <_SMLF_TxferSMLValue2OBISData+0x2cc>)
 8001e20:	f7fe fbae 	bl	8000580 <LMN_GetErrorMessage>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f00e fde4 	bl	80109f4 <iprintf>
 8001e2c:	48a5      	ldr	r0, [pc, #660]	; (80020c4 <_SMLF_TxferSMLValue2OBISData+0x2d0>)
 8001e2e:	f00e fe55 	bl	8010adc <puts>
 8001e32:	4ba3      	ldr	r3, [pc, #652]	; (80020c0 <_SMLF_TxferSMLValue2OBISData+0x2cc>)
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e17e      	b.n	8002136 <_SMLF_TxferSMLValue2OBISData+0x342>
	
	if (inSMLValue->type == PT_Bool)
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	7812      	ldrb	r2, [r2, #0]
 8001e3c:	2a40      	cmp	r2, #64	; 0x40
 8001e3e:	d125      	bne.n	8001e8c <_SMLF_TxferSMLValue2OBISData+0x98>
	{
		if (inOM) ASSERT_B(inOM->PType == PT_Bool, SMLF_E_ValueTypeMismatch);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d017      	beq.n	8001e76 <_SMLF_TxferSMLValue2OBISData+0x82>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d012      	beq.n	8001e76 <_SMLF_TxferSMLValue2OBISData+0x82>
 8001e50:	f240 22ab 	movw	r2, #683	; 0x2ab
 8001e54:	4998      	ldr	r1, [pc, #608]	; (80020b8 <_SMLF_TxferSMLValue2OBISData+0x2c4>)
 8001e56:	4899      	ldr	r0, [pc, #612]	; (80020bc <_SMLF_TxferSMLValue2OBISData+0x2c8>)
 8001e58:	f00e fdcc 	bl	80109f4 <iprintf>
 8001e5c:	489a      	ldr	r0, [pc, #616]	; (80020c8 <_SMLF_TxferSMLValue2OBISData+0x2d4>)
 8001e5e:	f7fe fb8f 	bl	8000580 <LMN_GetErrorMessage>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00e fdc5 	bl	80109f4 <iprintf>
 8001e6a:	4896      	ldr	r0, [pc, #600]	; (80020c4 <_SMLF_TxferSMLValue2OBISData+0x2d0>)
 8001e6c:	f00e fe36 	bl	8010adc <puts>
 8001e70:	4b95      	ldr	r3, [pc, #596]	; (80020c8 <_SMLF_TxferSMLValue2OBISData+0x2d4>)
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	e15f      	b.n	8002136 <_SMLF_TxferSMLValue2OBISData+0x342>
		
		inCValue->Bool = *inSMLValue->data.boolean == 0x01;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	e152      	b.n	8002132 <_SMLF_TxferSMLValue2OBISData+0x33e>
	}
	else if (inSMLValue->type == PT_String)
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	7812      	ldrb	r2, [r2, #0]
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	f040 808f 	bne.w	8001fb4 <_SMLF_TxferSMLValue2OBISData+0x1c0>
	{
		if (inOM) ASSERT_B(inOM->PType == PT_String, SMLF_E_ValueTypeMismatch);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d017      	beq.n	8001ecc <_SMLF_TxferSMLValue2OBISData+0xd8>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d012      	beq.n	8001ecc <_SMLF_TxferSMLValue2OBISData+0xd8>
 8001ea6:	f240 22b1 	movw	r2, #689	; 0x2b1
 8001eaa:	4983      	ldr	r1, [pc, #524]	; (80020b8 <_SMLF_TxferSMLValue2OBISData+0x2c4>)
 8001eac:	4883      	ldr	r0, [pc, #524]	; (80020bc <_SMLF_TxferSMLValue2OBISData+0x2c8>)
 8001eae:	f00e fda1 	bl	80109f4 <iprintf>
 8001eb2:	4885      	ldr	r0, [pc, #532]	; (80020c8 <_SMLF_TxferSMLValue2OBISData+0x2d4>)
 8001eb4:	f7fe fb64 	bl	8000580 <LMN_GetErrorMessage>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f00e fd9a 	bl	80109f4 <iprintf>
 8001ec0:	4880      	ldr	r0, [pc, #512]	; (80020c4 <_SMLF_TxferSMLValue2OBISData+0x2d0>)
 8001ec2:	f00e fe0b 	bl	8010adc <puts>
 8001ec6:	4b80      	ldr	r3, [pc, #512]	; (80020c8 <_SMLF_TxferSMLValue2OBISData+0x2d4>)
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e134      	b.n	8002136 <_SMLF_TxferSMLValue2OBISData+0x342>
		
		ASSERT_B(inSMLValue->data.bytes && inSMLValue->data.bytes->str && inSMLValue->data.bytes->len > 0, SMLF_E_SMLValueMalformed);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <_SMLF_TxferSMLValue2OBISData+0xf4>
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <_SMLF_TxferSMLValue2OBISData+0xf4>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	dc12      	bgt.n	8001f0e <_SMLF_TxferSMLValue2OBISData+0x11a>
 8001ee8:	f240 22b3 	movw	r2, #691	; 0x2b3
 8001eec:	4972      	ldr	r1, [pc, #456]	; (80020b8 <_SMLF_TxferSMLValue2OBISData+0x2c4>)
 8001eee:	4873      	ldr	r0, [pc, #460]	; (80020bc <_SMLF_TxferSMLValue2OBISData+0x2c8>)
 8001ef0:	f00e fd80 	bl	80109f4 <iprintf>
 8001ef4:	4875      	ldr	r0, [pc, #468]	; (80020cc <_SMLF_TxferSMLValue2OBISData+0x2d8>)
 8001ef6:	f7fe fb43 	bl	8000580 <LMN_GetErrorMessage>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00e fd79 	bl	80109f4 <iprintf>
 8001f02:	4870      	ldr	r0, [pc, #448]	; (80020c4 <_SMLF_TxferSMLValue2OBISData+0x2d0>)
 8001f04:	f00e fdea 	bl	8010adc <puts>
 8001f08:	4b70      	ldr	r3, [pc, #448]	; (80020cc <_SMLF_TxferSMLValue2OBISData+0x2d8>)
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	e113      	b.n	8002136 <_SMLF_TxferSMLValue2OBISData+0x342>
		
		//constrain len
		uint16_t tempLenM = inSMLValue->data.bytes->len;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	837b      	strh	r3, [r7, #26]
		if (inOM) tempLenM = tempLenM < inOM->LenMin ? inOM->LenMin : tempLenM > inOM->LenMax ? inOM->LenMax : tempLenM; //constrain lenght
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00f      	beq.n	8001f3c <_SMLF_TxferSMLValue2OBISData+0x148>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	899b      	ldrh	r3, [r3, #12]
 8001f20:	8b7a      	ldrh	r2, [r7, #26]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d202      	bcs.n	8001f2c <_SMLF_TxferSMLValue2OBISData+0x138>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	899b      	ldrh	r3, [r3, #12]
 8001f2a:	e006      	b.n	8001f3a <_SMLF_TxferSMLValue2OBISData+0x146>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	89db      	ldrh	r3, [r3, #14]
 8001f30:	8b7a      	ldrh	r2, [r7, #26]
 8001f32:	4293      	cmp	r3, r2
 8001f34:	bf28      	it	cs
 8001f36:	4613      	movcs	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	837b      	strh	r3, [r7, #26]
		uint16_t tempLenC = inSMLValue->data.bytes->len;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	82bb      	strh	r3, [r7, #20]
		tempLenC = tempLenC < tempLenM ? tempLenC : tempLenM;
 8001f44:	8b7a      	ldrh	r2, [r7, #26]
 8001f46:	8abb      	ldrh	r3, [r7, #20]
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	bf28      	it	cs
 8001f4c:	4613      	movcs	r3, r2
 8001f4e:	82bb      	strh	r3, [r7, #20]
		
		inCValue->Bytes.Array = malloc(tempLenM);
 8001f50:	8b7b      	ldrh	r3, [r7, #26]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f007 f884 	bl	8009060 <pvPortMalloc>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
		ASSERT_B(inCValue->Bytes.Array, SMLF_E_Malloc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d112      	bne.n	8001f8c <_SMLF_TxferSMLValue2OBISData+0x198>
 8001f66:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001f6a:	4953      	ldr	r1, [pc, #332]	; (80020b8 <_SMLF_TxferSMLValue2OBISData+0x2c4>)
 8001f6c:	4853      	ldr	r0, [pc, #332]	; (80020bc <_SMLF_TxferSMLValue2OBISData+0x2c8>)
 8001f6e:	f00e fd41 	bl	80109f4 <iprintf>
 8001f72:	4857      	ldr	r0, [pc, #348]	; (80020d0 <_SMLF_TxferSMLValue2OBISData+0x2dc>)
 8001f74:	f7fe fb04 	bl	8000580 <LMN_GetErrorMessage>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f00e fd3a 	bl	80109f4 <iprintf>
 8001f80:	4850      	ldr	r0, [pc, #320]	; (80020c4 <_SMLF_TxferSMLValue2OBISData+0x2d0>)
 8001f82:	f00e fdab 	bl	8010adc <puts>
 8001f86:	4b52      	ldr	r3, [pc, #328]	; (80020d0 <_SMLF_TxferSMLValue2OBISData+0x2dc>)
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e0d4      	b.n	8002136 <_SMLF_TxferSMLValue2OBISData+0x342>
		memset(inCValue->Bytes.Array, 0, tempLenM);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	8b7a      	ldrh	r2, [r7, #26]
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00e fa53 	bl	8010440 <memset>
		memcpy(inCValue->Bytes.Array, inSMLValue->data.bytes->str, tempLenC);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6898      	ldr	r0, [r3, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	8aba      	ldrh	r2, [r7, #20]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f00e fa3f 	bl	801042a <memcpy>
		inCValue->Bytes.Len = tempLenM;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	8b7a      	ldrh	r2, [r7, #26]
 8001fb0:	819a      	strh	r2, [r3, #12]
 8001fb2:	e0be      	b.n	8002132 <_SMLF_TxferSMLValue2OBISData+0x33e>
	}
	else if ((inSMLValue->type & 0xfffffff0) == SML_TYPE_UNSIGNED)//uint
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	f022 020f 	bic.w	r2, r2, #15
 8001fbc:	2a60      	cmp	r2, #96	; 0x60
 8001fbe:	d140      	bne.n	8002042 <_SMLF_TxferSMLValue2OBISData+0x24e>
	{
		if (inOM) ASSERT_B((inOM->PType & 0xfffffff0) == SML_TYPE_UNSIGNED, SMLF_E_ValueTypeMismatch); 	//lenght test not required hmm???
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d019      	beq.n	8001ffa <_SMLF_TxferSMLValue2OBISData+0x206>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001fcc:	f023 030f 	bic.w	r3, r3, #15
 8001fd0:	2b60      	cmp	r3, #96	; 0x60
 8001fd2:	d012      	beq.n	8001ffa <_SMLF_TxferSMLValue2OBISData+0x206>
 8001fd4:	f240 22c3 	movw	r2, #707	; 0x2c3
 8001fd8:	4937      	ldr	r1, [pc, #220]	; (80020b8 <_SMLF_TxferSMLValue2OBISData+0x2c4>)
 8001fda:	4838      	ldr	r0, [pc, #224]	; (80020bc <_SMLF_TxferSMLValue2OBISData+0x2c8>)
 8001fdc:	f00e fd0a 	bl	80109f4 <iprintf>
 8001fe0:	4839      	ldr	r0, [pc, #228]	; (80020c8 <_SMLF_TxferSMLValue2OBISData+0x2d4>)
 8001fe2:	f7fe facd 	bl	8000580 <LMN_GetErrorMessage>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f00e fd03 	bl	80109f4 <iprintf>
 8001fee:	4835      	ldr	r0, [pc, #212]	; (80020c4 <_SMLF_TxferSMLValue2OBISData+0x2d0>)
 8001ff0:	f00e fd74 	bl	8010adc <puts>
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <_SMLF_TxferSMLValue2OBISData+0x2d4>)
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	e09d      	b.n	8002136 <_SMLF_TxferSMLValue2OBISData+0x342>
		
		ASSERT_B(inSMLValue->data.uint64, SMLF_E_SMLValueMalformed);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d112      	bne.n	8002028 <_SMLF_TxferSMLValue2OBISData+0x234>
 8002002:	f240 22c5 	movw	r2, #709	; 0x2c5
 8002006:	492c      	ldr	r1, [pc, #176]	; (80020b8 <_SMLF_TxferSMLValue2OBISData+0x2c4>)
 8002008:	482c      	ldr	r0, [pc, #176]	; (80020bc <_SMLF_TxferSMLValue2OBISData+0x2c8>)
 800200a:	f00e fcf3 	bl	80109f4 <iprintf>
 800200e:	482f      	ldr	r0, [pc, #188]	; (80020cc <_SMLF_TxferSMLValue2OBISData+0x2d8>)
 8002010:	f7fe fab6 	bl	8000580 <LMN_GetErrorMessage>
 8002014:	4603      	mov	r3, r0
 8002016:	4618      	mov	r0, r3
 8002018:	f00e fcec 	bl	80109f4 <iprintf>
 800201c:	4829      	ldr	r0, [pc, #164]	; (80020c4 <_SMLF_TxferSMLValue2OBISData+0x2d0>)
 800201e:	f00e fd5d 	bl	8010adc <puts>
 8002022:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <_SMLF_TxferSMLValue2OBISData+0x2d8>)
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e086      	b.n	8002136 <_SMLF_TxferSMLValue2OBISData+0x342>
		
		uint8_t tempLen = inSMLValue->type & 0x0f;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	75fb      	strb	r3, [r7, #23]
		
		memcpy(&inCValue->UInt64, inSMLValue->data.uint64, tempLen);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	7dfa      	ldrb	r2, [r7, #23]
 800203a:	4619      	mov	r1, r3
 800203c:	f00e f9f5 	bl	801042a <memcpy>
 8002040:	e077      	b.n	8002132 <_SMLF_TxferSMLValue2OBISData+0x33e>
	}
	else if((inSMLValue->type & 0xfffffff0) == SML_TYPE_INTEGER)//int
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	f022 020f 	bic.w	r2, r2, #15
 800204a:	2a50      	cmp	r2, #80	; 0x50
 800204c:	d171      	bne.n	8002132 <_SMLF_TxferSMLValue2OBISData+0x33e>
	{
		if (inOM) ASSERT_B((inOM->PType & 0xfffffff0) == SML_TYPE_INTEGER, SMLF_E_ValueTypeMismatch);   //lenght test not required hmm???
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	2a00      	cmp	r2, #0
 8002052:	d019      	beq.n	8002088 <_SMLF_TxferSMLValue2OBISData+0x294>
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800205a:	f022 020f 	bic.w	r2, r2, #15
 800205e:	2a50      	cmp	r2, #80	; 0x50
 8002060:	d012      	beq.n	8002088 <_SMLF_TxferSMLValue2OBISData+0x294>
 8002062:	f240 22cd 	movw	r2, #717	; 0x2cd
 8002066:	4914      	ldr	r1, [pc, #80]	; (80020b8 <_SMLF_TxferSMLValue2OBISData+0x2c4>)
 8002068:	4814      	ldr	r0, [pc, #80]	; (80020bc <_SMLF_TxferSMLValue2OBISData+0x2c8>)
 800206a:	f00e fcc3 	bl	80109f4 <iprintf>
 800206e:	4816      	ldr	r0, [pc, #88]	; (80020c8 <_SMLF_TxferSMLValue2OBISData+0x2d4>)
 8002070:	f7fe fa86 	bl	8000580 <LMN_GetErrorMessage>
 8002074:	4603      	mov	r3, r0
 8002076:	4618      	mov	r0, r3
 8002078:	f00e fcbc 	bl	80109f4 <iprintf>
 800207c:	4811      	ldr	r0, [pc, #68]	; (80020c4 <_SMLF_TxferSMLValue2OBISData+0x2d0>)
 800207e:	f00e fd2d 	bl	8010adc <puts>
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <_SMLF_TxferSMLValue2OBISData+0x2d4>)
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e056      	b.n	8002136 <_SMLF_TxferSMLValue2OBISData+0x342>
		
		ASSERT_B(inSMLValue->data.int64, SMLF_E_SMLValueMalformed);
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	6852      	ldr	r2, [r2, #4]
 800208c:	2a00      	cmp	r2, #0
 800208e:	d121      	bne.n	80020d4 <_SMLF_TxferSMLValue2OBISData+0x2e0>
 8002090:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002094:	4908      	ldr	r1, [pc, #32]	; (80020b8 <_SMLF_TxferSMLValue2OBISData+0x2c4>)
 8002096:	4809      	ldr	r0, [pc, #36]	; (80020bc <_SMLF_TxferSMLValue2OBISData+0x2c8>)
 8002098:	f00e fcac 	bl	80109f4 <iprintf>
 800209c:	480b      	ldr	r0, [pc, #44]	; (80020cc <_SMLF_TxferSMLValue2OBISData+0x2d8>)
 800209e:	f7fe fa6f 	bl	8000580 <LMN_GetErrorMessage>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f00e fca5 	bl	80109f4 <iprintf>
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <_SMLF_TxferSMLValue2OBISData+0x2d0>)
 80020ac:	f00e fd16 	bl	8010adc <puts>
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <_SMLF_TxferSMLValue2OBISData+0x2d8>)
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	e03f      	b.n	8002136 <_SMLF_TxferSMLValue2OBISData+0x342>
 80020b6:	bf00      	nop
 80020b8:	08012570 	.word	0x08012570
 80020bc:	080118b4 	.word	0x080118b4
 80020c0:	fffff05e 	.word	0xfffff05e
 80020c4:	080118c4 	.word	0x080118c4
 80020c8:	fffff054 	.word	0xfffff054
 80020cc:	fffff056 	.word	0xfffff056
 80020d0:	fffff05d 	.word	0xfffff05d
		
		uint8_t tempLen = inSMLValue->type & 0x0f;
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	7812      	ldrb	r2, [r2, #0]
 80020d8:	f002 020f 	and.w	r2, r2, #15
 80020dc:	767a      	strb	r2, [r7, #25]
		int8_t tempI8 = *inSMLValue->data.int64 >> (8*(tempLen - 1));
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	6852      	ldr	r2, [r2, #4]
 80020e2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80020e6:	7e78      	ldrb	r0, [r7, #25]
 80020e8:	3801      	subs	r0, #1
 80020ea:	00c0      	lsls	r0, r0, #3
 80020ec:	f1c0 0620 	rsb	r6, r0, #32
 80020f0:	f1b0 0520 	subs.w	r5, r0, #32
 80020f4:	fa21 f300 	lsr.w	r3, r1, r0
 80020f8:	fa02 f606 	lsl.w	r6, r2, r6
 80020fc:	ea43 0306 	orr.w	r3, r3, r6
 8002100:	d402      	bmi.n	8002108 <_SMLF_TxferSMLValue2OBISData+0x314>
 8002102:	fa42 f505 	asr.w	r5, r2, r5
 8002106:	432b      	orrs	r3, r5
 8002108:	fa42 f400 	asr.w	r4, r2, r0
 800210c:	763b      	strb	r3, [r7, #24]
		
		if (tempI8 < 0) inCValue->Int64 = -1;
 800210e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	da06      	bge.n	8002124 <_SMLF_TxferSMLValue2OBISData+0x330>
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
 800211c:	f04f 34ff 	mov.w	r4, #4294967295
 8002120:	e9c2 3400 	strd	r3, r4, [r2]
		
		memcpy(&inCValue->Int64, inSMLValue->data.int64, tempLen);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	7e7a      	ldrb	r2, [r7, #25]
 800212c:	4619      	mov	r1, r3
 800212e:	f00e f97c 	bl	801042a <memcpy>
	}
	
	return SMLF_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <_SMLF_TxferSMLValue2OBISData+0x344>
	
err:
	return tempRet;
 8002136:	69fb      	ldr	r3, [r7, #28]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3724      	adds	r7, #36	; 0x24
 800213c:	46bd      	mov	sp, r7
 800213e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002140 <SMLP_Message_GenerateOpenRequest>:
//region public functions

//----------------------------------------------------------------
//generate sml message for open response
sml_message *SMLP_Message_GenerateOpenRequest(uint8_t* server_id, uint16_t server_id_len, uint8_t* req_file_id, uint16_t req_file_id_len)
{	
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af06      	add	r7, sp, #24
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	461a      	mov	r2, r3
 800214c:	460b      	mov	r3, r1
 800214e:	817b      	strh	r3, [r7, #10]
 8002150:	4613      	mov	r3, r2
 8002152:	813b      	strh	r3, [r7, #8]
	return _SMLP_Message_GenerateGeneric(
 8002154:	210a      	movs	r1, #10
 8002156:	4817      	ldr	r0, [pc, #92]	; (80021b4 <SMLP_Message_GenerateOpenRequest+0x74>)
 8002158:	f00a fd76 	bl	800cc48 <sml_octet_string_init>
 800215c:	4605      	mov	r5, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <SMLP_Message_GenerateOpenRequest+0x32>
		NULL,
		NULL,
		SML_MESSAGE_OPEN_REQUEST, 
		NULL, 
		sml_octet_string_init(_SML_Client_ID, sizeof(_SML_Client_ID)),
		req_file_id ? sml_octet_string_init(req_file_id, req_file_id_len) : NULL,
 8002164:	893b      	ldrh	r3, [r7, #8]
	return _SMLP_Message_GenerateGeneric(
 8002166:	4619      	mov	r1, r3
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f00a fd6d 	bl	800cc48 <sml_octet_string_init>
 800216e:	4604      	mov	r4, r0
 8002170:	e000      	b.n	8002174 <SMLP_Message_GenerateOpenRequest+0x34>
 8002172:	2400      	movs	r4, #0
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <SMLP_Message_GenerateOpenRequest+0x48>
		server_id ? sml_octet_string_init(server_id, server_id_len) : NULL,
 800217a:	897b      	ldrh	r3, [r7, #10]
	return _SMLP_Message_GenerateGeneric(
 800217c:	4619      	mov	r1, r3
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f00a fd62 	bl	800cc48 <sml_octet_string_init>
 8002184:	4603      	mov	r3, r0
 8002186:	e000      	b.n	800218a <SMLP_Message_GenerateOpenRequest+0x4a>
 8002188:	2300      	movs	r3, #0
 800218a:	2200      	movs	r2, #0
 800218c:	9205      	str	r2, [sp, #20]
 800218e:	2200      	movs	r2, #0
 8002190:	9204      	str	r2, [sp, #16]
 8002192:	2200      	movs	r2, #0
 8002194:	9203      	str	r2, [sp, #12]
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	9401      	str	r4, [sp, #4]
 800219a:	9500      	str	r5, [sp, #0]
 800219c:	2300      	movs	r3, #0
 800219e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a2:	2100      	movs	r1, #0
 80021a4:	2000      	movs	r0, #0
 80021a6:	f000 fed5 	bl	8002f54 <_SMLP_Message_GenerateGeneric>
 80021aa:	4603      	mov	r3, r0
		NULL,
		NULL,
		NULL);
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bdb0      	pop	{r4, r5, r7, pc}
 80021b4:	20000074 	.word	0x20000074

080021b8 <SMLP_Message_GenerateCloseRequest>:

//----------------------------------------------------------------
//generate sml message for close response
sml_message *SMLP_Message_GenerateCloseRequest()
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	return _SMLP_Message_GenerateGeneric(
 80021bc:	2300      	movs	r3, #0
 80021be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021c2:	2100      	movs	r1, #0
 80021c4:	2000      	movs	r0, #0
 80021c6:	f000 fec5 	bl	8002f54 <_SMLP_Message_GenerateGeneric>
 80021ca:	4603      	mov	r3, r0
		NULL,
		NULL,
		SML_MESSAGE_CLOSE_REQUEST, 
		NULL);
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <SMLP_Message_GenerateGetProcParameterRequest>:

//----------------------------------------------------------------
//generate sml message for get proc parameter request
sml_message *SMLP_Message_GenerateGetProcParameterRequest(uint8_t* server_id, uint16_t server_id_len, sml_tree_path* tree_path)
{		
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af04      	add	r7, sp, #16
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	460b      	mov	r3, r1
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	817b      	strh	r3, [r7, #10]
	return _SMLP_Message_GenerateGeneric(
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <SMLP_Message_GenerateGetProcParameterRequest+0x22>
		NULL,
		NULL,
		SML_MESSAGE_GET_PROC_PARAMETER_REQUEST, 
		server_id ? sml_octet_string_init(server_id, server_id_len) : NULL,
 80021e4:	897b      	ldrh	r3, [r7, #10]
	return _SMLP_Message_GenerateGeneric(
 80021e6:	4619      	mov	r1, r3
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f00a fd2d 	bl	800cc48 <sml_octet_string_init>
 80021ee:	4602      	mov	r2, r0
 80021f0:	e000      	b.n	80021f4 <SMLP_Message_GenerateGetProcParameterRequest+0x24>
 80021f2:	2200      	movs	r2, #0
 80021f4:	2300      	movs	r3, #0
 80021f6:	9303      	str	r3, [sp, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	9302      	str	r3, [sp, #8]
 80021fc:	2300      	movs	r3, #0
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800220a:	2100      	movs	r1, #0
 800220c:	2000      	movs	r0, #0
 800220e:	f000 fea1 	bl	8002f54 <_SMLP_Message_GenerateGeneric>
 8002212:	4603      	mov	r3, r0
		NULL,
		NULL,
		tree_path,
		NULL);
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <SMLP_File_Verify>:
//----------------------------------------------------------------
//verify sml file formally
//test for obligatory member except crc
//return SR_SML_ATTN_XXX to respond with attention otherwise default error behaviour applies
int32_t SMLP_File_Verify(sml_file *subject)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08c      	sub	sp, #48	; 0x30
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	int32_t tempRet = SML_E_Unknown;
 8002224:	4bac      	ldr	r3, [pc, #688]	; (80024d8 <SMLP_File_Verify+0x2bc>)
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	ASSERT_B((subject), SML_E_ParamInput);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d111      	bne.n	8002252 <SMLP_File_Verify+0x36>
 800222e:	2257      	movs	r2, #87	; 0x57
 8002230:	49aa      	ldr	r1, [pc, #680]	; (80024dc <SMLP_File_Verify+0x2c0>)
 8002232:	48ab      	ldr	r0, [pc, #684]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 8002234:	f00e fbde 	bl	80109f4 <iprintf>
 8002238:	48aa      	ldr	r0, [pc, #680]	; (80024e4 <SMLP_File_Verify+0x2c8>)
 800223a:	f7fe f9a1 	bl	8000580 <LMN_GetErrorMessage>
 800223e:	4603      	mov	r3, r0
 8002240:	4618      	mov	r0, r3
 8002242:	f00e fbd7 	bl	80109f4 <iprintf>
 8002246:	48a8      	ldr	r0, [pc, #672]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 8002248:	f00e fc48 	bl	8010adc <puts>
 800224c:	4ba5      	ldr	r3, [pc, #660]	; (80024e4 <SMLP_File_Verify+0x2c8>)
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002250:	e13d      	b.n	80024ce <SMLP_File_Verify+0x2b2>
	ASSERT_B((subject->messages && subject->messages_len >= 2), SML_E_FileMalformed);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <SMLP_File_Verify+0x48>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002260:	2b01      	cmp	r3, #1
 8002262:	dc11      	bgt.n	8002288 <SMLP_File_Verify+0x6c>
 8002264:	2258      	movs	r2, #88	; 0x58
 8002266:	499d      	ldr	r1, [pc, #628]	; (80024dc <SMLP_File_Verify+0x2c0>)
 8002268:	489d      	ldr	r0, [pc, #628]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 800226a:	f00e fbc3 	bl	80109f4 <iprintf>
 800226e:	489f      	ldr	r0, [pc, #636]	; (80024ec <SMLP_File_Verify+0x2d0>)
 8002270:	f7fe f986 	bl	8000580 <LMN_GetErrorMessage>
 8002274:	4603      	mov	r3, r0
 8002276:	4618      	mov	r0, r3
 8002278:	f00e fbbc 	bl	80109f4 <iprintf>
 800227c:	489a      	ldr	r0, [pc, #616]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 800227e:	f00e fc2d 	bl	8010adc <puts>
 8002282:	4b9a      	ldr	r3, [pc, #616]	; (80024ec <SMLP_File_Verify+0x2d0>)
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002286:	e122      	b.n	80024ce <SMLP_File_Verify+0x2b2>
	
	sml_message *tempFirst = subject->messages[0];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
	sml_message *tempLast = subject->messages[subject->messages_len - 1];
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800229a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800229e:	3b01      	subs	r3, #1
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	623b      	str	r3, [r7, #32]
	
	ASSERT_F(SMLP_Message_Verify(tempFirst));
 80022a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022aa:	f000 f921 	bl	80024f0 <SMLP_Message_Verify>
 80022ae:	61f8      	str	r0, [r7, #28]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d011      	beq.n	80022da <SMLP_File_Verify+0xbe>
 80022b6:	225d      	movs	r2, #93	; 0x5d
 80022b8:	4988      	ldr	r1, [pc, #544]	; (80024dc <SMLP_File_Verify+0x2c0>)
 80022ba:	4889      	ldr	r0, [pc, #548]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 80022bc:	f00e fb9a 	bl	80109f4 <iprintf>
 80022c0:	69f8      	ldr	r0, [r7, #28]
 80022c2:	f7fe f95d 	bl	8000580 <LMN_GetErrorMessage>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f00e fb93 	bl	80109f4 <iprintf>
 80022ce:	4886      	ldr	r0, [pc, #536]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 80022d0:	f00e fc04 	bl	8010adc <puts>
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d8:	e0f9      	b.n	80024ce <SMLP_File_Verify+0x2b2>
	ASSERT_B(((*tempFirst->message_body->tag & 0xffffff00) == SML_MESSAGE_OPEN_REQUEST), SML_ATTN_UnexpectedSMLMessage);  //open req | resp
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ea:	d013      	beq.n	8002314 <SMLP_File_Verify+0xf8>
 80022ec:	225e      	movs	r2, #94	; 0x5e
 80022ee:	497b      	ldr	r1, [pc, #492]	; (80024dc <SMLP_File_Verify+0x2c0>)
 80022f0:	487b      	ldr	r0, [pc, #492]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 80022f2:	f00e fb7f 	bl	80109f4 <iprintf>
 80022f6:	f64f 600d 	movw	r0, #65037	; 0xfe0d
 80022fa:	f7fe f941 	bl	8000580 <LMN_GetErrorMessage>
 80022fe:	4603      	mov	r3, r0
 8002300:	4618      	mov	r0, r3
 8002302:	f00e fb77 	bl	80109f4 <iprintf>
 8002306:	4878      	ldr	r0, [pc, #480]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 8002308:	f00e fbe8 	bl	8010adc <puts>
 800230c:	f64f 630d 	movw	r3, #65037	; 0xfe0d
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002312:	e0dc      	b.n	80024ce <SMLP_File_Verify+0x2b2>
	
	//mem request | response
	uint8_t tempReqRes = *tempFirst->message_body->tag & 0xff;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	76fb      	strb	r3, [r7, #27]
	
	for (int i = 1; i < subject->messages_len - 1; i++)
 800231e:	2301      	movs	r3, #1
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
 8002322:	e078      	b.n	8002416 <SMLP_File_Verify+0x1fa>
	{
		ASSERT_F(SMLP_Message_Verify(subject->messages[i]));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f000 f8dd 	bl	80024f0 <SMLP_Message_Verify>
 8002336:	6138      	str	r0, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d011      	beq.n	8002362 <SMLP_File_Verify+0x146>
 800233e:	2265      	movs	r2, #101	; 0x65
 8002340:	4966      	ldr	r1, [pc, #408]	; (80024dc <SMLP_File_Verify+0x2c0>)
 8002342:	4867      	ldr	r0, [pc, #412]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 8002344:	f00e fb56 	bl	80109f4 <iprintf>
 8002348:	6938      	ldr	r0, [r7, #16]
 800234a:	f7fe f919 	bl	8000580 <LMN_GetErrorMessage>
 800234e:	4603      	mov	r3, r0
 8002350:	4618      	mov	r0, r3
 8002352:	f00e fb4f 	bl	80109f4 <iprintf>
 8002356:	4864      	ldr	r0, [pc, #400]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 8002358:	f00e fbc0 	bl	8010adc <puts>
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002360:	e0b5      	b.n	80024ce <SMLP_File_Verify+0x2b2>
		
		uint32_t tempTag = *subject->messages[i]->message_body->tag;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
		ASSERT_B(((tempTag & 0xffffff00) != SML_MESSAGE_OPEN_REQUEST), SML_ATTN_UnexpectedSMLMessage);      //!open...
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800237c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002380:	d113      	bne.n	80023aa <SMLP_File_Verify+0x18e>
 8002382:	2268      	movs	r2, #104	; 0x68
 8002384:	4955      	ldr	r1, [pc, #340]	; (80024dc <SMLP_File_Verify+0x2c0>)
 8002386:	4856      	ldr	r0, [pc, #344]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 8002388:	f00e fb34 	bl	80109f4 <iprintf>
 800238c:	f64f 600d 	movw	r0, #65037	; 0xfe0d
 8002390:	f7fe f8f6 	bl	8000580 <LMN_GetErrorMessage>
 8002394:	4603      	mov	r3, r0
 8002396:	4618      	mov	r0, r3
 8002398:	f00e fb2c 	bl	80109f4 <iprintf>
 800239c:	4852      	ldr	r0, [pc, #328]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 800239e:	f00e fb9d 	bl	8010adc <puts>
 80023a2:	f64f 630d 	movw	r3, #65037	; 0xfe0d
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a8:	e091      	b.n	80024ce <SMLP_File_Verify+0x2b2>
		ASSERT_B(((tempTag & 0xffffff00) != SML_MESSAGE_CLOSE_REQUEST), SML_ATTN_UnexpectedSMLMessage);      //!close...
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b4:	d113      	bne.n	80023de <SMLP_File_Verify+0x1c2>
 80023b6:	2269      	movs	r2, #105	; 0x69
 80023b8:	4948      	ldr	r1, [pc, #288]	; (80024dc <SMLP_File_Verify+0x2c0>)
 80023ba:	4849      	ldr	r0, [pc, #292]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 80023bc:	f00e fb1a 	bl	80109f4 <iprintf>
 80023c0:	f64f 600d 	movw	r0, #65037	; 0xfe0d
 80023c4:	f7fe f8dc 	bl	8000580 <LMN_GetErrorMessage>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f00e fb12 	bl	80109f4 <iprintf>
 80023d0:	4845      	ldr	r0, [pc, #276]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 80023d2:	f00e fb83 	bl	8010adc <puts>
 80023d6:	f64f 630d 	movw	r3, #65037	; 0xfe0d
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	e077      	b.n	80024ce <SMLP_File_Verify+0x2b2>
		ASSERT_B(((tempTag & 0xff) == tempReqRes), SML_ATTN_UnexpectedSMLMessage);      //request | response...
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	7efb      	ldrb	r3, [r7, #27]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d013      	beq.n	8002410 <SMLP_File_Verify+0x1f4>
 80023e8:	226a      	movs	r2, #106	; 0x6a
 80023ea:	493c      	ldr	r1, [pc, #240]	; (80024dc <SMLP_File_Verify+0x2c0>)
 80023ec:	483c      	ldr	r0, [pc, #240]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 80023ee:	f00e fb01 	bl	80109f4 <iprintf>
 80023f2:	f64f 600d 	movw	r0, #65037	; 0xfe0d
 80023f6:	f7fe f8c3 	bl	8000580 <LMN_GetErrorMessage>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00e faf9 	bl	80109f4 <iprintf>
 8002402:	4839      	ldr	r0, [pc, #228]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 8002404:	f00e fb6a 	bl	8010adc <puts>
 8002408:	f64f 630d 	movw	r3, #65037	; 0xfe0d
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240e:	e05e      	b.n	80024ce <SMLP_File_Verify+0x2b2>
	for (int i = 1; i < subject->messages_len - 1; i++)
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	3301      	adds	r3, #1
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800241c:	3b01      	subs	r3, #1
 800241e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002420:	429a      	cmp	r2, r3
 8002422:	f6ff af7f 	blt.w	8002324 <SMLP_File_Verify+0x108>
	}
	
	ASSERT_F(SMLP_Message_Verify(tempLast));
 8002426:	6a38      	ldr	r0, [r7, #32]
 8002428:	f000 f862 	bl	80024f0 <SMLP_Message_Verify>
 800242c:	6178      	str	r0, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d011      	beq.n	8002458 <SMLP_File_Verify+0x23c>
 8002434:	226d      	movs	r2, #109	; 0x6d
 8002436:	4929      	ldr	r1, [pc, #164]	; (80024dc <SMLP_File_Verify+0x2c0>)
 8002438:	4829      	ldr	r0, [pc, #164]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 800243a:	f00e fadb 	bl	80109f4 <iprintf>
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7fe f89e 	bl	8000580 <LMN_GetErrorMessage>
 8002444:	4603      	mov	r3, r0
 8002446:	4618      	mov	r0, r3
 8002448:	f00e fad4 	bl	80109f4 <iprintf>
 800244c:	4826      	ldr	r0, [pc, #152]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 800244e:	f00e fb45 	bl	8010adc <puts>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002456:	e03a      	b.n	80024ce <SMLP_File_Verify+0x2b2>
	ASSERT_B(((*tempLast->message_body->tag & 0xffffff00) == SML_MESSAGE_CLOSE_REQUEST), SML_ATTN_UnexpectedSMLMessage);     //close req | resp
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002468:	d013      	beq.n	8002492 <SMLP_File_Verify+0x276>
 800246a:	226e      	movs	r2, #110	; 0x6e
 800246c:	491b      	ldr	r1, [pc, #108]	; (80024dc <SMLP_File_Verify+0x2c0>)
 800246e:	481c      	ldr	r0, [pc, #112]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 8002470:	f00e fac0 	bl	80109f4 <iprintf>
 8002474:	f64f 600d 	movw	r0, #65037	; 0xfe0d
 8002478:	f7fe f882 	bl	8000580 <LMN_GetErrorMessage>
 800247c:	4603      	mov	r3, r0
 800247e:	4618      	mov	r0, r3
 8002480:	f00e fab8 	bl	80109f4 <iprintf>
 8002484:	4818      	ldr	r0, [pc, #96]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 8002486:	f00e fb29 	bl	8010adc <puts>
 800248a:	f64f 630d 	movw	r3, #65037	; 0xfe0d
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002490:	e01d      	b.n	80024ce <SMLP_File_Verify+0x2b2>
	ASSERT_B(((*tempLast->message_body->tag & 0xff) == tempReqRes), SML_ATTN_UnexpectedSMLMessage);         //request | response...
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	7efb      	ldrb	r3, [r7, #27]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d013      	beq.n	80024ca <SMLP_File_Verify+0x2ae>
 80024a2:	226f      	movs	r2, #111	; 0x6f
 80024a4:	490d      	ldr	r1, [pc, #52]	; (80024dc <SMLP_File_Verify+0x2c0>)
 80024a6:	480e      	ldr	r0, [pc, #56]	; (80024e0 <SMLP_File_Verify+0x2c4>)
 80024a8:	f00e faa4 	bl	80109f4 <iprintf>
 80024ac:	f64f 600d 	movw	r0, #65037	; 0xfe0d
 80024b0:	f7fe f866 	bl	8000580 <LMN_GetErrorMessage>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00e fa9c 	bl	80109f4 <iprintf>
 80024bc:	480a      	ldr	r0, [pc, #40]	; (80024e8 <SMLP_File_Verify+0x2cc>)
 80024be:	f00e fb0d 	bl	8010adc <puts>
 80024c2:	f64f 630d 	movw	r3, #65037	; 0xfe0d
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c8:	e001      	b.n	80024ce <SMLP_File_Verify+0x2b2>
	
	return SML_Ok;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <SMLP_File_Verify+0x2b4>
	
err:
	
	return tempRet;
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3730      	adds	r7, #48	; 0x30
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	fffff447 	.word	0xfffff447
 80024dc:	08012590 	.word	0x08012590
 80024e0:	080118c8 	.word	0x080118c8
 80024e4:	fffff446 	.word	0xfffff446
 80024e8:	080118d8 	.word	0x080118d8
 80024ec:	fffff445 	.word	0xfffff445

080024f0 <SMLP_Message_Verify>:
//verify sml message formally
//test for all obligatory member and consistency (for received and created messages) except crc
//sml_transport_write_file does not test for obligatory members!
//return SR_SML_ATTN_XXX to respond with attention otherwise default error behaviour applies
int32_t SMLP_Message_Verify(sml_message *subject)
{	
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	; 0x30
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	int32_t tempRet = SML_E_Unknown;
 80024f8:	4bb4      	ldr	r3, [pc, #720]	; (80027cc <SMLP_Message_Verify+0x2dc>)
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	ASSERT_B(subject, SML_E_ParamInput);	
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d112      	bne.n	8002528 <SMLP_Message_Verify+0x38>
 8002502:	2281      	movs	r2, #129	; 0x81
 8002504:	49b2      	ldr	r1, [pc, #712]	; (80027d0 <SMLP_Message_Verify+0x2e0>)
 8002506:	48b3      	ldr	r0, [pc, #716]	; (80027d4 <SMLP_Message_Verify+0x2e4>)
 8002508:	f00e fa74 	bl	80109f4 <iprintf>
 800250c:	48b2      	ldr	r0, [pc, #712]	; (80027d8 <SMLP_Message_Verify+0x2e8>)
 800250e:	f7fe f837 	bl	8000580 <LMN_GetErrorMessage>
 8002512:	4603      	mov	r3, r0
 8002514:	4618      	mov	r0, r3
 8002516:	f00e fa6d 	bl	80109f4 <iprintf>
 800251a:	48b0      	ldr	r0, [pc, #704]	; (80027dc <SMLP_Message_Verify+0x2ec>)
 800251c:	f00e fade 	bl	8010adc <puts>
 8002520:	4bad      	ldr	r3, [pc, #692]	; (80027d8 <SMLP_Message_Verify+0x2e8>)
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002524:	f000 bd0a 	b.w	8002f3c <SMLP_Message_Verify+0xa4c>
	
	ASSERT_B((TEST_P(subject, transaction_id, str) && subject->transaction_id->len > 0), SML_ATTN_RequestNotExecuted);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <SMLP_Message_Verify+0x5a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <SMLP_Message_Verify+0x5a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <SMLP_Message_Verify+0x5a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	dc14      	bgt.n	8002574 <SMLP_Message_Verify+0x84>
 800254a:	2283      	movs	r2, #131	; 0x83
 800254c:	49a0      	ldr	r1, [pc, #640]	; (80027d0 <SMLP_Message_Verify+0x2e0>)
 800254e:	48a1      	ldr	r0, [pc, #644]	; (80027d4 <SMLP_Message_Verify+0x2e4>)
 8002550:	f00e fa50 	bl	80109f4 <iprintf>
 8002554:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 8002558:	f7fe f812 	bl	8000580 <LMN_GetErrorMessage>
 800255c:	4603      	mov	r3, r0
 800255e:	4618      	mov	r0, r3
 8002560:	f00e fa48 	bl	80109f4 <iprintf>
 8002564:	489d      	ldr	r0, [pc, #628]	; (80027dc <SMLP_Message_Verify+0x2ec>)
 8002566:	f00e fab9 	bl	8010adc <puts>
 800256a:	f64f 630a 	movw	r3, #65034	; 0xfe0a
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002570:	f000 bce4 	b.w	8002f3c <SMLP_Message_Verify+0xa4c>
	ASSERT_B((subject->group_id && subject->abort_on_error && *subject->group_id == 0 && *subject->abort_on_error == 0), SML_ATTN_RequestNotExecuted);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <SMLP_Message_Verify+0xa8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d009      	beq.n	8002598 <SMLP_Message_Verify+0xa8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <SMLP_Message_Verify+0xa8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d014      	beq.n	80025c2 <SMLP_Message_Verify+0xd2>
 8002598:	2284      	movs	r2, #132	; 0x84
 800259a:	498d      	ldr	r1, [pc, #564]	; (80027d0 <SMLP_Message_Verify+0x2e0>)
 800259c:	488d      	ldr	r0, [pc, #564]	; (80027d4 <SMLP_Message_Verify+0x2e4>)
 800259e:	f00e fa29 	bl	80109f4 <iprintf>
 80025a2:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 80025a6:	f7fd ffeb 	bl	8000580 <LMN_GetErrorMessage>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00e fa21 	bl	80109f4 <iprintf>
 80025b2:	488a      	ldr	r0, [pc, #552]	; (80027dc <SMLP_Message_Verify+0x2ec>)
 80025b4:	f00e fa92 	bl	8010adc <puts>
 80025b8:	f64f 630a 	movw	r3, #65034	; 0xfe0a
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025be:	f000 bcbd 	b.w	8002f3c <SMLP_Message_Verify+0xa4c>
	ASSERT_B((subject->message_body && subject->message_body->d.data && subject->message_body->tag), SML_ATTN_RequestNotExecuted);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <SMLP_Message_Verify+0xee>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <SMLP_Message_Verify+0xee>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d114      	bne.n	8002608 <SMLP_Message_Verify+0x118>
 80025de:	2285      	movs	r2, #133	; 0x85
 80025e0:	497b      	ldr	r1, [pc, #492]	; (80027d0 <SMLP_Message_Verify+0x2e0>)
 80025e2:	487c      	ldr	r0, [pc, #496]	; (80027d4 <SMLP_Message_Verify+0x2e4>)
 80025e4:	f00e fa06 	bl	80109f4 <iprintf>
 80025e8:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 80025ec:	f7fd ffc8 	bl	8000580 <LMN_GetErrorMessage>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f00e f9fe 	bl	80109f4 <iprintf>
 80025f8:	4878      	ldr	r0, [pc, #480]	; (80027dc <SMLP_Message_Verify+0x2ec>)
 80025fa:	f00e fa6f 	bl	8010adc <puts>
 80025fe:	f64f 630a 	movw	r3, #65034	; 0xfe0a
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002604:	f000 bc9a 	b.w	8002f3c <SMLP_Message_Verify+0xa4c>
	
	switch (*subject->message_body->tag)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f240 2201 	movw	r2, #513	; 0x201
 8002614:	4293      	cmp	r3, r2
 8002616:	f000 81e2 	beq.w	80029de <SMLP_Message_Verify+0x4ee>
 800261a:	f240 2201 	movw	r2, #513	; 0x201
 800261e:	4293      	cmp	r3, r2
 8002620:	d80d      	bhi.n	800263e <SMLP_Message_Verify+0x14e>
 8002622:	f240 1201 	movw	r2, #257	; 0x101
 8002626:	4293      	cmp	r3, r2
 8002628:	f000 810d 	beq.w	8002846 <SMLP_Message_Verify+0x356>
 800262c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002630:	f000 81b8 	beq.w	80029a4 <SMLP_Message_Verify+0x4b4>
 8002634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002638:	d01b      	beq.n	8002672 <SMLP_Message_Verify+0x182>
 800263a:	f000 bc5a 	b.w	8002ef2 <SMLP_Message_Verify+0xa02>
 800263e:	f240 5201 	movw	r2, #1281	; 0x501
 8002642:	4293      	cmp	r3, r2
 8002644:	f000 828c 	beq.w	8002b60 <SMLP_Message_Verify+0x670>
 8002648:	f240 5201 	movw	r2, #1281	; 0x501
 800264c:	4293      	cmp	r3, r2
 800264e:	d805      	bhi.n	800265c <SMLP_Message_Verify+0x16c>
 8002650:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002654:	f000 81e0 	beq.w	8002a18 <SMLP_Message_Verify+0x528>
 8002658:	f000 bc4b 	b.w	8002ef2 <SMLP_Message_Verify+0xa02>
 800265c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002660:	f000 82f2 	beq.w	8002c48 <SMLP_Message_Verify+0x758>
 8002664:	f64f 7201 	movw	r2, #65281	; 0xff01
 8002668:	4293      	cmp	r3, r2
 800266a:	f000 839b 	beq.w	8002da4 <SMLP_Message_Verify+0x8b4>
 800266e:	f000 bc40 	b.w	8002ef2 <SMLP_Message_Verify+0xa02>
	{
	case SML_MESSAGE_OPEN_REQUEST:
		{
			sml_open_request *tempSpec = subject->message_body->d.open_request;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	60fb      	str	r3, [r7, #12]
			
			ASSERT_B((!tempSpec->codepage), SML_ATTN_UnsupportedOptElement);   //optional	
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d014      	beq.n	80026ac <SMLP_Message_Verify+0x1bc>
 8002682:	228d      	movs	r2, #141	; 0x8d
 8002684:	4952      	ldr	r1, [pc, #328]	; (80027d0 <SMLP_Message_Verify+0x2e0>)
 8002686:	4853      	ldr	r0, [pc, #332]	; (80027d4 <SMLP_Message_Verify+0x2e4>)
 8002688:	f00e f9b4 	bl	80109f4 <iprintf>
 800268c:	f64f 6010 	movw	r0, #65040	; 0xfe10
 8002690:	f7fd ff76 	bl	8000580 <LMN_GetErrorMessage>
 8002694:	4603      	mov	r3, r0
 8002696:	4618      	mov	r0, r3
 8002698:	f00e f9ac 	bl	80109f4 <iprintf>
 800269c:	484f      	ldr	r0, [pc, #316]	; (80027dc <SMLP_Message_Verify+0x2ec>)
 800269e:	f00e fa1d 	bl	8010adc <puts>
 80026a2:	f64f 6310 	movw	r3, #65040	; 0xfe10
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a8:	f000 bc48 	b.w	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B(((TEST_P(tempSpec, client_id, str)) && tempSpec->client_id->len == LEN_CLIENT_ID), SML_ATTN_Unknown);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <SMLP_Message_Verify+0x1de>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <SMLP_Message_Verify+0x1de>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <SMLP_Message_Verify+0x1de>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b0a      	cmp	r3, #10
 80026cc:	d014      	beq.n	80026f8 <SMLP_Message_Verify+0x208>
 80026ce:	228e      	movs	r2, #142	; 0x8e
 80026d0:	493f      	ldr	r1, [pc, #252]	; (80027d0 <SMLP_Message_Verify+0x2e0>)
 80026d2:	4840      	ldr	r0, [pc, #256]	; (80027d4 <SMLP_Message_Verify+0x2e4>)
 80026d4:	f00e f98e 	bl	80109f4 <iprintf>
 80026d8:	f44f 407e 	mov.w	r0, #65024	; 0xfe00
 80026dc:	f7fd ff50 	bl	8000580 <LMN_GetErrorMessage>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f00e f986 	bl	80109f4 <iprintf>
 80026e8:	483c      	ldr	r0, [pc, #240]	; (80027dc <SMLP_Message_Verify+0x2ec>)
 80026ea:	f00e f9f7 	bl	8010adc <puts>
 80026ee:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f4:	f000 bc22 	b.w	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B(memcmp(tempSpec->client_id->str, _SML_Client_ID, LEN_CLIENT_ID) == 0, SML_ATTN_TargAddrNotAvailable);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	220a      	movs	r2, #10
 8002700:	4937      	ldr	r1, [pc, #220]	; (80027e0 <SMLP_Message_Verify+0x2f0>)
 8002702:	4618      	mov	r0, r3
 8002704:	f00d fe82 	bl	801040c <memcmp>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d014      	beq.n	8002738 <SMLP_Message_Verify+0x248>
 800270e:	228f      	movs	r2, #143	; 0x8f
 8002710:	492f      	ldr	r1, [pc, #188]	; (80027d0 <SMLP_Message_Verify+0x2e0>)
 8002712:	4830      	ldr	r0, [pc, #192]	; (80027d4 <SMLP_Message_Verify+0x2e4>)
 8002714:	f00e f96e 	bl	80109f4 <iprintf>
 8002718:	f64f 6003 	movw	r0, #65027	; 0xfe03
 800271c:	f7fd ff30 	bl	8000580 <LMN_GetErrorMessage>
 8002720:	4603      	mov	r3, r0
 8002722:	4618      	mov	r0, r3
 8002724:	f00e f966 	bl	80109f4 <iprintf>
 8002728:	482c      	ldr	r0, [pc, #176]	; (80027dc <SMLP_Message_Verify+0x2ec>)
 800272a:	f00e f9d7 	bl	8010adc <puts>
 800272e:	f64f 6303 	movw	r3, #65027	; 0xfe03
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002734:	f000 bc02 	b.w	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B(((TEST_P(tempSpec, req_file_id, str)) && tempSpec->req_file_id->len > 0), SML_ATTN_RequestNotAvailable);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00d      	beq.n	800275a <SMLP_Message_Verify+0x26a>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <SMLP_Message_Verify+0x26a>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <SMLP_Message_Verify+0x26a>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	dc13      	bgt.n	8002782 <SMLP_Message_Verify+0x292>
 800275a:	2290      	movs	r2, #144	; 0x90
 800275c:	491c      	ldr	r1, [pc, #112]	; (80027d0 <SMLP_Message_Verify+0x2e0>)
 800275e:	481d      	ldr	r0, [pc, #116]	; (80027d4 <SMLP_Message_Verify+0x2e4>)
 8002760:	f00e f948 	bl	80109f4 <iprintf>
 8002764:	f64f 6004 	movw	r0, #65028	; 0xfe04
 8002768:	f7fd ff0a 	bl	8000580 <LMN_GetErrorMessage>
 800276c:	4603      	mov	r3, r0
 800276e:	4618      	mov	r0, r3
 8002770:	f00e f940 	bl	80109f4 <iprintf>
 8002774:	4819      	ldr	r0, [pc, #100]	; (80027dc <SMLP_Message_Verify+0x2ec>)
 8002776:	f00e f9b1 	bl	8010adc <puts>
 800277a:	f64f 6304 	movw	r3, #65028	; 0xfe04
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002780:	e3dc      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B(((TEST_P(tempSpec, server_id, str)) && tempSpec->server_id->len == LEN_SERVER_ID), SML_ATTN_TargAddrNotAvailable);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00d      	beq.n	80027a4 <SMLP_Message_Verify+0x2b4>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d009      	beq.n	80027a4 <SMLP_Message_Verify+0x2b4>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d004      	beq.n	80027a4 <SMLP_Message_Verify+0x2b4>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b0a      	cmp	r3, #10
 80027a2:	d01f      	beq.n	80027e4 <SMLP_Message_Verify+0x2f4>
 80027a4:	2291      	movs	r2, #145	; 0x91
 80027a6:	490a      	ldr	r1, [pc, #40]	; (80027d0 <SMLP_Message_Verify+0x2e0>)
 80027a8:	480a      	ldr	r0, [pc, #40]	; (80027d4 <SMLP_Message_Verify+0x2e4>)
 80027aa:	f00e f923 	bl	80109f4 <iprintf>
 80027ae:	f64f 6003 	movw	r0, #65027	; 0xfe03
 80027b2:	f7fd fee5 	bl	8000580 <LMN_GetErrorMessage>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00e f91b 	bl	80109f4 <iprintf>
 80027be:	4807      	ldr	r0, [pc, #28]	; (80027dc <SMLP_Message_Verify+0x2ec>)
 80027c0:	f00e f98c 	bl	8010adc <puts>
 80027c4:	f64f 6303 	movw	r3, #65027	; 0xfe03
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ca:	e3b7      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
 80027cc:	fffff447 	.word	0xfffff447
 80027d0:	080125a4 	.word	0x080125a4
 80027d4:	080118c8 	.word	0x080118c8
 80027d8:	fffff446 	.word	0xfffff446
 80027dc:	080118d8 	.word	0x080118d8
 80027e0:	20000074 	.word	0x20000074
			ASSERT_B((!tempSpec->username), SML_ATTN_UnsupportedOptElement);   //optional
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <SMLP_Message_Verify+0x324>
 80027ec:	2292      	movs	r2, #146	; 0x92
 80027ee:	49ad      	ldr	r1, [pc, #692]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 80027f0:	48ad      	ldr	r0, [pc, #692]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 80027f2:	f00e f8ff 	bl	80109f4 <iprintf>
 80027f6:	f64f 6010 	movw	r0, #65040	; 0xfe10
 80027fa:	f7fd fec1 	bl	8000580 <LMN_GetErrorMessage>
 80027fe:	4603      	mov	r3, r0
 8002800:	4618      	mov	r0, r3
 8002802:	f00e f8f7 	bl	80109f4 <iprintf>
 8002806:	48a9      	ldr	r0, [pc, #676]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 8002808:	f00e f968 	bl	8010adc <puts>
 800280c:	f64f 6310 	movw	r3, #65040	; 0xfe10
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002812:	e393      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B((!tempSpec->password), SML_ATTN_UnsupportedOptElement);   //optional
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 837e 	beq.w	8002f1a <SMLP_Message_Verify+0xa2a>
 800281e:	2293      	movs	r2, #147	; 0x93
 8002820:	49a0      	ldr	r1, [pc, #640]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 8002822:	48a1      	ldr	r0, [pc, #644]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 8002824:	f00e f8e6 	bl	80109f4 <iprintf>
 8002828:	f64f 6010 	movw	r0, #65040	; 0xfe10
 800282c:	f7fd fea8 	bl	8000580 <LMN_GetErrorMessage>
 8002830:	4603      	mov	r3, r0
 8002832:	4618      	mov	r0, r3
 8002834:	f00e f8de 	bl	80109f4 <iprintf>
 8002838:	489c      	ldr	r0, [pc, #624]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 800283a:	f00e f94f 	bl	8010adc <puts>
 800283e:	f64f 6310 	movw	r3, #65040	; 0xfe10
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002844:	e37a      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
				
			break;
		}
	case SML_MESSAGE_OPEN_RESPONSE:
		{
			sml_open_response *tempSpec = subject->message_body->d.open_response;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	613b      	str	r3, [r7, #16]
			
			ASSERT_B((!tempSpec->codepage), SML_ATTN_UnsupportedOptElement);   //optional	
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d013      	beq.n	800287e <SMLP_Message_Verify+0x38e>
 8002856:	229c      	movs	r2, #156	; 0x9c
 8002858:	4992      	ldr	r1, [pc, #584]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 800285a:	4893      	ldr	r0, [pc, #588]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 800285c:	f00e f8ca 	bl	80109f4 <iprintf>
 8002860:	f64f 6010 	movw	r0, #65040	; 0xfe10
 8002864:	f7fd fe8c 	bl	8000580 <LMN_GetErrorMessage>
 8002868:	4603      	mov	r3, r0
 800286a:	4618      	mov	r0, r3
 800286c:	f00e f8c2 	bl	80109f4 <iprintf>
 8002870:	488e      	ldr	r0, [pc, #568]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 8002872:	f00e f933 	bl	8010adc <puts>
 8002876:	f64f 6310 	movw	r3, #65040	; 0xfe10
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287c:	e35e      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			if(tempSpec->client_id)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d043      	beq.n	800290e <SMLP_Message_Verify+0x41e>
			{
				ASSERT_B(TEST_P(tempSpec, client_id, str) && tempSpec->client_id->len == LEN_CLIENT_ID, SML_ATTN_Unknown);     //optional
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00d      	beq.n	80028a8 <SMLP_Message_Verify+0x3b8>
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d009      	beq.n	80028a8 <SMLP_Message_Verify+0x3b8>
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d004      	beq.n	80028a8 <SMLP_Message_Verify+0x3b8>
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b0a      	cmp	r3, #10
 80028a6:	d013      	beq.n	80028d0 <SMLP_Message_Verify+0x3e0>
 80028a8:	229f      	movs	r2, #159	; 0x9f
 80028aa:	497e      	ldr	r1, [pc, #504]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 80028ac:	487e      	ldr	r0, [pc, #504]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 80028ae:	f00e f8a1 	bl	80109f4 <iprintf>
 80028b2:	f44f 407e 	mov.w	r0, #65024	; 0xfe00
 80028b6:	f7fd fe63 	bl	8000580 <LMN_GetErrorMessage>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4618      	mov	r0, r3
 80028be:	f00e f899 	bl	80109f4 <iprintf>
 80028c2:	487a      	ldr	r0, [pc, #488]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 80028c4:	f00e f90a 	bl	8010adc <puts>
 80028c8:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ce:	e335      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
				ASSERT_B(memcmp(tempSpec->client_id->str, _SML_Client_ID, LEN_CLIENT_ID) == 0, SML_ATTN_TargAddrNotAvailable);     //optional
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	220a      	movs	r2, #10
 80028d8:	4975      	ldr	r1, [pc, #468]	; (8002ab0 <SMLP_Message_Verify+0x5c0>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f00d fd96 	bl	801040c <memcmp>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d013      	beq.n	800290e <SMLP_Message_Verify+0x41e>
 80028e6:	22a0      	movs	r2, #160	; 0xa0
 80028e8:	496e      	ldr	r1, [pc, #440]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 80028ea:	486f      	ldr	r0, [pc, #444]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 80028ec:	f00e f882 	bl	80109f4 <iprintf>
 80028f0:	f64f 6003 	movw	r0, #65027	; 0xfe03
 80028f4:	f7fd fe44 	bl	8000580 <LMN_GetErrorMessage>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f00e f87a 	bl	80109f4 <iprintf>
 8002900:	486a      	ldr	r0, [pc, #424]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 8002902:	f00e f8eb 	bl	8010adc <puts>
 8002906:	f64f 6303 	movw	r3, #65027	; 0xfe03
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290c:	e316      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			}
			ASSERT_B(((TEST_P(tempSpec, req_file_id, str)) && tempSpec->req_file_id->len > 0), SML_ATTN_RequestNotAvailable);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00d      	beq.n	8002930 <SMLP_Message_Verify+0x440>
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <SMLP_Message_Verify+0x440>
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <SMLP_Message_Verify+0x440>
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	dc13      	bgt.n	8002958 <SMLP_Message_Verify+0x468>
 8002930:	22a2      	movs	r2, #162	; 0xa2
 8002932:	495c      	ldr	r1, [pc, #368]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 8002934:	485c      	ldr	r0, [pc, #368]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 8002936:	f00e f85d 	bl	80109f4 <iprintf>
 800293a:	f64f 6004 	movw	r0, #65028	; 0xfe04
 800293e:	f7fd fe1f 	bl	8000580 <LMN_GetErrorMessage>
 8002942:	4603      	mov	r3, r0
 8002944:	4618      	mov	r0, r3
 8002946:	f00e f855 	bl	80109f4 <iprintf>
 800294a:	4858      	ldr	r0, [pc, #352]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 800294c:	f00e f8c6 	bl	8010adc <puts>
 8002950:	f64f 6304 	movw	r3, #65028	; 0xfe04
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002956:	e2f1      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B(((TEST_P(tempSpec, server_id, str)) && tempSpec->server_id->len == LEN_SERVER_ID), SML_ATTN_TargAddrNotAvailable);
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00e      	beq.n	800297c <SMLP_Message_Verify+0x48c>
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <SMLP_Message_Verify+0x48c>
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <SMLP_Message_Verify+0x48c>
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b0a      	cmp	r3, #10
 8002978:	f000 82d1 	beq.w	8002f1e <SMLP_Message_Verify+0xa2e>
 800297c:	22a3      	movs	r2, #163	; 0xa3
 800297e:	4949      	ldr	r1, [pc, #292]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 8002980:	4849      	ldr	r0, [pc, #292]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 8002982:	f00e f837 	bl	80109f4 <iprintf>
 8002986:	f64f 6003 	movw	r0, #65027	; 0xfe03
 800298a:	f7fd fdf9 	bl	8000580 <LMN_GetErrorMessage>
 800298e:	4603      	mov	r3, r0
 8002990:	4618      	mov	r0, r3
 8002992:	f00e f82f 	bl	80109f4 <iprintf>
 8002996:	4845      	ldr	r0, [pc, #276]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 8002998:	f00e f8a0 	bl	8010adc <puts>
 800299c:	f64f 6303 	movw	r3, #65027	; 0xfe03
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a2:	e2cb      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>

						break;
		}
	case SML_MESSAGE_CLOSE_REQUEST:
		{
			sml_close_request *tempSpec = subject->message_body->d.close_request;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	617b      	str	r3, [r7, #20]
			
			ASSERT_B((!tempSpec->global_signature), SML_ATTN_UnsupportedOptElement);   //optional			
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 82b6 	beq.w	8002f22 <SMLP_Message_Verify+0xa32>
 80029b6:	22ad      	movs	r2, #173	; 0xad
 80029b8:	493a      	ldr	r1, [pc, #232]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 80029ba:	483b      	ldr	r0, [pc, #236]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 80029bc:	f00e f81a 	bl	80109f4 <iprintf>
 80029c0:	f64f 6010 	movw	r0, #65040	; 0xfe10
 80029c4:	f7fd fddc 	bl	8000580 <LMN_GetErrorMessage>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f00e f812 	bl	80109f4 <iprintf>
 80029d0:	4836      	ldr	r0, [pc, #216]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 80029d2:	f00e f883 	bl	8010adc <puts>
 80029d6:	f64f 6310 	movw	r3, #65040	; 0xfe10
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029dc:	e2ae      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			
			break;
		}
	case SML_MESSAGE_CLOSE_RESPONSE:
		{
			sml_close_request *tempSpec = subject->message_body->d.close_response;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	61bb      	str	r3, [r7, #24]
			
			ASSERT_B((!tempSpec->global_signature), SML_ATTN_UnsupportedOptElement);   //optional
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 829b 	beq.w	8002f26 <SMLP_Message_Verify+0xa36>
 80029f0:	22b5      	movs	r2, #181	; 0xb5
 80029f2:	492c      	ldr	r1, [pc, #176]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 80029f4:	482c      	ldr	r0, [pc, #176]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 80029f6:	f00d fffd 	bl	80109f4 <iprintf>
 80029fa:	f64f 6010 	movw	r0, #65040	; 0xfe10
 80029fe:	f7fd fdbf 	bl	8000580 <LMN_GetErrorMessage>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f00d fff5 	bl	80109f4 <iprintf>
 8002a0a:	4828      	ldr	r0, [pc, #160]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 8002a0c:	f00e f866 	bl	8010adc <puts>
 8002a10:	f64f 6310 	movw	r3, #65040	; 0xfe10
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a16:	e291      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			break;
		}
	case SML_MESSAGE_GET_PROC_PARAMETER_REQUEST:
		{
			sml_get_proc_parameter_request *tempSpec = subject->message_body->d.get_proc_parameter_request;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61fb      	str	r3, [r7, #28]
			
			if (tempSpec->server_id)//optional
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d024      	beq.n	8002a72 <SMLP_Message_Verify+0x582>
			{
				ASSERT_B(((TEST_P(tempSpec, server_id, str)) && tempSpec->server_id->len == LEN_SERVER_ID), SML_ATTN_TargAddrNotAvailable);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00d      	beq.n	8002a4a <SMLP_Message_Verify+0x55a>
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <SMLP_Message_Verify+0x55a>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <SMLP_Message_Verify+0x55a>
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b0a      	cmp	r3, #10
 8002a48:	d013      	beq.n	8002a72 <SMLP_Message_Verify+0x582>
 8002a4a:	22be      	movs	r2, #190	; 0xbe
 8002a4c:	4915      	ldr	r1, [pc, #84]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 8002a4e:	4816      	ldr	r0, [pc, #88]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 8002a50:	f00d ffd0 	bl	80109f4 <iprintf>
 8002a54:	f64f 6003 	movw	r0, #65027	; 0xfe03
 8002a58:	f7fd fd92 	bl	8000580 <LMN_GetErrorMessage>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f00d ffc8 	bl	80109f4 <iprintf>
 8002a64:	4811      	ldr	r0, [pc, #68]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 8002a66:	f00e f839 	bl	8010adc <puts>
 8002a6a:	f64f 6303 	movw	r3, #65027	; 0xfe03
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a70:	e264      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			}
			ASSERT_B((!tempSpec->username), SML_ATTN_UnsupportedOptElement);   //optional
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01c      	beq.n	8002ab4 <SMLP_Message_Verify+0x5c4>
 8002a7a:	22c0      	movs	r2, #192	; 0xc0
 8002a7c:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <SMLP_Message_Verify+0x5b4>)
 8002a7e:	480a      	ldr	r0, [pc, #40]	; (8002aa8 <SMLP_Message_Verify+0x5b8>)
 8002a80:	f00d ffb8 	bl	80109f4 <iprintf>
 8002a84:	f64f 6010 	movw	r0, #65040	; 0xfe10
 8002a88:	f7fd fd7a 	bl	8000580 <LMN_GetErrorMessage>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f00d ffb0 	bl	80109f4 <iprintf>
 8002a94:	4805      	ldr	r0, [pc, #20]	; (8002aac <SMLP_Message_Verify+0x5bc>)
 8002a96:	f00e f821 	bl	8010adc <puts>
 8002a9a:	f64f 6310 	movw	r3, #65040	; 0xfe10
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa0:	e24c      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
 8002aa2:	bf00      	nop
 8002aa4:	080125a4 	.word	0x080125a4
 8002aa8:	080118c8 	.word	0x080118c8
 8002aac:	080118d8 	.word	0x080118d8
 8002ab0:	20000074 	.word	0x20000074
			ASSERT_B((!tempSpec->password), SML_ATTN_UnsupportedOptElement);   //optional
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <SMLP_Message_Verify+0x5f4>
 8002abc:	22c1      	movs	r2, #193	; 0xc1
 8002abe:	49a3      	ldr	r1, [pc, #652]	; (8002d4c <SMLP_Message_Verify+0x85c>)
 8002ac0:	48a3      	ldr	r0, [pc, #652]	; (8002d50 <SMLP_Message_Verify+0x860>)
 8002ac2:	f00d ff97 	bl	80109f4 <iprintf>
 8002ac6:	f64f 6010 	movw	r0, #65040	; 0xfe10
 8002aca:	f7fd fd59 	bl	8000580 <LMN_GetErrorMessage>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f00d ff8f 	bl	80109f4 <iprintf>
 8002ad6:	489f      	ldr	r0, [pc, #636]	; (8002d54 <SMLP_Message_Verify+0x864>)
 8002ad8:	f00e f800 	bl	8010adc <puts>
 8002adc:	f64f 6310 	movw	r3, #65040	; 0xfe10
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae2:	e22b      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B(((TEST_P(tempSpec, parameter_tree_path, path_entries)) && tempSpec->parameter_tree_path->path_entries_len > 0), SML_ATTN_RequestNotExecuted);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <SMLP_Message_Verify+0x616>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <SMLP_Message_Verify+0x616>
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <SMLP_Message_Verify+0x616>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	dc13      	bgt.n	8002b2e <SMLP_Message_Verify+0x63e>
 8002b06:	22c2      	movs	r2, #194	; 0xc2
 8002b08:	4990      	ldr	r1, [pc, #576]	; (8002d4c <SMLP_Message_Verify+0x85c>)
 8002b0a:	4891      	ldr	r0, [pc, #580]	; (8002d50 <SMLP_Message_Verify+0x860>)
 8002b0c:	f00d ff72 	bl	80109f4 <iprintf>
 8002b10:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 8002b14:	f7fd fd34 	bl	8000580 <LMN_GetErrorMessage>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f00d ff6a 	bl	80109f4 <iprintf>
 8002b20:	488c      	ldr	r0, [pc, #560]	; (8002d54 <SMLP_Message_Verify+0x864>)
 8002b22:	f00d ffdb 	bl	8010adc <puts>
 8002b26:	f64f 630a 	movw	r3, #65034	; 0xfe0a
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2c:	e206      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B((!tempSpec->attribute), SML_ATTN_UnsupportedOptElement);   //optional
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 81f9 	beq.w	8002f2a <SMLP_Message_Verify+0xa3a>
 8002b38:	22c3      	movs	r2, #195	; 0xc3
 8002b3a:	4984      	ldr	r1, [pc, #528]	; (8002d4c <SMLP_Message_Verify+0x85c>)
 8002b3c:	4884      	ldr	r0, [pc, #528]	; (8002d50 <SMLP_Message_Verify+0x860>)
 8002b3e:	f00d ff59 	bl	80109f4 <iprintf>
 8002b42:	f64f 6010 	movw	r0, #65040	; 0xfe10
 8002b46:	f7fd fd1b 	bl	8000580 <LMN_GetErrorMessage>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f00d ff51 	bl	80109f4 <iprintf>
 8002b52:	4880      	ldr	r0, [pc, #512]	; (8002d54 <SMLP_Message_Verify+0x864>)
 8002b54:	f00d ffc2 	bl	8010adc <puts>
 8002b58:	f64f 6310 	movw	r3, #65040	; 0xfe10
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5e:	e1ed      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			
			break;
		}
	case SML_MESSAGE_GET_PROC_PARAMETER_RESPONSE:
		{
			sml_get_proc_parameter_response *tempSpec = subject->message_body->d.get_proc_parameter_response;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	623b      	str	r3, [r7, #32]
			
			ASSERT_B(((TEST_P(tempSpec, server_id, str)) && tempSpec->server_id->len == LEN_SERVER_ID), SML_ATTN_TargAddrNotAvailable);
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00d      	beq.n	8002b8a <SMLP_Message_Verify+0x69a>
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <SMLP_Message_Verify+0x69a>
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <SMLP_Message_Verify+0x69a>
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b0a      	cmp	r3, #10
 8002b88:	d013      	beq.n	8002bb2 <SMLP_Message_Verify+0x6c2>
 8002b8a:	22cb      	movs	r2, #203	; 0xcb
 8002b8c:	496f      	ldr	r1, [pc, #444]	; (8002d4c <SMLP_Message_Verify+0x85c>)
 8002b8e:	4870      	ldr	r0, [pc, #448]	; (8002d50 <SMLP_Message_Verify+0x860>)
 8002b90:	f00d ff30 	bl	80109f4 <iprintf>
 8002b94:	f64f 6003 	movw	r0, #65027	; 0xfe03
 8002b98:	f7fd fcf2 	bl	8000580 <LMN_GetErrorMessage>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f00d ff28 	bl	80109f4 <iprintf>
 8002ba4:	486b      	ldr	r0, [pc, #428]	; (8002d54 <SMLP_Message_Verify+0x864>)
 8002ba6:	f00d ff99 	bl	8010adc <puts>
 8002baa:	f64f 6303 	movw	r3, #65027	; 0xfe03
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb0:	e1c4      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B(((TEST_P(tempSpec, parameter_tree_path, path_entries)) && tempSpec->parameter_tree_path->path_entries_len > 0), SML_ATTN_RequestNotExecuted);
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <SMLP_Message_Verify+0x6e4>
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <SMLP_Message_Verify+0x6e4>
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <SMLP_Message_Verify+0x6e4>
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	dc13      	bgt.n	8002bfc <SMLP_Message_Verify+0x70c>
 8002bd4:	22cc      	movs	r2, #204	; 0xcc
 8002bd6:	495d      	ldr	r1, [pc, #372]	; (8002d4c <SMLP_Message_Verify+0x85c>)
 8002bd8:	485d      	ldr	r0, [pc, #372]	; (8002d50 <SMLP_Message_Verify+0x860>)
 8002bda:	f00d ff0b 	bl	80109f4 <iprintf>
 8002bde:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 8002be2:	f7fd fccd 	bl	8000580 <LMN_GetErrorMessage>
 8002be6:	4603      	mov	r3, r0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f00d ff03 	bl	80109f4 <iprintf>
 8002bee:	4859      	ldr	r0, [pc, #356]	; (8002d54 <SMLP_Message_Verify+0x864>)
 8002bf0:	f00d ff74 	bl	8010adc <puts>
 8002bf4:	f64f 630a 	movw	r3, #65034	; 0xfe0a
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfa:	e19f      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B(((TEST_P(tempSpec, parameter_tree, child_list)) && tempSpec->parameter_tree->child_list_len > 0), SML_ATTN_RequestNotExecuted);
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00e      	beq.n	8002c20 <SMLP_Message_Verify+0x730>
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <SMLP_Message_Verify+0x730>
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <SMLP_Message_Verify+0x730>
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f300 8187 	bgt.w	8002f2e <SMLP_Message_Verify+0xa3e>
 8002c20:	22cd      	movs	r2, #205	; 0xcd
 8002c22:	494a      	ldr	r1, [pc, #296]	; (8002d4c <SMLP_Message_Verify+0x85c>)
 8002c24:	484a      	ldr	r0, [pc, #296]	; (8002d50 <SMLP_Message_Verify+0x860>)
 8002c26:	f00d fee5 	bl	80109f4 <iprintf>
 8002c2a:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 8002c2e:	f7fd fca7 	bl	8000580 <LMN_GetErrorMessage>
 8002c32:	4603      	mov	r3, r0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f00d fedd 	bl	80109f4 <iprintf>
 8002c3a:	4846      	ldr	r0, [pc, #280]	; (8002d54 <SMLP_Message_Verify+0x864>)
 8002c3c:	f00d ff4e 	bl	8010adc <puts>
 8002c40:	f64f 630a 	movw	r3, #65034	; 0xfe0a
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c46:	e179      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			
			break;
		}
	case SML_MESSAGE_SET_PROC_PARAMETER_REQUEST:
		{
			sml_set_proc_parameter_request *tempSpec = subject->message_body->d.set_proc_parameter_request;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24

			if (tempSpec->server_id)//optional
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d024      	beq.n	8002ca2 <SMLP_Message_Verify+0x7b2>
			{
				ASSERT_B(((TEST_P(tempSpec, server_id, str)) && tempSpec->server_id->len == LEN_SERVER_ID), SML_ATTN_TargAddrNotAvailable);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <SMLP_Message_Verify+0x78a>
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <SMLP_Message_Verify+0x78a>
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <SMLP_Message_Verify+0x78a>
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b0a      	cmp	r3, #10
 8002c78:	d013      	beq.n	8002ca2 <SMLP_Message_Verify+0x7b2>
 8002c7a:	22d7      	movs	r2, #215	; 0xd7
 8002c7c:	4933      	ldr	r1, [pc, #204]	; (8002d4c <SMLP_Message_Verify+0x85c>)
 8002c7e:	4834      	ldr	r0, [pc, #208]	; (8002d50 <SMLP_Message_Verify+0x860>)
 8002c80:	f00d feb8 	bl	80109f4 <iprintf>
 8002c84:	f64f 6003 	movw	r0, #65027	; 0xfe03
 8002c88:	f7fd fc7a 	bl	8000580 <LMN_GetErrorMessage>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f00d feb0 	bl	80109f4 <iprintf>
 8002c94:	482f      	ldr	r0, [pc, #188]	; (8002d54 <SMLP_Message_Verify+0x864>)
 8002c96:	f00d ff21 	bl	8010adc <puts>
 8002c9a:	f64f 6303 	movw	r3, #65027	; 0xfe03
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca0:	e14c      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			}
			ASSERT_B((!tempSpec->username), SML_ATTN_UnsupportedOptElement);   //optional
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d013      	beq.n	8002cd2 <SMLP_Message_Verify+0x7e2>
 8002caa:	22d9      	movs	r2, #217	; 0xd9
 8002cac:	4927      	ldr	r1, [pc, #156]	; (8002d4c <SMLP_Message_Verify+0x85c>)
 8002cae:	4828      	ldr	r0, [pc, #160]	; (8002d50 <SMLP_Message_Verify+0x860>)
 8002cb0:	f00d fea0 	bl	80109f4 <iprintf>
 8002cb4:	f64f 6010 	movw	r0, #65040	; 0xfe10
 8002cb8:	f7fd fc62 	bl	8000580 <LMN_GetErrorMessage>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f00d fe98 	bl	80109f4 <iprintf>
 8002cc4:	4823      	ldr	r0, [pc, #140]	; (8002d54 <SMLP_Message_Verify+0x864>)
 8002cc6:	f00d ff09 	bl	8010adc <puts>
 8002cca:	f64f 6310 	movw	r3, #65040	; 0xfe10
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd0:	e134      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B((!tempSpec->password), SML_ATTN_UnsupportedOptElement);   //optional
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d013      	beq.n	8002d02 <SMLP_Message_Verify+0x812>
 8002cda:	22da      	movs	r2, #218	; 0xda
 8002cdc:	491b      	ldr	r1, [pc, #108]	; (8002d4c <SMLP_Message_Verify+0x85c>)
 8002cde:	481c      	ldr	r0, [pc, #112]	; (8002d50 <SMLP_Message_Verify+0x860>)
 8002ce0:	f00d fe88 	bl	80109f4 <iprintf>
 8002ce4:	f64f 6010 	movw	r0, #65040	; 0xfe10
 8002ce8:	f7fd fc4a 	bl	8000580 <LMN_GetErrorMessage>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f00d fe80 	bl	80109f4 <iprintf>
 8002cf4:	4817      	ldr	r0, [pc, #92]	; (8002d54 <SMLP_Message_Verify+0x864>)
 8002cf6:	f00d fef1 	bl	8010adc <puts>
 8002cfa:	f64f 6310 	movw	r3, #65040	; 0xfe10
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d00:	e11c      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B(((TEST_P(tempSpec, parameter_tree_path, path_entries)) && tempSpec->parameter_tree_path->path_entries_len > 0), SML_ATTN_RequestNotExecuted);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <SMLP_Message_Verify+0x834>
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <SMLP_Message_Verify+0x834>
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <SMLP_Message_Verify+0x834>
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	dc19      	bgt.n	8002d58 <SMLP_Message_Verify+0x868>
 8002d24:	22db      	movs	r2, #219	; 0xdb
 8002d26:	4909      	ldr	r1, [pc, #36]	; (8002d4c <SMLP_Message_Verify+0x85c>)
 8002d28:	4809      	ldr	r0, [pc, #36]	; (8002d50 <SMLP_Message_Verify+0x860>)
 8002d2a:	f00d fe63 	bl	80109f4 <iprintf>
 8002d2e:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 8002d32:	f7fd fc25 	bl	8000580 <LMN_GetErrorMessage>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f00d fe5b 	bl	80109f4 <iprintf>
 8002d3e:	4805      	ldr	r0, [pc, #20]	; (8002d54 <SMLP_Message_Verify+0x864>)
 8002d40:	f00d fecc 	bl	8010adc <puts>
 8002d44:	f64f 630a 	movw	r3, #65034	; 0xfe0a
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4a:	e0f7      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
 8002d4c:	080125a4 	.word	0x080125a4
 8002d50:	080118c8 	.word	0x080118c8
 8002d54:	080118d8 	.word	0x080118d8
			ASSERT_B(((TEST_P(tempSpec, parameter_tree, child_list)) && tempSpec->parameter_tree->child_list_len > 0), SML_ATTN_RequestNotExecuted);
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00e      	beq.n	8002d7c <SMLP_Message_Verify+0x88c>
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <SMLP_Message_Verify+0x88c>
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <SMLP_Message_Verify+0x88c>
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f300 80db 	bgt.w	8002f32 <SMLP_Message_Verify+0xa42>
 8002d7c:	22dc      	movs	r2, #220	; 0xdc
 8002d7e:	4972      	ldr	r1, [pc, #456]	; (8002f48 <SMLP_Message_Verify+0xa58>)
 8002d80:	4872      	ldr	r0, [pc, #456]	; (8002f4c <SMLP_Message_Verify+0xa5c>)
 8002d82:	f00d fe37 	bl	80109f4 <iprintf>
 8002d86:	f64f 600a 	movw	r0, #65034	; 0xfe0a
 8002d8a:	f7fd fbf9 	bl	8000580 <LMN_GetErrorMessage>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f00d fe2f 	bl	80109f4 <iprintf>
 8002d96:	486e      	ldr	r0, [pc, #440]	; (8002f50 <SMLP_Message_Verify+0xa60>)
 8002d98:	f00d fea0 	bl	8010adc <puts>
 8002d9c:	f64f 630a 	movw	r3, #65034	; 0xfe0a
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da2:	e0cb      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
				
			break;
		}
	case SML_MESSAGE_ATTENTION_RESPONSE:
		{
			sml_attention_response *tempSpec = subject->message_body->d.attention_response;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
			
			ASSERT_B(((TEST_P(tempSpec, server_id, str)) && tempSpec->server_id->len == LEN_SERVER_ID), SML_ATTN_TargAddrNotAvailable);
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <SMLP_Message_Verify+0x8de>
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <SMLP_Message_Verify+0x8de>
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <SMLP_Message_Verify+0x8de>
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b0a      	cmp	r3, #10
 8002dcc:	d013      	beq.n	8002df6 <SMLP_Message_Verify+0x906>
 8002dce:	22e4      	movs	r2, #228	; 0xe4
 8002dd0:	495d      	ldr	r1, [pc, #372]	; (8002f48 <SMLP_Message_Verify+0xa58>)
 8002dd2:	485e      	ldr	r0, [pc, #376]	; (8002f4c <SMLP_Message_Verify+0xa5c>)
 8002dd4:	f00d fe0e 	bl	80109f4 <iprintf>
 8002dd8:	f64f 6003 	movw	r0, #65027	; 0xfe03
 8002ddc:	f7fd fbd0 	bl	8000580 <LMN_GetErrorMessage>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f00d fe06 	bl	80109f4 <iprintf>
 8002de8:	4859      	ldr	r0, [pc, #356]	; (8002f50 <SMLP_Message_Verify+0xa60>)
 8002dea:	f00d fe77 	bl	8010adc <puts>
 8002dee:	f64f 6303 	movw	r3, #65027	; 0xfe03
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df4:	e0a2      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B(((TEST_P(tempSpec, attention_number, str)) && tempSpec->attention_number->len == LEN_ATTN), SML_ATTN_Unknown);
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <SMLP_Message_Verify+0x928>
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <SMLP_Message_Verify+0x928>
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d004      	beq.n	8002e18 <SMLP_Message_Verify+0x928>
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d013      	beq.n	8002e40 <SMLP_Message_Verify+0x950>
 8002e18:	22e5      	movs	r2, #229	; 0xe5
 8002e1a:	494b      	ldr	r1, [pc, #300]	; (8002f48 <SMLP_Message_Verify+0xa58>)
 8002e1c:	484b      	ldr	r0, [pc, #300]	; (8002f4c <SMLP_Message_Verify+0xa5c>)
 8002e1e:	f00d fde9 	bl	80109f4 <iprintf>
 8002e22:	f44f 407e 	mov.w	r0, #65024	; 0xfe00
 8002e26:	f7fd fbab 	bl	8000580 <LMN_GetErrorMessage>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f00d fde1 	bl	80109f4 <iprintf>
 8002e32:	4847      	ldr	r0, [pc, #284]	; (8002f50 <SMLP_Message_Verify+0xa60>)
 8002e34:	f00d fe52 	bl	8010adc <puts>
 8002e38:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e3e:	e07d      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B((!tempSpec->attention_message || ((TEST_P(tempSpec, attention_message, str)) && tempSpec->attention_message->len > 0)), SML_ATTN_Unknown);   //optional
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d024      	beq.n	8002e92 <SMLP_Message_Verify+0x9a2>
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <SMLP_Message_Verify+0x97a>
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <SMLP_Message_Verify+0x97a>
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <SMLP_Message_Verify+0x97a>
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	dc13      	bgt.n	8002e92 <SMLP_Message_Verify+0x9a2>
 8002e6a:	22e6      	movs	r2, #230	; 0xe6
 8002e6c:	4936      	ldr	r1, [pc, #216]	; (8002f48 <SMLP_Message_Verify+0xa58>)
 8002e6e:	4837      	ldr	r0, [pc, #220]	; (8002f4c <SMLP_Message_Verify+0xa5c>)
 8002e70:	f00d fdc0 	bl	80109f4 <iprintf>
 8002e74:	f44f 407e 	mov.w	r0, #65024	; 0xfe00
 8002e78:	f7fd fb82 	bl	8000580 <LMN_GetErrorMessage>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f00d fdb8 	bl	80109f4 <iprintf>
 8002e84:	4832      	ldr	r0, [pc, #200]	; (8002f50 <SMLP_Message_Verify+0xa60>)
 8002e86:	f00d fe29 	bl	8010adc <puts>
 8002e8a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e90:	e054      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			ASSERT_B((!tempSpec->attention_details || ((TEST_P(tempSpec, attention_details, parameter_name, str)) && tempSpec->attention_details->parameter_name->len > 0)), SML_ATTN_Unknown);   //optional
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d04d      	beq.n	8002f36 <SMLP_Message_Verify+0xa46>
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d014      	beq.n	8002eca <SMLP_Message_Verify+0x9da>
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <SMLP_Message_Verify+0x9da>
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <SMLP_Message_Verify+0x9da>
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <SMLP_Message_Verify+0x9da>
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	dc35      	bgt.n	8002f36 <SMLP_Message_Verify+0xa46>
 8002eca:	22e7      	movs	r2, #231	; 0xe7
 8002ecc:	491e      	ldr	r1, [pc, #120]	; (8002f48 <SMLP_Message_Verify+0xa58>)
 8002ece:	481f      	ldr	r0, [pc, #124]	; (8002f4c <SMLP_Message_Verify+0xa5c>)
 8002ed0:	f00d fd90 	bl	80109f4 <iprintf>
 8002ed4:	f44f 407e 	mov.w	r0, #65024	; 0xfe00
 8002ed8:	f7fd fb52 	bl	8000580 <LMN_GetErrorMessage>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f00d fd88 	bl	80109f4 <iprintf>
 8002ee4:	481a      	ldr	r0, [pc, #104]	; (8002f50 <SMLP_Message_Verify+0xa60>)
 8002ee6:	f00d fdf9 	bl	8010adc <puts>
 8002eea:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef0:	e024      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			
			break;
		}
	default:
		{
			ASSERT_B(0, SML_ATTN_UnexpectedSMLMessage);
 8002ef2:	22ed      	movs	r2, #237	; 0xed
 8002ef4:	4914      	ldr	r1, [pc, #80]	; (8002f48 <SMLP_Message_Verify+0xa58>)
 8002ef6:	4815      	ldr	r0, [pc, #84]	; (8002f4c <SMLP_Message_Verify+0xa5c>)
 8002ef8:	f00d fd7c 	bl	80109f4 <iprintf>
 8002efc:	f64f 600d 	movw	r0, #65037	; 0xfe0d
 8002f00:	f7fd fb3e 	bl	8000580 <LMN_GetErrorMessage>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f00d fd74 	bl	80109f4 <iprintf>
 8002f0c:	4810      	ldr	r0, [pc, #64]	; (8002f50 <SMLP_Message_Verify+0xa60>)
 8002f0e:	f00d fde5 	bl	8010adc <puts>
 8002f12:	f64f 630d 	movw	r3, #65037	; 0xfe0d
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f18:	e010      	b.n	8002f3c <SMLP_Message_Verify+0xa4c>
			break;
 8002f1a:	bf00      	nop
 8002f1c:	e00c      	b.n	8002f38 <SMLP_Message_Verify+0xa48>
						break;
 8002f1e:	bf00      	nop
 8002f20:	e00a      	b.n	8002f38 <SMLP_Message_Verify+0xa48>
			break;
 8002f22:	bf00      	nop
 8002f24:	e008      	b.n	8002f38 <SMLP_Message_Verify+0xa48>
			break;
 8002f26:	bf00      	nop
 8002f28:	e006      	b.n	8002f38 <SMLP_Message_Verify+0xa48>
			break;
 8002f2a:	bf00      	nop
 8002f2c:	e004      	b.n	8002f38 <SMLP_Message_Verify+0xa48>
			break;
 8002f2e:	bf00      	nop
 8002f30:	e002      	b.n	8002f38 <SMLP_Message_Verify+0xa48>
			break;
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <SMLP_Message_Verify+0xa48>
			break;
 8002f36:	bf00      	nop
		}
	}
	return SML_Ok;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <SMLP_Message_Verify+0xa4e>
	
err:
	return tempRet;
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3730      	adds	r7, #48	; 0x30
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	080125a4 	.word	0x080125a4
 8002f4c:	080118c8 	.word	0x080118c8
 8002f50:	080118d8 	.word	0x080118d8

08002f54 <_SMLP_Message_GenerateGeneric>:
//generate arbitrary sml message
//all parameter passed as NULL are not allocated! - except transaction_id and message body!
//if(message_body != NULL) variadic arguments are ignored
//else add int as SML_MESSAGE_TYPE + all members of specific body struct (can be NULL)
sml_message *_SMLP_Message_GenerateGeneric(octet_string *transaction_id, sml_message_body *message_body, ...)
{
 8002f54:	b40e      	push	{r1, r2, r3}
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b08b      	sub	sp, #44	; 0x2c
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
	static uint32_t statTransID = 0;
	
#define _M_ON_ERR_() goto err
	
	va_list ap;
	va_start(ap, message_body);
 8002f5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f62:	60fb      	str	r3, [r7, #12]
	
	sml_message *tempRet = sml_message_init();
 8002f64:	f008 ffe0 	bl	800bf28 <sml_message_init>
 8002f68:	6278      	str	r0, [r7, #36]	; 0x24
	if (!tempRet) _M_ON_ERR_();
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 812e 	beq.w	80031ce <_SMLP_Message_GenerateGeneric+0x27a>
	
	if (transaction_id)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00c      	beq.n	8002f92 <_SMLP_Message_GenerateGeneric+0x3e>
	{
		if (tempRet->transaction_id) sml_octet_string_free(tempRet->transaction_id);
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <_SMLP_Message_GenerateGeneric+0x36>
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f009 ff3a 	bl	800cdfe <sml_octet_string_free>
		tempRet->transaction_id = transaction_id;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e01c      	b.n	8002fcc <_SMLP_Message_GenerateGeneric+0x78>
	}
	else
#warning "redefine transaction ID"
	{
		if (tempRet->transaction_id) sml_octet_string_free(tempRet->transaction_id);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <_SMLP_Message_GenerateGeneric+0x50>
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f009 ff2d 	bl	800cdfe <sml_octet_string_free>
		uint32_t tempID = Misc_SwapByteOrder32(statTransID++);
 8002fa4:	4b96      	ldr	r3, [pc, #600]	; (8003200 <_SMLP_Message_GenerateGeneric+0x2ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	4995      	ldr	r1, [pc, #596]	; (8003200 <_SMLP_Message_GenerateGeneric+0x2ac>)
 8002fac:	600a      	str	r2, [r1, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fb23 	bl	80005fa <Misc_SwapByteOrder32>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	60bb      	str	r3, [r7, #8]
		transaction_id = sml_octet_string_init((uint8_t*)&tempID, sizeof(tempID));
 8002fb8:	f107 0308 	add.w	r3, r7, #8
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f009 fe42 	bl	800cc48 <sml_octet_string_init>
 8002fc4:	6078      	str	r0, [r7, #4]
		tempRet->transaction_id = transaction_id;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	601a      	str	r2, [r3, #0]
	}
	
	tempRet->group_id = sml_u8_init(0);
 8002fcc:	2301      	movs	r3, #1
 8002fce:	2260      	movs	r2, #96	; 0x60
 8002fd0:	f04f 0000 	mov.w	r0, #0
 8002fd4:	f04f 0100 	mov.w	r1, #0
 8002fd8:	f009 fc54 	bl	800c884 <sml_number_init>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	605a      	str	r2, [r3, #4]
	tempRet->abort_on_error = sml_u8_init(0);
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	2260      	movs	r2, #96	; 0x60
 8002fe6:	f04f 0000 	mov.w	r0, #0
 8002fea:	f04f 0100 	mov.w	r1, #0
 8002fee:	f009 fc49 	bl	800c884 <sml_number_init>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	609a      	str	r2, [r3, #8]
	if (!tempRet->group_id || !tempRet->abort_on_error) _M_ON_ERR_();
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80e8 	beq.w	80031d2 <_SMLP_Message_GenerateGeneric+0x27e>
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80e3 	beq.w	80031d2 <_SMLP_Message_GenerateGeneric+0x27e>
	
	if (message_body) 
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <_SMLP_Message_GenerateGeneric+0xc8>
	{
		tempRet->message_body = message_body;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003016:	60da      	str	r2, [r3, #12]
		return tempRet;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	e0e9      	b.n	80031f0 <_SMLP_Message_GenerateGeneric+0x29c>
	}
	
	//no message body found
	
	int tempSMLMessageType = va_arg(ap, int);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1d1a      	adds	r2, r3, #4
 8003020:	60fa      	str	r2, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	623b      	str	r3, [r7, #32]
	
	switch (tempSMLMessageType)
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302c:	d04c      	beq.n	80030c8 <_SMLP_Message_GenerateGeneric+0x174>
 800302e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003032:	dc03      	bgt.n	800303c <_SMLP_Message_GenerateGeneric+0xe8>
 8003034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003038:	d008      	beq.n	800304c <_SMLP_Message_GenerateGeneric+0xf8>
			
			break;
		}
	default:
		{
			_M_ON_ERR_();
 800303a:	e0d5      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
	switch (tempSMLMessageType)
 800303c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003040:	d05c      	beq.n	80030fc <_SMLP_Message_GenerateGeneric+0x1a8>
 8003042:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003046:	f000 808a 	beq.w	800315e <_SMLP_Message_GenerateGeneric+0x20a>
			_M_ON_ERR_();
 800304a:	e0cd      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
			sml_open_request *tempSpec = sml_open_request_init();
 800304c:	f009 ff2e 	bl	800ceac <sml_open_request_init>
 8003050:	6138      	str	r0, [r7, #16]
			if (!tempSpec) _M_ON_ERR_();
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80be 	beq.w	80031d6 <_SMLP_Message_GenerateGeneric+0x282>
			tempSpec->codepage = va_arg(ap, octet_string*);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1d1a      	adds	r2, r3, #4
 800305e:	60fa      	str	r2, [r7, #12]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	601a      	str	r2, [r3, #0]
			tempSpec->client_id = va_arg(ap, octet_string*);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1d1a      	adds	r2, r3, #4
 800306a:	60fa      	str	r2, [r7, #12]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	605a      	str	r2, [r3, #4]
			tempSpec->req_file_id = va_arg(ap, octet_string*);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1d1a      	adds	r2, r3, #4
 8003076:	60fa      	str	r2, [r7, #12]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]
			tempSpec->server_id = va_arg(ap, octet_string*);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1d1a      	adds	r2, r3, #4
 8003082:	60fa      	str	r2, [r7, #12]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	60da      	str	r2, [r3, #12]
			tempSpec->username = va_arg(ap, octet_string*);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1d1a      	adds	r2, r3, #4
 800308e:	60fa      	str	r2, [r7, #12]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	611a      	str	r2, [r3, #16]
			tempSpec->password = va_arg(ap, octet_string*);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1d1a      	adds	r2, r3, #4
 800309a:	60fa      	str	r2, [r7, #12]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	615a      	str	r2, [r3, #20]
			tempSpec->sml_version = va_arg(ap, u8*);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1d1a      	adds	r2, r3, #4
 80030a6:	60fa      	str	r2, [r7, #12]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	619a      	str	r2, [r3, #24]
			tempRet->message_body = sml_message_body_init2(tempSMLMessageType, tempSpec);
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	6939      	ldr	r1, [r7, #16]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f009 f8f8 	bl	800c2a8 <sml_message_body_init2>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	60da      	str	r2, [r3, #12]
			if (!tempRet->message_body) _M_ON_ERR_();
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d17c      	bne.n	80031c0 <_SMLP_Message_GenerateGeneric+0x26c>
 80030c6:	e08f      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
			sml_close_request *tempSpec = sml_close_request_init();
 80030c8:	f006 fbc2 	bl	8009850 <sml_close_request_init>
 80030cc:	6178      	str	r0, [r7, #20]
			if (!tempSpec) _M_ON_ERR_();
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8082 	beq.w	80031da <_SMLP_Message_GenerateGeneric+0x286>
			tempSpec->global_signature = va_arg(ap, sml_signature*);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1d1a      	adds	r2, r3, #4
 80030da:	60fa      	str	r2, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	601a      	str	r2, [r3, #0]
			tempRet->message_body = sml_message_body_init2(tempSMLMessageType, tempSpec);
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	6979      	ldr	r1, [r7, #20]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f009 f8de 	bl	800c2a8 <sml_message_body_init2>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	60da      	str	r2, [r3, #12]
			if (!tempRet->message_body) _M_ON_ERR_();
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d164      	bne.n	80031c4 <_SMLP_Message_GenerateGeneric+0x270>
 80030fa:	e075      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
			sml_get_proc_parameter_request *tempSpec = sml_get_proc_parameter_request_init();
 80030fc:	f007 f92a 	bl	800a354 <sml_get_proc_parameter_request_init>
 8003100:	61b8      	str	r0, [r7, #24]
			if (!tempSpec) _M_ON_ERR_();
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d06a      	beq.n	80031de <_SMLP_Message_GenerateGeneric+0x28a>
			tempSpec->server_id = va_arg(ap, octet_string*);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1d1a      	adds	r2, r3, #4
 800310c:	60fa      	str	r2, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	601a      	str	r2, [r3, #0]
			tempSpec->username = va_arg(ap, octet_string*);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1d1a      	adds	r2, r3, #4
 8003118:	60fa      	str	r2, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	605a      	str	r2, [r3, #4]
			tempSpec->password = va_arg(ap, octet_string*);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1d1a      	adds	r2, r3, #4
 8003124:	60fa      	str	r2, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	609a      	str	r2, [r3, #8]
			tempSpec->parameter_tree_path = va_arg(ap, sml_tree_path*);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1d1a      	adds	r2, r3, #4
 8003130:	60fa      	str	r2, [r7, #12]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	60da      	str	r2, [r3, #12]
			tempSpec->attribute = va_arg(ap, octet_string*);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1d1a      	adds	r2, r3, #4
 800313c:	60fa      	str	r2, [r7, #12]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	611a      	str	r2, [r3, #16]
			tempRet->message_body = sml_message_body_init2(tempSMLMessageType, tempSpec);
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	4618      	mov	r0, r3
 800314a:	f009 f8ad 	bl	800c2a8 <sml_message_body_init2>
 800314e:	4602      	mov	r2, r0
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	60da      	str	r2, [r3, #12]
			if (!tempRet->message_body) _M_ON_ERR_();
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d135      	bne.n	80031c8 <_SMLP_Message_GenerateGeneric+0x274>
 800315c:	e044      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
			sml_set_proc_parameter_request *tempSpec = sml_set_proc_parameter_request_init();
 800315e:	f00a f94f 	bl	800d400 <sml_set_proc_parameter_request_init>
 8003162:	61f8      	str	r0, [r7, #28]
			if (!tempSpec) _M_ON_ERR_();
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d03b      	beq.n	80031e2 <_SMLP_Message_GenerateGeneric+0x28e>
			tempSpec->server_id = va_arg(ap, octet_string*);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1d1a      	adds	r2, r3, #4
 800316e:	60fa      	str	r2, [r7, #12]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	601a      	str	r2, [r3, #0]
			tempSpec->username = va_arg(ap, octet_string*);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1d1a      	adds	r2, r3, #4
 800317a:	60fa      	str	r2, [r7, #12]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	605a      	str	r2, [r3, #4]
			tempSpec->password = va_arg(ap, octet_string*);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1d1a      	adds	r2, r3, #4
 8003186:	60fa      	str	r2, [r7, #12]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	609a      	str	r2, [r3, #8]
			tempSpec->parameter_tree_path = va_arg(ap, sml_tree_path*);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1d1a      	adds	r2, r3, #4
 8003192:	60fa      	str	r2, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	60da      	str	r2, [r3, #12]
			tempSpec->parameter_tree = va_arg(ap, sml_tree*);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1d1a      	adds	r2, r3, #4
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	611a      	str	r2, [r3, #16]
			tempRet->message_body = sml_message_body_init2(tempSMLMessageType, tempSpec);
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	69f9      	ldr	r1, [r7, #28]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f009 f87c 	bl	800c2a8 <sml_message_body_init2>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	60da      	str	r2, [r3, #12]
			if (!tempRet->message_body) _M_ON_ERR_();
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d013      	beq.n	80031e6 <_SMLP_Message_GenerateGeneric+0x292>
			break;
 80031be:	e004      	b.n	80031ca <_SMLP_Message_GenerateGeneric+0x276>
			break;
 80031c0:	bf00      	nop
 80031c2:	e002      	b.n	80031ca <_SMLP_Message_GenerateGeneric+0x276>
			break;
 80031c4:	bf00      	nop
 80031c6:	e000      	b.n	80031ca <_SMLP_Message_GenerateGeneric+0x276>
			break;
 80031c8:	bf00      	nop
		}
	}
	
	return tempRet;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	e010      	b.n	80031f0 <_SMLP_Message_GenerateGeneric+0x29c>
	if (!tempRet) _M_ON_ERR_();
 80031ce:	bf00      	nop
 80031d0:	e00a      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
	
err:
 80031d2:	bf00      	nop
 80031d4:	e008      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
			if (!tempSpec) _M_ON_ERR_();
 80031d6:	bf00      	nop
 80031d8:	e006      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
			if (!tempSpec) _M_ON_ERR_();
 80031da:	bf00      	nop
 80031dc:	e004      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
			if (!tempSpec) _M_ON_ERR_();
 80031de:	bf00      	nop
 80031e0:	e002      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
			if (!tempSpec) _M_ON_ERR_();
 80031e2:	bf00      	nop
 80031e4:	e000      	b.n	80031e8 <_SMLP_Message_GenerateGeneric+0x294>
			if (!tempRet->message_body) _M_ON_ERR_();
 80031e6:	bf00      	nop
	sml_message_free(tempRet);
 80031e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031ea:	f009 f819 	bl	800c220 <sml_message_free>
	return NULL;
 80031ee:	2300      	movs	r3, #0
	
#undef _M_ON_ERR_
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	372c      	adds	r7, #44	; 0x2c
 80031f4:	46bd      	mov	sp, r7
 80031f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031fa:	b003      	add	sp, #12
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000320 	.word	0x20000320

08003204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003208:	f000 fcbe 	bl	8003b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800320c:	f000 f828 	bl	8003260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003210:	f000 f8f8 	bl	8003404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003214:	f000 f896 	bl	8003344 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003218:	f000 f8c4 	bl	80033a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800321c:	f003 fbb6 	bl	800698c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003220:	4a09      	ldr	r2, [pc, #36]	; (8003248 <main+0x44>)
 8003222:	2100      	movs	r1, #0
 8003224:	4809      	ldr	r0, [pc, #36]	; (800324c <main+0x48>)
 8003226:	f003 fc1b 	bl	8006a60 <osThreadNew>
 800322a:	4602      	mov	r2, r0
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <main+0x4c>)
 800322e:	601a      	str	r2, [r3, #0]

  /* creation of toggleLEDTask */
  toggleLEDTaskHandle = osThreadNew(StarttoggleLEDTask, NULL, &toggleLEDTask_attributes);
 8003230:	4a08      	ldr	r2, [pc, #32]	; (8003254 <main+0x50>)
 8003232:	2100      	movs	r1, #0
 8003234:	4808      	ldr	r0, [pc, #32]	; (8003258 <main+0x54>)
 8003236:	f003 fc13 	bl	8006a60 <osThreadNew>
 800323a:	4602      	mov	r2, r0
 800323c:	4b07      	ldr	r3, [pc, #28]	; (800325c <main+0x58>)
 800323e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003240:	f003 fbd8 	bl	80069f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003244:	e7fe      	b.n	8003244 <main+0x40>
 8003246:	bf00      	nop
 8003248:	080125b8 	.word	0x080125b8
 800324c:	080034fd 	.word	0x080034fd
 8003250:	20021840 	.word	0x20021840
 8003254:	080125dc 	.word	0x080125dc
 8003258:	080036cd 	.word	0x080036cd
 800325c:	200218c4 	.word	0x200218c4

08003260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b0b0      	sub	sp, #192	; 0xc0
 8003264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003266:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800326a:	2244      	movs	r2, #68	; 0x44
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f00d f8e6 	bl	8010440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003274:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003284:	463b      	mov	r3, r7
 8003286:	2268      	movs	r2, #104	; 0x68
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f00d f8d8 	bl	8010440 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003290:	2302      	movs	r3, #2
 8003292:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800329c:	2340      	movs	r3, #64	; 0x40
 800329e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032a2:	2302      	movs	r3, #2
 80032a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032a8:	2302      	movs	r3, #2
 80032aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 80032b4:	230a      	movs	r3, #10
 80032b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80032ba:	2307      	movs	r3, #7
 80032bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80032c0:	2302      	movs	r3, #2
 80032c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80032c6:	2302      	movs	r3, #2
 80032c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 ffef 	bl	80042b4 <HAL_RCC_OscConfig>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80032dc:	f000 fa16 	bl	800370c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032e0:	230f      	movs	r3, #15
 80032e2:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032e4:	2303      	movs	r3, #3
 80032e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032e8:	2300      	movs	r3, #0
 80032ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032ec:	2300      	movs	r3, #0
 80032ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032f0:	2300      	movs	r3, #0
 80032f2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032f8:	2104      	movs	r1, #4
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fbfa 	bl	8004af4 <HAL_RCC_ClockConfig>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003306:	f000 fa01 	bl	800370c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800330a:	2306      	movs	r3, #6
 800330c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003312:	2300      	movs	r3, #0
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003316:	463b      	mov	r3, r7
 8003318:	4618      	mov	r0, r3
 800331a:	f001 fe21 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003324:	f000 f9f2 	bl	800370c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003328:	f44f 7000 	mov.w	r0, #512	; 0x200
 800332c:	f000 ff6c 	bl	8004208 <HAL_PWREx_ControlVoltageScaling>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003336:	f000 f9e9 	bl	800370c <Error_Handler>
  }
}
 800333a:	bf00      	nop
 800333c:	37c0      	adds	r7, #192	; 0xc0
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <MX_USART2_UART_Init+0x58>)
 800334a:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <MX_USART2_UART_Init+0x5c>)
 800334c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <MX_USART2_UART_Init+0x58>)
 8003350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <MX_USART2_UART_Init+0x58>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <MX_USART2_UART_Init+0x58>)
 800335e:	2200      	movs	r2, #0
 8003360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <MX_USART2_UART_Init+0x58>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <MX_USART2_UART_Init+0x58>)
 800336a:	220c      	movs	r2, #12
 800336c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <MX_USART2_UART_Init+0x58>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <MX_USART2_UART_Init+0x58>)
 8003376:	2200      	movs	r2, #0
 8003378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <MX_USART2_UART_Init+0x58>)
 800337c:	2200      	movs	r2, #0
 800337e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <MX_USART2_UART_Init+0x58>)
 8003382:	2200      	movs	r2, #0
 8003384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003386:	4805      	ldr	r0, [pc, #20]	; (800339c <MX_USART2_UART_Init+0x58>)
 8003388:	f002 fbd6 	bl	8005b38 <HAL_UART_Init>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003392:	f000 f9bb 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200218c8 	.word	0x200218c8
 80033a0:	40004400 	.word	0x40004400

080033a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033aa:	4a15      	ldr	r2, [pc, #84]	; (8003400 <MX_USART3_UART_Init+0x5c>)
 80033ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033ca:	220c      	movs	r2, #12
 80033cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033dc:	2200      	movs	r2, #0
 80033de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033e6:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_USART3_UART_Init+0x58>)
 80033e8:	f002 fba6 	bl	8005b38 <HAL_UART_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80033f2:	f000 f98b 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20021844 	.word	0x20021844
 8003400:	40004800 	.word	0x40004800

08003404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340a:	f107 0314 	add.w	r3, r7, #20
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	60da      	str	r2, [r3, #12]
 8003418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800341a:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <MX_GPIO_Init+0xec>)
 800341c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341e:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <MX_GPIO_Init+0xec>)
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003426:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <MX_GPIO_Init+0xec>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003432:	4b2f      	ldr	r3, [pc, #188]	; (80034f0 <MX_GPIO_Init+0xec>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	4a2e      	ldr	r2, [pc, #184]	; (80034f0 <MX_GPIO_Init+0xec>)
 8003438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <MX_GPIO_Init+0xec>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800344a:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <MX_GPIO_Init+0xec>)
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	4a28      	ldr	r2, [pc, #160]	; (80034f0 <MX_GPIO_Init+0xec>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <MX_GPIO_Init+0xec>)
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003462:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <MX_GPIO_Init+0xec>)
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	4a22      	ldr	r2, [pc, #136]	; (80034f0 <MX_GPIO_Init+0xec>)
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <MX_GPIO_Init+0xec>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800347a:	2200      	movs	r2, #0
 800347c:	2120      	movs	r1, #32
 800347e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003482:	f000 fe81 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_3_WE_GPIO_Port, RS485_3_WE_Pin, GPIO_PIN_RESET);
 8003486:	2200      	movs	r2, #0
 8003488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800348c:	4819      	ldr	r0, [pc, #100]	; (80034f4 <MX_GPIO_Init+0xf0>)
 800348e:	f000 fe7b 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <MX_GPIO_Init+0xf4>)
 800349a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4619      	mov	r1, r3
 80034a6:	4813      	ldr	r0, [pc, #76]	; (80034f4 <MX_GPIO_Init+0xf0>)
 80034a8:	f000 fcf4 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80034ac:	2320      	movs	r3, #32
 80034ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b0:	2301      	movs	r3, #1
 80034b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80034bc:	f107 0314 	add.w	r3, r7, #20
 80034c0:	4619      	mov	r1, r3
 80034c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c6:	f000 fce5 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_3_WE_Pin */
  GPIO_InitStruct.Pin = RS485_3_WE_Pin;
 80034ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d0:	2301      	movs	r3, #1
 80034d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_3_WE_GPIO_Port, &GPIO_InitStruct);
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	4619      	mov	r1, r3
 80034e2:	4804      	ldr	r0, [pc, #16]	; (80034f4 <MX_GPIO_Init+0xf0>)
 80034e4:	f000 fcd6 	bl	8003e94 <HAL_GPIO_Init>

}
 80034e8:	bf00      	nop
 80034ea:	3728      	adds	r7, #40	; 0x28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	48000800 	.word	0x48000800
 80034f8:	10210000 	.word	0x10210000

080034fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	f6ad 0d94 	subw	sp, sp, #2196	; 0x894
 8003502:	af00      	add	r7, sp, #0
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	6018      	str	r0, [r3, #0]
  {
	//char tmpStringData[128];
	//sprintf(tmpStringData, "task starts...");
	//HAL_UART_Transmit(&huart2, (uint8_t*)tmpStringData, 14, 3000);

		sml_file* tempReq = NULL, *tempResp = NULL;//sml request & response files
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
		uint8_t tempBufRx[2048] = { 0 };//Rx buffer
 8003514:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003518:	4618      	mov	r0, r3
 800351a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800351e:	461a      	mov	r2, r3
 8003520:	2100      	movs	r1, #0
 8003522:	f00c ff8d 	bl	8010440 <memset>
		int32_t tempR = 0;//mem return values
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 3888 	str.w	r3, [r7, #2184]	; 0x888
		OBISDataChain_t* tempData = NULL;//data chain pointer
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870

//		PID_APlus,
//		PID_Voltage_L1,
//		PID_Voltage_L2,
//		PID_Voltage_L3,
		if ((tempR = SMLF_CreateGetPPReqFilePID(PID_Voltage_L1, &tempReq))) TRACE(LMN_GetErrorMessage(tempR)); //generate sml file
 8003532:	f607 0374 	addw	r3, r7, #2164	; 0x874
 8003536:	4619      	mov	r1, r3
 8003538:	200f      	movs	r0, #15
 800353a:	f7fd f9b4 	bl	80008a6 <SMLF_CreateGetPPReqFilePID>
 800353e:	f8c7 0888 	str.w	r0, [r7, #2184]	; 0x888
 8003542:	f8d7 3888 	ldr.w	r3, [r7, #2184]	; 0x888
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <StartDefaultTask+0x70>
 800354a:	f240 1271 	movw	r2, #369	; 0x171
 800354e:	4958      	ldr	r1, [pc, #352]	; (80036b0 <StartDefaultTask+0x1b4>)
 8003550:	4858      	ldr	r0, [pc, #352]	; (80036b4 <StartDefaultTask+0x1b8>)
 8003552:	f00d fa4f 	bl	80109f4 <iprintf>
 8003556:	f8d7 0888 	ldr.w	r0, [r7, #2184]	; 0x888
 800355a:	f7fd f811 	bl	8000580 <LMN_GetErrorMessage>
 800355e:	4603      	mov	r3, r0
 8003560:	4618      	mov	r0, r3
 8003562:	f00d fa47 	bl	80109f4 <iprintf>
 8003566:	4854      	ldr	r0, [pc, #336]	; (80036b8 <StartDefaultTask+0x1bc>)
 8003568:	f00d fab8 	bl	8010adc <puts>
		uint8_t* tempBufTx = SMLF_FileGetBuf(tempReq);
 800356c:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd f931 	bl	80007d8 <SMLF_FileGetBuf>
 8003576:	f8c7 0884 	str.w	r0, [r7, #2180]	; 0x884
		uint16_t tempBufTxLen = SMLF_FileGetBufLen(tempReq);
 800357a:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd f945 	bl	800080e <SMLF_FileGetBufLen>
 8003584:	4603      	mov	r3, r0
 8003586:	f8a7 3882 	strh.w	r3, [r7, #2178]	; 0x882

		//test message
//		uint8_t tempXXX[] = { 0x68, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x68, 0x01, 0x02, 0x65, 0x13, 0x47, 0x16, 0x00, 0x00 };

		//tx & rx
		HAL_GPIO_WritePin(RS485_3_WE_PORT, RS485_3_WE_PIN, GPIO_PIN_SET);
 800358a:	2201      	movs	r2, #1
 800358c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003590:	484a      	ldr	r0, [pc, #296]	; (80036bc <StartDefaultTask+0x1c0>)
 8003592:	f000 fdf9 	bl	8004188 <HAL_GPIO_WritePin>
		HAL_StatusTypeDef tempS = HAL_UART_Transmit(&huart3, tempBufTx, tempBufTxLen, 2000 / portTICK_PERIOD_MS);//4000ms Tx timeout
 8003596:	f8b7 2882 	ldrh.w	r2, [r7, #2178]	; 0x882
 800359a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800359e:	f8d7 1884 	ldr.w	r1, [r7, #2180]	; 0x884
 80035a2:	4847      	ldr	r0, [pc, #284]	; (80036c0 <StartDefaultTask+0x1c4>)
 80035a4:	f002 fb16 	bl	8005bd4 <HAL_UART_Transmit>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 3881 	strb.w	r3, [r7, #2177]	; 0x881
		HAL_GPIO_WritePin(RS485_3_WE_PORT, RS485_3_WE_PIN, GPIO_PIN_RESET);
 80035ae:	2200      	movs	r2, #0
 80035b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035b4:	4841      	ldr	r0, [pc, #260]	; (80036bc <StartDefaultTask+0x1c0>)
 80035b6:	f000 fde7 	bl	8004188 <HAL_GPIO_WritePin>

		HAL_Delay(5);//wait for Tx finished :(
 80035ba:	2005      	movs	r0, #5
 80035bc:	f000 fb24 	bl	8003c08 <HAL_Delay>
		__HAL_UART_CLEAR_FLAG(&huart3, (UART_CLEAR_IDLEF | UART_CLEAR_TCF | UART_CLEAR_LBDF | UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF));//clear corrupted status from bus echo
 80035c0:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <StartDefaultTask+0x1c4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f240 125f 	movw	r2, #351	; 0x15f
 80035c8:	621a      	str	r2, [r3, #32]
		__HAL_UART_FLUSH_DRREGISTER(&huart3);//clear corrupted status from bus echo
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <StartDefaultTask+0x1c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	8b1b      	ldrh	r3, [r3, #24]
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <StartDefaultTask+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0208 	orr.w	r2, r2, #8
 80035da:	b292      	uxth	r2, r2
 80035dc:	831a      	strh	r2, [r3, #24]
 80035de:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <StartDefaultTask+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	8b1b      	ldrh	r3, [r3, #24]
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <StartDefaultTask+0x1c4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0210 	orr.w	r2, r2, #16
 80035ee:	b292      	uxth	r2, r2
 80035f0:	831a      	strh	r2, [r3, #24]
		tempS = HAL_UART_Receive(&huart3, tempBufRx, sizeof(tempBufRx), 2000 / portTICK_PERIOD_MS);//4000ms Rx timeout
 80035f2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80035f6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80035fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035fe:	4830      	ldr	r0, [pc, #192]	; (80036c0 <StartDefaultTask+0x1c4>)
 8003600:	f002 fb7b 	bl	8005cfa <HAL_UART_Receive>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 3881 	strb.w	r3, [r7, #2177]	; 0x881

		//vTaskStartTrace();

		tempResp = SMLF_FileParseFromBuf(tempBufRx, sizeof(tempBufRx));//parse sml response file from Rx buffer
 800360a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800360e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd f908 	bl	8000828 <SMLF_FileParseFromBuf>
 8003618:	f8c7 088c 	str.w	r0, [r7, #2188]	; 0x88c
		if ((tempR = SMLF_ParseGetPPRespFile(tempResp, &tempData))) TRACE(LMN_GetErrorMessage(tempR));//parse data from sml response file
 800361c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8003620:	4619      	mov	r1, r3
 8003622:	f8d7 088c 	ldr.w	r0, [r7, #2188]	; 0x88c
 8003626:	f7fd fc33 	bl	8000e90 <SMLF_ParseGetPPRespFile>
 800362a:	f8c7 0888 	str.w	r0, [r7, #2184]	; 0x888
 800362e:	f8d7 3888 	ldr.w	r3, [r7, #2184]	; 0x888
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <StartDefaultTask+0x15c>
 8003636:	f240 1285 	movw	r2, #389	; 0x185
 800363a:	491d      	ldr	r1, [pc, #116]	; (80036b0 <StartDefaultTask+0x1b4>)
 800363c:	481d      	ldr	r0, [pc, #116]	; (80036b4 <StartDefaultTask+0x1b8>)
 800363e:	f00d f9d9 	bl	80109f4 <iprintf>
 8003642:	f8d7 0888 	ldr.w	r0, [r7, #2184]	; 0x888
 8003646:	f7fc ff9b 	bl	8000580 <LMN_GetErrorMessage>
 800364a:	4603      	mov	r3, r0
 800364c:	4618      	mov	r0, r3
 800364e:	f00d f9d1 	bl	80109f4 <iprintf>
 8003652:	4819      	ldr	r0, [pc, #100]	; (80036b8 <StartDefaultTask+0x1bc>)
 8003654:	f00d fa42 	bl	8010adc <puts>

		//use tempData here!!!
		uint64_t Value = tempData->Data.CReg.Value.UInt64;
 8003658:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 800365c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003660:	f607 0278 	addw	r2, r7, #2168	; 0x878
 8003664:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t Uart2Buf[100];
		sprintf((char*)Uart2Buf,"SpannungL1: %4lu\n",Value);
 8003668:	f107 000c 	add.w	r0, r7, #12
 800366c:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	4913      	ldr	r1, [pc, #76]	; (80036c4 <StartDefaultTask+0x1c8>)
 8003676:	f00d fa6d 	bl	8010b54 <siprintf>
		HAL_UART_Transmit(&huart2, Uart2Buf, 17, 400);
 800367a:	f107 010c 	add.w	r1, r7, #12
 800367e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003682:	2211      	movs	r2, #17
 8003684:	4810      	ldr	r0, [pc, #64]	; (80036c8 <StartDefaultTask+0x1cc>)
 8003686:	f002 faa5 	bl	8005bd4 <HAL_UART_Transmit>

		OBIS_DataFreeChain(tempData);//free data chain
 800368a:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd f883 	bl	800079a <OBIS_DataFreeChain>
		SMLF_FileFree(tempReq);//free sml files...
 8003694:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8003698:	4618      	mov	r0, r3
 800369a:	f7fd f892 	bl	80007c2 <SMLF_FileFree>
		SMLF_FileFree(tempResp);
 800369e:	f8d7 088c 	ldr.w	r0, [r7, #2188]	; 0x88c
 80036a2:	f7fd f88e 	bl	80007c2 <SMLF_FileFree>


    osDelay(10000);
 80036a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80036aa:	f003 fa7f 	bl	8006bac <osDelay>
  {
 80036ae:	e72b      	b.n	8003508 <StartDefaultTask+0xc>
 80036b0:	08012600 	.word	0x08012600
 80036b4:	080118f8 	.word	0x080118f8
 80036b8:	08011908 	.word	0x08011908
 80036bc:	48000800 	.word	0x48000800
 80036c0:	20021844 	.word	0x20021844
 80036c4:	0801190c 	.word	0x0801190c
 80036c8:	200218c8 	.word	0x200218c8

080036cc <StarttoggleLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarttoggleLEDTask */
void StarttoggleLEDTask(void *argument)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarttoggleLEDTask */
  /* Infinite loop */
  while(1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80036d4:	2120      	movs	r1, #32
 80036d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036da:	f000 fd6d 	bl	80041b8 <HAL_GPIO_TogglePin>
	  osDelay(800);
 80036de:	f44f 7048 	mov.w	r0, #800	; 0x320
 80036e2:	f003 fa63 	bl	8006bac <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80036e6:	e7f5      	b.n	80036d4 <StarttoggleLEDTask+0x8>

080036e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036fa:	f000 fa65 	bl	8003bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40001000 	.word	0x40001000

0800370c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003710:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003712:	e7fe      	b.n	8003712 <Error_Handler+0x6>

08003714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_MspInit+0x4c>)
 800371c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371e:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_MspInit+0x4c>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6613      	str	r3, [r2, #96]	; 0x60
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_MspInit+0x4c>)
 8003728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_MspInit+0x4c>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <HAL_MspInit+0x4c>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_MspInit+0x4c>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	210f      	movs	r1, #15
 800374e:	f06f 0001 	mvn.w	r0, #1
 8003752:	f000 fb33 	bl	8003dbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000

08003764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	; 0x30
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 031c 	add.w	r3, r7, #28
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a36      	ldr	r2, [pc, #216]	; (800385c <HAL_UART_MspInit+0xf8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d131      	bne.n	80037ea <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003786:	4b36      	ldr	r3, [pc, #216]	; (8003860 <HAL_UART_MspInit+0xfc>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	4a35      	ldr	r2, [pc, #212]	; (8003860 <HAL_UART_MspInit+0xfc>)
 800378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003790:	6593      	str	r3, [r2, #88]	; 0x58
 8003792:	4b33      	ldr	r3, [pc, #204]	; (8003860 <HAL_UART_MspInit+0xfc>)
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	4b30      	ldr	r3, [pc, #192]	; (8003860 <HAL_UART_MspInit+0xfc>)
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	4a2f      	ldr	r2, [pc, #188]	; (8003860 <HAL_UART_MspInit+0xfc>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037aa:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <HAL_UART_MspInit+0xfc>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80037b6:	230c      	movs	r3, #12
 80037b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c2:	2303      	movs	r3, #3
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037c6:	2307      	movs	r3, #7
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ca:	f107 031c 	add.w	r3, r7, #28
 80037ce:	4619      	mov	r1, r3
 80037d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d4:	f000 fb5e 	bl	8003e94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	2105      	movs	r1, #5
 80037dc:	2026      	movs	r0, #38	; 0x26
 80037de:	f000 faed 	bl	8003dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037e2:	2026      	movs	r0, #38	; 0x26
 80037e4:	f000 fb06 	bl	8003df4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037e8:	e034      	b.n	8003854 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_UART_MspInit+0x100>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d12f      	bne.n	8003854 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <HAL_UART_MspInit+0xfc>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <HAL_UART_MspInit+0xfc>)
 80037fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003800:	4b17      	ldr	r3, [pc, #92]	; (8003860 <HAL_UART_MspInit+0xfc>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <HAL_UART_MspInit+0xfc>)
 800380e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003810:	4a13      	ldr	r2, [pc, #76]	; (8003860 <HAL_UART_MspInit+0xfc>)
 8003812:	f043 0304 	orr.w	r3, r3, #4
 8003816:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_UART_MspInit+0xfc>)
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003824:	2330      	movs	r3, #48	; 0x30
 8003826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	2302      	movs	r3, #2
 800382a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003830:	2303      	movs	r3, #3
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003834:	2307      	movs	r3, #7
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003838:	f107 031c 	add.w	r3, r7, #28
 800383c:	4619      	mov	r1, r3
 800383e:	480a      	ldr	r0, [pc, #40]	; (8003868 <HAL_UART_MspInit+0x104>)
 8003840:	f000 fb28 	bl	8003e94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003844:	2200      	movs	r2, #0
 8003846:	2105      	movs	r1, #5
 8003848:	2027      	movs	r0, #39	; 0x27
 800384a:	f000 fab7 	bl	8003dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800384e:	2027      	movs	r0, #39	; 0x27
 8003850:	f000 fad0 	bl	8003df4 <HAL_NVIC_EnableIRQ>
}
 8003854:	bf00      	nop
 8003856:	3730      	adds	r7, #48	; 0x30
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40004400 	.word	0x40004400
 8003860:	40021000 	.word	0x40021000
 8003864:	40004800 	.word	0x40004800
 8003868:	48000800 	.word	0x48000800

0800386c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08c      	sub	sp, #48	; 0x30
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800387c:	2200      	movs	r2, #0
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	2036      	movs	r0, #54	; 0x36
 8003882:	f000 fa9b 	bl	8003dbc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003886:	2036      	movs	r0, #54	; 0x36
 8003888:	f000 fab4 	bl	8003df4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <HAL_InitTick+0x9c>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <HAL_InitTick+0x9c>)
 8003892:	f043 0310 	orr.w	r3, r3, #16
 8003896:	6593      	str	r3, [r2, #88]	; 0x58
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <HAL_InitTick+0x9c>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038a4:	f107 0210 	add.w	r2, r7, #16
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 fac4 	bl	8004e3c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038b4:	f001 fa96 	bl	8004de4 <HAL_RCC_GetPCLK1Freq>
 80038b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	4a13      	ldr	r2, [pc, #76]	; (800390c <HAL_InitTick+0xa0>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0c9b      	lsrs	r3, r3, #18
 80038c4:	3b01      	subs	r3, #1
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_InitTick+0xa4>)
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <HAL_InitTick+0xa8>)
 80038cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <HAL_InitTick+0xa4>)
 80038d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038d6:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <HAL_InitTick+0xa4>)
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <HAL_InitTick+0xa4>)
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_InitTick+0xa4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80038e8:	4809      	ldr	r0, [pc, #36]	; (8003910 <HAL_InitTick+0xa4>)
 80038ea:	f001 fe93 	bl	8005614 <HAL_TIM_Base_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80038f4:	4806      	ldr	r0, [pc, #24]	; (8003910 <HAL_InitTick+0xa4>)
 80038f6:	f001 feef 	bl	80056d8 <HAL_TIM_Base_Start_IT>
 80038fa:	4603      	mov	r3, r0
 80038fc:	e000      	b.n	8003900 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
}
 8003900:	4618      	mov	r0, r3
 8003902:	3730      	adds	r7, #48	; 0x30
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	431bde83 	.word	0x431bde83
 8003910:	20021948 	.word	0x20021948
 8003914:	40001000 	.word	0x40001000

08003918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800391c:	e7fe      	b.n	800391c <NMI_Handler+0x4>

0800391e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003922:	e7fe      	b.n	8003922 <HardFault_Handler+0x4>

08003924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003928:	e7fe      	b.n	8003928 <MemManage_Handler+0x4>

0800392a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800392e:	e7fe      	b.n	800392e <BusFault_Handler+0x4>

08003930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003934:	e7fe      	b.n	8003934 <UsageFault_Handler+0x4>

08003936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003936:	b480      	push	{r7}
 8003938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <USART2_IRQHandler+0x10>)
 800394a:	f002 faa3 	bl	8005e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200218c8 	.word	0x200218c8

08003958 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <USART3_IRQHandler+0x10>)
 800395e:	f002 fa99 	bl	8005e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20021844 	.word	0x20021844

0800396c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <TIM6_DAC_IRQHandler+0x10>)
 8003972:	f001 ff0d 	bl	8005790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20021948 	.word	0x20021948

08003980 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e00a      	b.n	80039a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003992:	f3af 8000 	nop.w
 8003996:	4601      	mov	r1, r0
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	60ba      	str	r2, [r7, #8]
 800399e:	b2ca      	uxtb	r2, r1
 80039a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	3301      	adds	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	dbf0      	blt.n	8003992 <_read+0x12>
	}

return len;
 80039b0:	687b      	ldr	r3, [r7, #4]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e009      	b.n	80039e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	60ba      	str	r2, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	3301      	adds	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	dbf1      	blt.n	80039cc <_write+0x12>
	}
	return len;
 80039e8:	687b      	ldr	r3, [r7, #4]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_close>:

int _close(int file)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
	return -1;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a1a:	605a      	str	r2, [r3, #4]
	return 0;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <_isatty>:

int _isatty(int file)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
	return 1;
 8003a32:	2301      	movs	r3, #1
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a64:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <_sbrk+0x5c>)
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <_sbrk+0x60>)
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <_sbrk+0x64>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <_sbrk+0x64>)
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <_sbrk+0x68>)
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <_sbrk+0x64>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d207      	bcs.n	8003a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a8c:	f00c fc94 	bl	80103b8 <__errno>
 8003a90:	4602      	mov	r2, r0
 8003a92:	230c      	movs	r3, #12
 8003a94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	e009      	b.n	8003ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <_sbrk+0x64>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <_sbrk+0x64>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	4a05      	ldr	r2, [pc, #20]	; (8003ac0 <_sbrk+0x64>)
 8003aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20028000 	.word	0x20028000
 8003abc:	00000400 	.word	0x00000400
 8003ac0:	20000324 	.word	0x20000324
 8003ac4:	200219e0 	.word	0x200219e0

08003ac8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003acc:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <SystemInit+0x64>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <SystemInit+0x64>)
 8003ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <SystemInit+0x68>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <SystemInit+0x68>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <SystemInit+0x68>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <SystemInit+0x68>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <SystemInit+0x68>)
 8003af4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003af8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003afc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <SystemInit+0x68>)
 8003b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <SystemInit+0x68>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <SystemInit+0x68>)
 8003b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <SystemInit+0x68>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <SystemInit+0x64>)
 8003b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000ed00 	.word	0xe000ed00
 8003b30:	40021000 	.word	0x40021000

08003b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b38:	f7ff ffc6 	bl	8003ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b3e:	e003      	b.n	8003b48 <LoopCopyDataInit>

08003b40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b46:	3104      	adds	r1, #4

08003b48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b48:	480a      	ldr	r0, [pc, #40]	; (8003b74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b50:	d3f6      	bcc.n	8003b40 <CopyDataInit>
	ldr	r2, =_sbss
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b54:	e002      	b.n	8003b5c <LoopFillZerobss>

08003b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b58:	f842 3b04 	str.w	r3, [r2], #4

08003b5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <LoopForever+0x16>)
	cmp	r2, r3
 8003b5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b60:	d3f9      	bcc.n	8003b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b62:	f00c fc2f 	bl	80103c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b66:	f7ff fb4d 	bl	8003204 <main>

08003b6a <LoopForever>:

LoopForever:
    b LoopForever
 8003b6a:	e7fe      	b.n	8003b6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b6c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8003b70:	08012738 	.word	0x08012738
	ldr	r0, =_sdata
 8003b74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b78:	20000300 	.word	0x20000300
	ldr	r2, =_sbss
 8003b7c:	20000300 	.word	0x20000300
	ldr	r3, = _ebss
 8003b80:	200219dc 	.word	0x200219dc

08003b84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b84:	e7fe      	b.n	8003b84 <ADC1_IRQHandler>
	...

08003b88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <HAL_Init+0x3c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <HAL_Init+0x3c>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	f000 f901 	bl	8003da6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f7ff fe61 	bl	800386c <HAL_InitTick>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	71fb      	strb	r3, [r7, #7]
 8003bb4:	e001      	b.n	8003bba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bb6:	f7ff fdad 	bl	8003714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bba:	79fb      	ldrb	r3, [r7, #7]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40022000 	.word	0x40022000

08003bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_IncTick+0x20>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_IncTick+0x24>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a04      	ldr	r2, [pc, #16]	; (8003bec <HAL_IncTick+0x24>)
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000088 	.word	0x20000088
 8003bec:	20021994 	.word	0x20021994

08003bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_GetTick+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20021994 	.word	0x20021994

08003c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff ffee 	bl	8003bf0 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d005      	beq.n	8003c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <HAL_Delay+0x40>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c2e:	bf00      	nop
 8003c30:	f7ff ffde 	bl	8003bf0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d8f7      	bhi.n	8003c30 <HAL_Delay+0x28>
  {
  }
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000088 	.word	0x20000088

08003c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <__NVIC_SetPriorityGrouping+0x44>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c7e:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <__NVIC_SetPriorityGrouping+0x44>)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	60d3      	str	r3, [r2, #12]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c98:	4b04      	ldr	r3, [pc, #16]	; (8003cac <__NVIC_GetPriorityGrouping+0x18>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	f003 0307 	and.w	r3, r3, #7
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	db0b      	blt.n	8003cda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	f003 021f 	and.w	r2, r3, #31
 8003cc8:	4907      	ldr	r1, [pc, #28]	; (8003ce8 <__NVIC_EnableIRQ+0x38>)
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000e100 	.word	0xe000e100

08003cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	6039      	str	r1, [r7, #0]
 8003cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	db0a      	blt.n	8003d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	490c      	ldr	r1, [pc, #48]	; (8003d38 <__NVIC_SetPriority+0x4c>)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	0112      	lsls	r2, r2, #4
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	440b      	add	r3, r1
 8003d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d14:	e00a      	b.n	8003d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	4908      	ldr	r1, [pc, #32]	; (8003d3c <__NVIC_SetPriority+0x50>)
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	3b04      	subs	r3, #4
 8003d24:	0112      	lsls	r2, r2, #4
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	440b      	add	r3, r1
 8003d2a:	761a      	strb	r2, [r3, #24]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000e100 	.word	0xe000e100
 8003d3c:	e000ed00 	.word	0xe000ed00

08003d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	; 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f1c3 0307 	rsb	r3, r3, #7
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	bf28      	it	cs
 8003d5e:	2304      	movcs	r3, #4
 8003d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2b06      	cmp	r3, #6
 8003d68:	d902      	bls.n	8003d70 <NVIC_EncodePriority+0x30>
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3b03      	subs	r3, #3
 8003d6e:	e000      	b.n	8003d72 <NVIC_EncodePriority+0x32>
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	f04f 32ff 	mov.w	r2, #4294967295
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	401a      	ands	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d88:	f04f 31ff 	mov.w	r1, #4294967295
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	43d9      	mvns	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d98:	4313      	orrs	r3, r2
         );
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3724      	adds	r7, #36	; 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ff4c 	bl	8003c4c <__NVIC_SetPriorityGrouping>
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dce:	f7ff ff61 	bl	8003c94 <__NVIC_GetPriorityGrouping>
 8003dd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	6978      	ldr	r0, [r7, #20]
 8003dda:	f7ff ffb1 	bl	8003d40 <NVIC_EncodePriority>
 8003dde:	4602      	mov	r2, r0
 8003de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff80 	bl	8003cec <__NVIC_SetPriority>
}
 8003dec:	bf00      	nop
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff ff54 	bl	8003cb0 <__NVIC_EnableIRQ>
}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d005      	beq.n	8003e34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
 8003e32:	e029      	b.n	8003e88 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 020e 	bic.w	r2, r2, #14
 8003e42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f003 021c 	and.w	r2, r3, #28
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	2101      	movs	r1, #1
 8003e62:	fa01 f202 	lsl.w	r2, r1, r2
 8003e66:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	4798      	blx	r3
    }
  }
  return status;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea2:	e154      	b.n	800414e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8146 	beq.w	8004148 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d00b      	beq.n	8003edc <HAL_GPIO_Init+0x48>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d007      	beq.n	8003edc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ed0:	2b11      	cmp	r3, #17
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b12      	cmp	r3, #18
 8003eda:	d130      	bne.n	8003f3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f12:	2201      	movs	r2, #1
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	f003 0201 	and.w	r2, r3, #1
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	2203      	movs	r2, #3
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4013      	ands	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0xea>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b12      	cmp	r3, #18
 8003f7c:	d123      	bne.n	8003fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	08da      	lsrs	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3208      	adds	r2, #8
 8003f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	220f      	movs	r2, #15
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	08da      	lsrs	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3208      	adds	r2, #8
 8003fc0:	6939      	ldr	r1, [r7, #16]
 8003fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0203 	and.w	r2, r3, #3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80a0 	beq.w	8004148 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004008:	4b58      	ldr	r3, [pc, #352]	; (800416c <HAL_GPIO_Init+0x2d8>)
 800400a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400c:	4a57      	ldr	r2, [pc, #348]	; (800416c <HAL_GPIO_Init+0x2d8>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6613      	str	r3, [r2, #96]	; 0x60
 8004014:	4b55      	ldr	r3, [pc, #340]	; (800416c <HAL_GPIO_Init+0x2d8>)
 8004016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004020:	4a53      	ldr	r2, [pc, #332]	; (8004170 <HAL_GPIO_Init+0x2dc>)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	3302      	adds	r3, #2
 8004028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	220f      	movs	r2, #15
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800404a:	d019      	beq.n	8004080 <HAL_GPIO_Init+0x1ec>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a49      	ldr	r2, [pc, #292]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <HAL_GPIO_Init+0x1e8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a48      	ldr	r2, [pc, #288]	; (8004178 <HAL_GPIO_Init+0x2e4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00d      	beq.n	8004078 <HAL_GPIO_Init+0x1e4>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a47      	ldr	r2, [pc, #284]	; (800417c <HAL_GPIO_Init+0x2e8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d007      	beq.n	8004074 <HAL_GPIO_Init+0x1e0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a46      	ldr	r2, [pc, #280]	; (8004180 <HAL_GPIO_Init+0x2ec>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d101      	bne.n	8004070 <HAL_GPIO_Init+0x1dc>
 800406c:	2304      	movs	r3, #4
 800406e:	e008      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004070:	2307      	movs	r3, #7
 8004072:	e006      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004074:	2303      	movs	r3, #3
 8004076:	e004      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004078:	2302      	movs	r3, #2
 800407a:	e002      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004080:	2300      	movs	r3, #0
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	f002 0203 	and.w	r2, r2, #3
 8004088:	0092      	lsls	r2, r2, #2
 800408a:	4093      	lsls	r3, r2
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004092:	4937      	ldr	r1, [pc, #220]	; (8004170 <HAL_GPIO_Init+0x2dc>)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3302      	adds	r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80040a0:	4b38      	ldr	r3, [pc, #224]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040c4:	4a2f      	ldr	r2, [pc, #188]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040ee:	4a25      	ldr	r2, [pc, #148]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004118:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004142:	4a10      	ldr	r2, [pc, #64]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3301      	adds	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	f47f aea3 	bne.w	8003ea4 <HAL_GPIO_Init+0x10>
  }
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000
 8004170:	40010000 	.word	0x40010000
 8004174:	48000400 	.word	0x48000400
 8004178:	48000800 	.word	0x48000800
 800417c:	48000c00 	.word	0x48000c00
 8004180:	48001000 	.word	0x48001000
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
 8004194:	4613      	mov	r3, r2
 8004196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004198:	787b      	ldrb	r3, [r7, #1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041a4:	e002      	b.n	80041ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	041a      	lsls	r2, r3, #16
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43d9      	mvns	r1, r3
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	400b      	ands	r3, r1
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	619a      	str	r2, [r3, #24]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <HAL_PWREx_GetVoltageRange+0x18>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40007000 	.word	0x40007000

08004208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004216:	d130      	bne.n	800427a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004218:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004224:	d038      	beq.n	8004298 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800422e:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004234:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004236:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2232      	movs	r2, #50	; 0x32
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	0c9b      	lsrs	r3, r3, #18
 8004248:	3301      	adds	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800424c:	e002      	b.n	8004254 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3b01      	subs	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004254:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004260:	d102      	bne.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f2      	bne.n	800424e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004268:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004274:	d110      	bne.n	8004298 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e00f      	b.n	800429a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004286:	d007      	beq.n	8004298 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004288:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004290:	4a05      	ldr	r2, [pc, #20]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004296:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40007000 	.word	0x40007000
 80042ac:	20000080 	.word	0x20000080
 80042b0:	431bde83 	.word	0x431bde83

080042b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f000 bc11 	b.w	8004aea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c8:	4ba0      	ldr	r3, [pc, #640]	; (800454c <HAL_RCC_OscConfig+0x298>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d2:	4b9e      	ldr	r3, [pc, #632]	; (800454c <HAL_RCC_OscConfig+0x298>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80e4 	beq.w	80044b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_RCC_OscConfig+0x4c>
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	f040 808b 	bne.w	800440e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	f040 8087 	bne.w	800440e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004300:	4b92      	ldr	r3, [pc, #584]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_OscConfig+0x64>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e3e8      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	4b8b      	ldr	r3, [pc, #556]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d004      	beq.n	8004332 <HAL_RCC_OscConfig+0x7e>
 8004328:	4b88      	ldr	r3, [pc, #544]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004330:	e005      	b.n	800433e <HAL_RCC_OscConfig+0x8a>
 8004332:	4b86      	ldr	r3, [pc, #536]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800433e:	4293      	cmp	r3, r2
 8004340:	d223      	bcs.n	800438a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fdaa 	bl	8004ea0 <RCC_SetFlashLatencyFromMSIRange>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e3c9      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004356:	4b7d      	ldr	r3, [pc, #500]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a7c      	ldr	r2, [pc, #496]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800435c:	f043 0308 	orr.w	r3, r3, #8
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b7a      	ldr	r3, [pc, #488]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4977      	ldr	r1, [pc, #476]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004374:	4b75      	ldr	r3, [pc, #468]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	4972      	ldr	r1, [pc, #456]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
 8004388:	e025      	b.n	80043d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800438a:	4b70      	ldr	r3, [pc, #448]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6f      	ldr	r2, [pc, #444]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004390:	f043 0308 	orr.w	r3, r3, #8
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	4b6d      	ldr	r3, [pc, #436]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	496a      	ldr	r1, [pc, #424]	; (800454c <HAL_RCC_OscConfig+0x298>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a8:	4b68      	ldr	r3, [pc, #416]	; (800454c <HAL_RCC_OscConfig+0x298>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	4965      	ldr	r1, [pc, #404]	; (800454c <HAL_RCC_OscConfig+0x298>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fd6a 	bl	8004ea0 <RCC_SetFlashLatencyFromMSIRange>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e389      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d6:	f000 fc6f 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 80043da:	4601      	mov	r1, r0
 80043dc:	4b5b      	ldr	r3, [pc, #364]	; (800454c <HAL_RCC_OscConfig+0x298>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	4a5a      	ldr	r2, [pc, #360]	; (8004550 <HAL_RCC_OscConfig+0x29c>)
 80043e8:	5cd3      	ldrb	r3, [r2, r3]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	fa21 f303 	lsr.w	r3, r1, r3
 80043f2:	4a58      	ldr	r2, [pc, #352]	; (8004554 <HAL_RCC_OscConfig+0x2a0>)
 80043f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043f6:	4b58      	ldr	r3, [pc, #352]	; (8004558 <HAL_RCC_OscConfig+0x2a4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fa36 	bl	800386c <HAL_InitTick>
 8004400:	4603      	mov	r3, r0
 8004402:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d052      	beq.n	80044b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	e36d      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d032      	beq.n	800447c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004416:	4b4d      	ldr	r3, [pc, #308]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a4c      	ldr	r2, [pc, #304]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004422:	f7ff fbe5 	bl	8003bf0 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800442a:	f7ff fbe1 	bl	8003bf0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e356      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800443c:	4b43      	ldr	r3, [pc, #268]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004448:	4b40      	ldr	r3, [pc, #256]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a3f      	ldr	r2, [pc, #252]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800444e:	f043 0308 	orr.w	r3, r3, #8
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b3d      	ldr	r3, [pc, #244]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	493a      	ldr	r1, [pc, #232]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004466:	4b39      	ldr	r3, [pc, #228]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	4935      	ldr	r1, [pc, #212]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]
 800447a:	e01a      	b.n	80044b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800447c:	4b33      	ldr	r3, [pc, #204]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a32      	ldr	r2, [pc, #200]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004488:	f7ff fbb2 	bl	8003bf0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004490:	f7ff fbae 	bl	8003bf0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e323      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044a2:	4b2a      	ldr	r3, [pc, #168]	; (800454c <HAL_RCC_OscConfig+0x298>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x1dc>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d073      	beq.n	80045a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_OscConfig+0x21c>
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d10e      	bne.n	80044e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d10b      	bne.n	80044e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_RCC_OscConfig+0x298>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d063      	beq.n	80045a4 <HAL_RCC_OscConfig+0x2f0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d15f      	bne.n	80045a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e300      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f0:	d106      	bne.n	8004500 <HAL_RCC_OscConfig+0x24c>
 80044f2:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_RCC_OscConfig+0x298>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <HAL_RCC_OscConfig+0x298>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e01d      	b.n	800453c <HAL_RCC_OscConfig+0x288>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x270>
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a0f      	ldr	r2, [pc, #60]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b0d      	ldr	r3, [pc, #52]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a0c      	ldr	r2, [pc, #48]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0x288>
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a08      	ldr	r2, [pc, #32]	; (800454c <HAL_RCC_OscConfig+0x298>)
 800452a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a05      	ldr	r2, [pc, #20]	; (800454c <HAL_RCC_OscConfig+0x298>)
 8004536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7ff fb54 	bl	8003bf0 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454a:	e010      	b.n	800456e <HAL_RCC_OscConfig+0x2ba>
 800454c:	40021000 	.word	0x40021000
 8004550:	08012614 	.word	0x08012614
 8004554:	20000080 	.word	0x20000080
 8004558:	20000084 	.word	0x20000084
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455c:	f7ff fb48 	bl	8003bf0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e2bd      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800456e:	4baf      	ldr	r3, [pc, #700]	; (800482c <HAL_RCC_OscConfig+0x578>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x2a8>
 800457a:	e014      	b.n	80045a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7ff fb38 	bl	8003bf0 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004584:	f7ff fb34 	bl	8003bf0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	; 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e2a9      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004596:	4ba5      	ldr	r3, [pc, #660]	; (800482c <HAL_RCC_OscConfig+0x578>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x2d0>
 80045a2:	e000      	b.n	80045a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d060      	beq.n	8004674 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_OscConfig+0x310>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b0c      	cmp	r3, #12
 80045bc:	d119      	bne.n	80045f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d116      	bne.n	80045f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c4:	4b99      	ldr	r3, [pc, #612]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_OscConfig+0x328>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e286      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045dc:	4b93      	ldr	r3, [pc, #588]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	4990      	ldr	r1, [pc, #576]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f0:	e040      	b.n	8004674 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d023      	beq.n	8004642 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045fa:	4b8c      	ldr	r3, [pc, #560]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a8b      	ldr	r2, [pc, #556]	; (800482c <HAL_RCC_OscConfig+0x578>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004606:	f7ff faf3 	bl	8003bf0 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460e:	f7ff faef 	bl	8003bf0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e264      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004620:	4b82      	ldr	r3, [pc, #520]	; (800482c <HAL_RCC_OscConfig+0x578>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462c:	4b7f      	ldr	r3, [pc, #508]	; (800482c <HAL_RCC_OscConfig+0x578>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	497c      	ldr	r1, [pc, #496]	; (800482c <HAL_RCC_OscConfig+0x578>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
 8004640:	e018      	b.n	8004674 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004642:	4b7a      	ldr	r3, [pc, #488]	; (800482c <HAL_RCC_OscConfig+0x578>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a79      	ldr	r2, [pc, #484]	; (800482c <HAL_RCC_OscConfig+0x578>)
 8004648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800464c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7ff facf 	bl	8003bf0 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004656:	f7ff facb 	bl	8003bf0 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e240      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004668:	4b70      	ldr	r3, [pc, #448]	; (800482c <HAL_RCC_OscConfig+0x578>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d03c      	beq.n	80046fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01c      	beq.n	80046c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004688:	4b68      	ldr	r3, [pc, #416]	; (800482c <HAL_RCC_OscConfig+0x578>)
 800468a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468e:	4a67      	ldr	r2, [pc, #412]	; (800482c <HAL_RCC_OscConfig+0x578>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7ff faaa 	bl	8003bf0 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a0:	f7ff faa6 	bl	8003bf0 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e21b      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046b2:	4b5e      	ldr	r3, [pc, #376]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80046b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0ef      	beq.n	80046a0 <HAL_RCC_OscConfig+0x3ec>
 80046c0:	e01b      	b.n	80046fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c2:	4b5a      	ldr	r3, [pc, #360]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80046c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c8:	4a58      	ldr	r2, [pc, #352]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d2:	f7ff fa8d 	bl	8003bf0 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046da:	f7ff fa89 	bl	8003bf0 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e1fe      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ec:	4b4f      	ldr	r3, [pc, #316]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80046ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1ef      	bne.n	80046da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 80a6 	beq.w	8004854 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004708:	2300      	movs	r3, #0
 800470a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800470c:	4b47      	ldr	r3, [pc, #284]	; (800482c <HAL_RCC_OscConfig+0x578>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10d      	bne.n	8004734 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004718:	4b44      	ldr	r3, [pc, #272]	; (800482c <HAL_RCC_OscConfig+0x578>)
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	4a43      	ldr	r2, [pc, #268]	; (800482c <HAL_RCC_OscConfig+0x578>)
 800471e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004722:	6593      	str	r3, [r2, #88]	; 0x58
 8004724:	4b41      	ldr	r3, [pc, #260]	; (800482c <HAL_RCC_OscConfig+0x578>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004730:	2301      	movs	r3, #1
 8004732:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004734:	4b3e      	ldr	r3, [pc, #248]	; (8004830 <HAL_RCC_OscConfig+0x57c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d118      	bne.n	8004772 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004740:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <HAL_RCC_OscConfig+0x57c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3a      	ldr	r2, [pc, #232]	; (8004830 <HAL_RCC_OscConfig+0x57c>)
 8004746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474c:	f7ff fa50 	bl	8003bf0 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004754:	f7ff fa4c 	bl	8003bf0 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1c1      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004766:	4b32      	ldr	r3, [pc, #200]	; (8004830 <HAL_RCC_OscConfig+0x57c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d108      	bne.n	800478c <HAL_RCC_OscConfig+0x4d8>
 800477a:	4b2c      	ldr	r3, [pc, #176]	; (800482c <HAL_RCC_OscConfig+0x578>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	4a2a      	ldr	r2, [pc, #168]	; (800482c <HAL_RCC_OscConfig+0x578>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800478a:	e024      	b.n	80047d6 <HAL_RCC_OscConfig+0x522>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b05      	cmp	r3, #5
 8004792:	d110      	bne.n	80047b6 <HAL_RCC_OscConfig+0x502>
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <HAL_RCC_OscConfig+0x578>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	4a24      	ldr	r2, [pc, #144]	; (800482c <HAL_RCC_OscConfig+0x578>)
 800479c:	f043 0304 	orr.w	r3, r3, #4
 80047a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047a4:	4b21      	ldr	r3, [pc, #132]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	4a20      	ldr	r2, [pc, #128]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047b4:	e00f      	b.n	80047d6 <HAL_RCC_OscConfig+0x522>
 80047b6:	4b1d      	ldr	r3, [pc, #116]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80047be:	f023 0301 	bic.w	r3, r3, #1
 80047c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047c6:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	4a17      	ldr	r2, [pc, #92]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80047ce:	f023 0304 	bic.w	r3, r3, #4
 80047d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d016      	beq.n	800480c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7ff fa07 	bl	8003bf0 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7ff fa03 	bl	8003bf0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e176      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCC_OscConfig+0x578>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ed      	beq.n	80047e6 <HAL_RCC_OscConfig+0x532>
 800480a:	e01a      	b.n	8004842 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480c:	f7ff f9f0 	bl	8003bf0 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004812:	e00f      	b.n	8004834 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7ff f9ec 	bl	8003bf0 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d906      	bls.n	8004834 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e15f      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
 800482a:	bf00      	nop
 800482c:	40021000 	.word	0x40021000
 8004830:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004834:	4baa      	ldr	r3, [pc, #680]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e8      	bne.n	8004814 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004842:	7ffb      	ldrb	r3, [r7, #31]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004848:	4ba5      	ldr	r3, [pc, #660]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	4aa4      	ldr	r2, [pc, #656]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 800484e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004852:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d03c      	beq.n	80048da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01c      	beq.n	80048a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004868:	4b9d      	ldr	r3, [pc, #628]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 800486a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486e:	4a9c      	ldr	r2, [pc, #624]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7ff f9ba 	bl	8003bf0 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004880:	f7ff f9b6 	bl	8003bf0 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e12b      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004892:	4b93      	ldr	r3, [pc, #588]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ef      	beq.n	8004880 <HAL_RCC_OscConfig+0x5cc>
 80048a0:	e01b      	b.n	80048da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048a2:	4b8f      	ldr	r3, [pc, #572]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 80048a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a8:	4a8d      	ldr	r2, [pc, #564]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7ff f99d 	bl	8003bf0 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ba:	f7ff f999 	bl	8003bf0 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e10e      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048cc:	4b84      	ldr	r3, [pc, #528]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 80048ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ef      	bne.n	80048ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8102 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	f040 80c5 	bne.w	8004a78 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048ee:	4b7c      	ldr	r3, [pc, #496]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f003 0203 	and.w	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	429a      	cmp	r2, r3
 8004900:	d12c      	bne.n	800495c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	3b01      	subs	r3, #1
 800490e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d123      	bne.n	800495c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d11b      	bne.n	800495c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d113      	bne.n	800495c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	3b01      	subs	r3, #1
 8004942:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d109      	bne.n	800495c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	085b      	lsrs	r3, r3, #1
 8004954:	3b01      	subs	r3, #1
 8004956:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d067      	beq.n	8004a2c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b0c      	cmp	r3, #12
 8004960:	d062      	beq.n	8004a28 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004962:	4b5f      	ldr	r3, [pc, #380]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e0bb      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004972:	4b5b      	ldr	r3, [pc, #364]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a5a      	ldr	r2, [pc, #360]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004978:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800497c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800497e:	f7ff f937 	bl	8003bf0 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004986:	f7ff f933 	bl	8003bf0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0a8      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004998:	4b51      	ldr	r3, [pc, #324]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f0      	bne.n	8004986 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049a4:	4b4e      	ldr	r3, [pc, #312]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	4b4e      	ldr	r3, [pc, #312]	; (8004ae4 <HAL_RCC_OscConfig+0x830>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049b4:	3a01      	subs	r2, #1
 80049b6:	0112      	lsls	r2, r2, #4
 80049b8:	4311      	orrs	r1, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049be:	0212      	lsls	r2, r2, #8
 80049c0:	4311      	orrs	r1, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049c6:	0852      	lsrs	r2, r2, #1
 80049c8:	3a01      	subs	r2, #1
 80049ca:	0552      	lsls	r2, r2, #21
 80049cc:	4311      	orrs	r1, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049d2:	0852      	lsrs	r2, r2, #1
 80049d4:	3a01      	subs	r2, #1
 80049d6:	0652      	lsls	r2, r2, #25
 80049d8:	4311      	orrs	r1, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049de:	06d2      	lsls	r2, r2, #27
 80049e0:	430a      	orrs	r2, r1
 80049e2:	493f      	ldr	r1, [pc, #252]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049e8:	4b3d      	ldr	r3, [pc, #244]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a3c      	ldr	r2, [pc, #240]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 80049ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049f4:	4b3a      	ldr	r3, [pc, #232]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4a39      	ldr	r2, [pc, #228]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 80049fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a00:	f7ff f8f6 	bl	8003bf0 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a08:	f7ff f8f2 	bl	8003bf0 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e067      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a26:	e05f      	b.n	8004ae8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e05e      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d157      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a38:	4b29      	ldr	r3, [pc, #164]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a28      	ldr	r2, [pc, #160]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a44:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a50:	f7ff f8ce 	bl	8003bf0 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a58:	f7ff f8ca 	bl	8003bf0 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e03f      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x7a4>
 8004a76:	e037      	b.n	8004ae8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d02d      	beq.n	8004ada <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7e:	4b18      	ldr	r3, [pc, #96]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a17      	ldr	r2, [pc, #92]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a88:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d105      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a96:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004a9c:	f023 0303 	bic.w	r3, r3, #3
 8004aa0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	4a0e      	ldr	r2, [pc, #56]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004aa8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7ff f89d 	bl	8003bf0 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aba:	f7ff f899 	bl	8003bf0 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e00e      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004acc:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <HAL_RCC_OscConfig+0x82c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCC_OscConfig+0x806>
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e005      	b.n	8004aea <HAL_RCC_OscConfig+0x836>
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop

08004af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0c8      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b08:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d910      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 0207 	bic.w	r2, r3, #7
 8004b1e:	4961      	ldr	r1, [pc, #388]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b5f      	ldr	r3, [pc, #380]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b0      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d04c      	beq.n	8004bde <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d107      	bne.n	8004b5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4c:	4b56      	ldr	r3, [pc, #344]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d121      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e09e      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d107      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b64:	4b50      	ldr	r3, [pc, #320]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d115      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e092      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d107      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b7c:	4b4a      	ldr	r3, [pc, #296]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e086      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b8c:	4b46      	ldr	r3, [pc, #280]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e07e      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b9c:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 0203 	bic.w	r2, r3, #3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	493f      	ldr	r1, [pc, #252]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bae:	f7ff f81f 	bl	8003bf0 <HAL_GetTick>
 8004bb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb6:	f7ff f81b 	bl	8003bf0 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e066      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bcc:	4b36      	ldr	r3, [pc, #216]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 020c 	and.w	r2, r3, #12
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d1eb      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bea:	4b2f      	ldr	r3, [pc, #188]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	492c      	ldr	r1, [pc, #176]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bfc:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d210      	bcs.n	8004c2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 0207 	bic.w	r2, r3, #7
 8004c12:	4924      	ldr	r1, [pc, #144]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e036      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c38:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4918      	ldr	r1, [pc, #96]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4910      	ldr	r1, [pc, #64]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c6a:	f000 f825 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c6e:	4601      	mov	r1, r0
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	4a0c      	ldr	r2, [pc, #48]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	5cd3      	ldrb	r3, [r2, r3]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	fa21 f303 	lsr.w	r3, r1, r3
 8004c86:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe fdec 	bl	800386c <HAL_InitTick>
 8004c94:	4603      	mov	r3, r0
 8004c96:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c98:	7afb      	ldrb	r3, [r7, #11]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40022000 	.word	0x40022000
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	08012614 	.word	0x08012614
 8004cb0:	20000080 	.word	0x20000080
 8004cb4:	20000084 	.word	0x20000084

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b089      	sub	sp, #36	; 0x24
 8004cbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc6:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x104>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cd0:	4b3a      	ldr	r3, [pc, #232]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x104>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x34>
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b0c      	cmp	r3, #12
 8004ce4:	d121      	bne.n	8004d2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d11e      	bne.n	8004d2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cec:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x104>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cf8:	4b30      	ldr	r3, [pc, #192]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x104>)
 8004cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	e005      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d08:	4b2c      	ldr	r3, [pc, #176]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x104>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d14:	4a2a      	ldr	r2, [pc, #168]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10d      	bne.n	8004d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d102      	bne.n	8004d36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d30:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d32:	61bb      	str	r3, [r7, #24]
 8004d34:	e004      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d3c:	4b22      	ldr	r3, [pc, #136]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d133      	bne.n	8004dae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d46:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x104>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0xa4>
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0xaa>
 8004d5a:	e005      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d5e:	617b      	str	r3, [r7, #20]
      break;
 8004d60:	e005      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d62:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d64:	617b      	str	r3, [r7, #20]
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	617b      	str	r3, [r7, #20]
      break;
 8004d6c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x104>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	3301      	adds	r3, #1
 8004d7a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x104>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	0a1b      	lsrs	r3, r3, #8
 8004d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	fb02 f203 	mul.w	r2, r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d92:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x104>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	0e5b      	lsrs	r3, r3, #25
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	3301      	adds	r3, #1
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dae:	69bb      	ldr	r3, [r7, #24]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3724      	adds	r7, #36	; 0x24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	0801262c 	.word	0x0801262c
 8004dc4:	00f42400 	.word	0x00f42400
 8004dc8:	007a1200 	.word	0x007a1200

08004dcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd0:	4b03      	ldr	r3, [pc, #12]	; (8004de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000080 	.word	0x20000080

08004de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004de8:	f7ff fff0 	bl	8004dcc <HAL_RCC_GetHCLKFreq>
 8004dec:	4601      	mov	r1, r0
 8004dee:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	08012624 	.word	0x08012624

08004e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e14:	f7ff ffda 	bl	8004dcc <HAL_RCC_GetHCLKFreq>
 8004e18:	4601      	mov	r1, r0
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	0adb      	lsrs	r3, r3, #11
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e26:	5cd3      	ldrb	r3, [r2, r3]
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	08012624 	.word	0x08012624

08004e3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	220f      	movs	r2, #15
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0203 	and.w	r2, r3, #3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	08db      	lsrs	r3, r3, #3
 8004e76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <HAL_RCC_GetClockConfig+0x60>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0207 	and.w	r2, r3, #7
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40022000 	.word	0x40022000

08004ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eac:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eb8:	f7ff f998 	bl	80041ec <HAL_PWREx_GetVoltageRange>
 8004ebc:	6178      	str	r0, [r7, #20]
 8004ebe:	e014      	b.n	8004eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eca:	6593      	str	r3, [r2, #88]	; 0x58
 8004ecc:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ed8:	f7ff f988 	bl	80041ec <HAL_PWREx_GetVoltageRange>
 8004edc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ede:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef0:	d10b      	bne.n	8004f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d919      	bls.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2ba0      	cmp	r3, #160	; 0xa0
 8004efc:	d902      	bls.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004efe:	2302      	movs	r3, #2
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e013      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f04:	2301      	movs	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	e010      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d902      	bls.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f10:	2303      	movs	r3, #3
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e00a      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b80      	cmp	r3, #128	; 0x80
 8004f1a:	d102      	bne.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	e004      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d101      	bne.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f28:	2301      	movs	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 0207 	bic.w	r2, r3, #7
 8004f34:	4909      	ldr	r1, [pc, #36]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f3c:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40022000 	.word	0x40022000

08004f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d02f      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f84:	d005      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004f86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004f90:	e00f      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f92:	4b5d      	ldr	r3, [pc, #372]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	4a5c      	ldr	r2, [pc, #368]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f9e:	e00c      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fa44 	bl	8005434 <RCCEx_PLLSAI1_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fb0:	e003      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fb6:	e000      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fba:	7cfb      	ldrb	r3, [r7, #19]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fc0:	4b51      	ldr	r3, [pc, #324]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fce:	494e      	ldr	r1, [pc, #312]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fd6:	e001      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 809e 	beq.w	8005126 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fea:	2300      	movs	r3, #0
 8004fec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fee:	4b46      	ldr	r3, [pc, #280]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004ffe:	2300      	movs	r3, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005004:	4b40      	ldr	r3, [pc, #256]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	4a3f      	ldr	r2, [pc, #252]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800500a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500e:	6593      	str	r3, [r2, #88]	; 0x58
 8005010:	4b3d      	ldr	r3, [pc, #244]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501c:	2301      	movs	r3, #1
 800501e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005020:	4b3a      	ldr	r3, [pc, #232]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a39      	ldr	r2, [pc, #228]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800502c:	f7fe fde0 	bl	8003bf0 <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005032:	e009      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005034:	f7fe fddc 	bl	8003bf0 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d902      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	74fb      	strb	r3, [r7, #19]
        break;
 8005046:	e005      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005048:	4b30      	ldr	r3, [pc, #192]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ef      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8005054:	7cfb      	ldrb	r3, [r7, #19]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d15a      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800505a:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005064:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01e      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	429a      	cmp	r2, r3
 8005074:	d019      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005076:	4b24      	ldr	r3, [pc, #144]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005080:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005082:	4b21      	ldr	r3, [pc, #132]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005088:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800508a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005092:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800509a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050a2:	4a19      	ldr	r2, [pc, #100]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d016      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fe fd9c 	bl	8003bf0 <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ba:	e00b      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fe fd98 	bl	8003bf0 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d902      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	74fb      	strb	r3, [r7, #19]
            break;
 80050d2:	e006      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d4:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0ec      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80050e2:	7cfb      	ldrb	r3, [r7, #19]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10b      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f6:	4904      	ldr	r1, [pc, #16]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050fe:	e009      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005100:	7cfb      	ldrb	r3, [r7, #19]
 8005102:	74bb      	strb	r3, [r7, #18]
 8005104:	e006      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000
 800510c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005110:	7cfb      	ldrb	r3, [r7, #19]
 8005112:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005114:	7c7b      	ldrb	r3, [r7, #17]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d105      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800511a:	4b9e      	ldr	r3, [pc, #632]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	4a9d      	ldr	r2, [pc, #628]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005124:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005132:	4b98      	ldr	r3, [pc, #608]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f023 0203 	bic.w	r2, r3, #3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	4994      	ldr	r1, [pc, #592]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005154:	4b8f      	ldr	r3, [pc, #572]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515a:	f023 020c 	bic.w	r2, r3, #12
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	498c      	ldr	r1, [pc, #560]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005176:	4b87      	ldr	r3, [pc, #540]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	4983      	ldr	r1, [pc, #524]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005198:	4b7e      	ldr	r3, [pc, #504]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	497b      	ldr	r1, [pc, #492]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051ba:	4b76      	ldr	r3, [pc, #472]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	4972      	ldr	r1, [pc, #456]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051dc:	4b6d      	ldr	r3, [pc, #436]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ea:	496a      	ldr	r1, [pc, #424]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051fe:	4b65      	ldr	r3, [pc, #404]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520c:	4961      	ldr	r1, [pc, #388]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005220:	4b5c      	ldr	r3, [pc, #368]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522e:	4959      	ldr	r1, [pc, #356]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005242:	4b54      	ldr	r3, [pc, #336]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	4950      	ldr	r1, [pc, #320]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005264:	4b4b      	ldr	r3, [pc, #300]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	4948      	ldr	r1, [pc, #288]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005286:	4b43      	ldr	r3, [pc, #268]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800528c:	f023 0203 	bic.w	r2, r3, #3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	493f      	ldr	r1, [pc, #252]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d028      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a8:	4b3a      	ldr	r3, [pc, #232]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b6:	4937      	ldr	r1, [pc, #220]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c6:	d106      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c8:	4b32      	ldr	r3, [pc, #200]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a31      	ldr	r2, [pc, #196]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80052ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d2:	60d3      	str	r3, [r2, #12]
 80052d4:	e011      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052de:	d10c      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	2101      	movs	r1, #1
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f8a4 	bl	8005434 <RCCEx_PLLSAI1_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052f0:	7cfb      	ldrb	r3, [r7, #19]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 80052f6:	7cfb      	ldrb	r3, [r7, #19]
 80052f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d028      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005306:	4b23      	ldr	r3, [pc, #140]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	491f      	ldr	r1, [pc, #124]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005324:	d106      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005326:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	4a1a      	ldr	r2, [pc, #104]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800532c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005330:	60d3      	str	r3, [r2, #12]
 8005332:	e011      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800533c:	d10c      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3304      	adds	r3, #4
 8005342:	2101      	movs	r1, #1
 8005344:	4618      	mov	r0, r3
 8005346:	f000 f875 	bl	8005434 <RCCEx_PLLSAI1_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800534e:	7cfb      	ldrb	r3, [r7, #19]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d02b      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005364:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005372:	4908      	ldr	r1, [pc, #32]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005382:	d109      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005384:	4b03      	ldr	r3, [pc, #12]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4a02      	ldr	r2, [pc, #8]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800538a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800538e:	60d3      	str	r3, [r2, #12]
 8005390:	e014      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053a0:	d10c      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3304      	adds	r3, #4
 80053a6:	2101      	movs	r1, #1
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f843 	bl	8005434 <RCCEx_PLLSAI1_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80053b8:	7cfb      	ldrb	r3, [r7, #19]
 80053ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01c      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053c8:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d6:	4916      	ldr	r1, [pc, #88]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053e6:	d10c      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	2102      	movs	r1, #2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f820 	bl	8005434 <RCCEx_PLLSAI1_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80053fe:	7cfb      	ldrb	r3, [r7, #19]
 8005400:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800540e:	4b08      	ldr	r3, [pc, #32]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541c:	4904      	ldr	r1, [pc, #16]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005424:	7cbb      	ldrb	r3, [r7, #18]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40021000 	.word	0x40021000

08005434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005442:	4b73      	ldr	r3, [pc, #460]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d018      	beq.n	8005480 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800544e:	4b70      	ldr	r3, [pc, #448]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0203 	and.w	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d10d      	bne.n	800547a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
       ||
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005466:	4b6a      	ldr	r3, [pc, #424]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
       ||
 8005476:	429a      	cmp	r2, r3
 8005478:	d044      	beq.n	8005504 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	73fb      	strb	r3, [r7, #15]
 800547e:	e041      	b.n	8005504 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d00c      	beq.n	80054a2 <RCCEx_PLLSAI1_Config+0x6e>
 8005488:	2b03      	cmp	r3, #3
 800548a:	d013      	beq.n	80054b4 <RCCEx_PLLSAI1_Config+0x80>
 800548c:	2b01      	cmp	r3, #1
 800548e:	d120      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005490:	4b5f      	ldr	r3, [pc, #380]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d11d      	bne.n	80054d8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a0:	e01a      	b.n	80054d8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054a2:	4b5b      	ldr	r3, [pc, #364]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d116      	bne.n	80054dc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054b2:	e013      	b.n	80054dc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054b4:	4b56      	ldr	r3, [pc, #344]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10f      	bne.n	80054e0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054c0:	4b53      	ldr	r3, [pc, #332]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d109      	bne.n	80054e0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054d0:	e006      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
      break;
 80054d6:	e004      	b.n	80054e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80054d8:	bf00      	nop
 80054da:	e002      	b.n	80054e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80054dc:	bf00      	nop
 80054de:	e000      	b.n	80054e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80054e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10d      	bne.n	8005504 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054e8:	4b49      	ldr	r3, [pc, #292]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6819      	ldr	r1, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	430b      	orrs	r3, r1
 80054fe:	4944      	ldr	r1, [pc, #272]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005500:	4313      	orrs	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d17c      	bne.n	8005604 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800550a:	4b41      	ldr	r3, [pc, #260]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a40      	ldr	r2, [pc, #256]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005510:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005516:	f7fe fb6b 	bl	8003bf0 <HAL_GetTick>
 800551a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800551c:	e009      	b.n	8005532 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800551e:	f7fe fb67 	bl	8003bf0 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d902      	bls.n	8005532 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	73fb      	strb	r3, [r7, #15]
        break;
 8005530:	e005      	b.n	800553e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005532:	4b37      	ldr	r3, [pc, #220]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1ef      	bne.n	800551e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d15f      	bne.n	8005604 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d110      	bne.n	800556c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800554a:	4b31      	ldr	r3, [pc, #196]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005552:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6892      	ldr	r2, [r2, #8]
 800555a:	0211      	lsls	r1, r2, #8
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	68d2      	ldr	r2, [r2, #12]
 8005560:	06d2      	lsls	r2, r2, #27
 8005562:	430a      	orrs	r2, r1
 8005564:	492a      	ldr	r1, [pc, #168]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005566:	4313      	orrs	r3, r2
 8005568:	610b      	str	r3, [r1, #16]
 800556a:	e027      	b.n	80055bc <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d112      	bne.n	8005598 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005572:	4b27      	ldr	r3, [pc, #156]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800557a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6892      	ldr	r2, [r2, #8]
 8005582:	0211      	lsls	r1, r2, #8
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6912      	ldr	r2, [r2, #16]
 8005588:	0852      	lsrs	r2, r2, #1
 800558a:	3a01      	subs	r2, #1
 800558c:	0552      	lsls	r2, r2, #21
 800558e:	430a      	orrs	r2, r1
 8005590:	491f      	ldr	r1, [pc, #124]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	610b      	str	r3, [r1, #16]
 8005596:	e011      	b.n	80055bc <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005598:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6892      	ldr	r2, [r2, #8]
 80055a8:	0211      	lsls	r1, r2, #8
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6952      	ldr	r2, [r2, #20]
 80055ae:	0852      	lsrs	r2, r2, #1
 80055b0:	3a01      	subs	r2, #1
 80055b2:	0652      	lsls	r2, r2, #25
 80055b4:	430a      	orrs	r2, r1
 80055b6:	4916      	ldr	r1, [pc, #88]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055bc:	4b14      	ldr	r3, [pc, #80]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a13      	ldr	r2, [pc, #76]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c8:	f7fe fb12 	bl	8003bf0 <HAL_GetTick>
 80055cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055ce:	e009      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055d0:	f7fe fb0e 	bl	8003bf0 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d902      	bls.n	80055e4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	73fb      	strb	r3, [r7, #15]
          break;
 80055e2:	e005      	b.n	80055f0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055e4:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0ef      	beq.n	80055d0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055f6:	4b06      	ldr	r3, [pc, #24]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	4904      	ldr	r1, [pc, #16]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005600:	4313      	orrs	r3, r2
 8005602:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40021000 	.word	0x40021000

08005614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e049      	b.n	80056ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f841 	bl	80056c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	4619      	mov	r1, r3
 8005652:	4610      	mov	r0, r2
 8005654:	f000 f9e4 	bl	8005a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d001      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e040      	b.n	8005772 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <HAL_TIM_Base_Start_IT+0xa8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x58>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571a:	d009      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x58>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a18      	ldr	r2, [pc, #96]	; (8005784 <HAL_TIM_Base_Start_IT+0xac>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x58>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <HAL_TIM_Base_Start_IT+0xb0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d115      	bne.n	800575c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <HAL_TIM_Base_Start_IT+0xb4>)
 8005738:	4013      	ands	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b06      	cmp	r3, #6
 8005740:	d015      	beq.n	800576e <HAL_TIM_Base_Start_IT+0x96>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005748:	d011      	beq.n	800576e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0201 	orr.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575a:	e008      	b.n	800576e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e000      	b.n	8005770 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40000400 	.word	0x40000400
 8005788:	40014000 	.word	0x40014000
 800578c:	00010007 	.word	0x00010007

08005790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d122      	bne.n	80057ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d11b      	bne.n	80057ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0202 	mvn.w	r2, #2
 80057bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f905 	bl	80059e2 <HAL_TIM_IC_CaptureCallback>
 80057d8:	e005      	b.n	80057e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8f7 	bl	80059ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f908 	bl	80059f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d122      	bne.n	8005840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b04      	cmp	r3, #4
 8005806:	d11b      	bne.n	8005840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0204 	mvn.w	r2, #4
 8005810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f8db 	bl	80059e2 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8cd 	bl	80059ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f8de 	bl	80059f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b08      	cmp	r3, #8
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b08      	cmp	r3, #8
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0208 	mvn.w	r2, #8
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2204      	movs	r2, #4
 800586a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f8b1 	bl	80059e2 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f8a3 	bl	80059ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f8b4 	bl	80059f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b10      	cmp	r3, #16
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0210 	mvn.w	r2, #16
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2208      	movs	r2, #8
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f887 	bl	80059e2 <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f879 	bl	80059ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f88a 	bl	80059f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d10e      	bne.n	8005914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	d107      	bne.n	8005914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0201 	mvn.w	r2, #1
 800590c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fd feea 	bl	80036e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d10e      	bne.n	8005940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	2b80      	cmp	r3, #128	; 0x80
 800592e:	d107      	bne.n	8005940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f8e8 	bl	8005b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594e:	d10e      	bne.n	800596e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595a:	2b80      	cmp	r3, #128	; 0x80
 800595c:	d107      	bne.n	800596e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8db 	bl	8005b24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	d10e      	bne.n	800599a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b40      	cmp	r3, #64	; 0x40
 8005988:	d107      	bne.n	800599a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f838 	bl	8005a0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d10e      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d107      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f06f 0220 	mvn.w	r2, #32
 80059be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f89b 	bl	8005afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a2e      	ldr	r2, [pc, #184]	; (8005aec <TIM_Base_SetConfig+0xcc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <TIM_Base_SetConfig+0x28>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3e:	d003      	beq.n	8005a48 <TIM_Base_SetConfig+0x28>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <TIM_Base_SetConfig+0xd0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d108      	bne.n	8005a5a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a23      	ldr	r2, [pc, #140]	; (8005aec <TIM_Base_SetConfig+0xcc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00f      	beq.n	8005a82 <TIM_Base_SetConfig+0x62>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a68:	d00b      	beq.n	8005a82 <TIM_Base_SetConfig+0x62>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a20      	ldr	r2, [pc, #128]	; (8005af0 <TIM_Base_SetConfig+0xd0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <TIM_Base_SetConfig+0x62>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1f      	ldr	r2, [pc, #124]	; (8005af4 <TIM_Base_SetConfig+0xd4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_Base_SetConfig+0x62>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1e      	ldr	r2, [pc, #120]	; (8005af8 <TIM_Base_SetConfig+0xd8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a0c      	ldr	r2, [pc, #48]	; (8005aec <TIM_Base_SetConfig+0xcc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_Base_SetConfig+0xb0>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a0c      	ldr	r2, [pc, #48]	; (8005af4 <TIM_Base_SetConfig+0xd4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0xb0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a0b      	ldr	r2, [pc, #44]	; (8005af8 <TIM_Base_SetConfig+0xd8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d103      	bne.n	8005ad8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	615a      	str	r2, [r3, #20]
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40014400 	.word	0x40014400

08005afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e040      	b.n	8005bcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fd fe02 	bl	8003764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	; 0x24
 8005b64:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fae8 	bl	800614c <UART_SetConfig>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e022      	b.n	8005bcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fd3a 	bl	8006608 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fdc1 	bl	800674c <UART_CheckIdleState>
 8005bca:	4603      	mov	r3, r0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	f040 8081 	bne.w	8005cf0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_UART_Transmit+0x26>
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e079      	b.n	8005cf2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_UART_Transmit+0x38>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e072      	b.n	8005cf2 <HAL_UART_Transmit+0x11e>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2221      	movs	r2, #33	; 0x21
 8005c1e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c20:	f7fd ffe6 	bl	8003bf0 <HAL_GetTick>
 8005c24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	88fa      	ldrh	r2, [r7, #6]
 8005c2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	88fa      	ldrh	r2, [r7, #6]
 8005c32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d108      	bne.n	8005c52 <HAL_UART_Transmit+0x7e>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	e003      	b.n	8005c5a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005c62:	e02d      	b.n	8005cc0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2180      	movs	r1, #128	; 0x80
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fdb1 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e039      	b.n	8005cf2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10b      	bne.n	8005c9c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	881a      	ldrh	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c90:	b292      	uxth	r2, r2
 8005c92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	3302      	adds	r3, #2
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	e008      	b.n	8005cae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	781a      	ldrb	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	b292      	uxth	r2, r2
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	3301      	adds	r3, #1
 8005cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1cb      	bne.n	8005c64 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2140      	movs	r1, #64	; 0x40
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fd7d 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e005      	b.n	8005cf2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	e000      	b.n	8005cf2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3720      	adds	r7, #32
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b08a      	sub	sp, #40	; 0x28
 8005cfe:	af02      	add	r7, sp, #8
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	603b      	str	r3, [r7, #0]
 8005d06:	4613      	mov	r3, r2
 8005d08:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	f040 80bb 	bne.w	8005e8a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <HAL_UART_Receive+0x26>
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0b3      	b.n	8005e8c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_UART_Receive+0x38>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e0ac      	b.n	8005e8c <HAL_UART_Receive+0x192>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2222      	movs	r2, #34	; 0x22
 8005d44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005d46:	f7fd ff53 	bl	8003bf0 <HAL_GetTick>
 8005d4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	88fa      	ldrh	r2, [r7, #6]
 8005d50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	88fa      	ldrh	r2, [r7, #6]
 8005d58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d64:	d10e      	bne.n	8005d84 <HAL_UART_Receive+0x8a>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d105      	bne.n	8005d7a <HAL_UART_Receive+0x80>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d78:	e02d      	b.n	8005dd6 <HAL_UART_Receive+0xdc>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	22ff      	movs	r2, #255	; 0xff
 8005d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d82:	e028      	b.n	8005dd6 <HAL_UART_Receive+0xdc>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10d      	bne.n	8005da8 <HAL_UART_Receive+0xae>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d104      	bne.n	8005d9e <HAL_UART_Receive+0xa4>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	22ff      	movs	r2, #255	; 0xff
 8005d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d9c:	e01b      	b.n	8005dd6 <HAL_UART_Receive+0xdc>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	227f      	movs	r2, #127	; 0x7f
 8005da2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005da6:	e016      	b.n	8005dd6 <HAL_UART_Receive+0xdc>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005db0:	d10d      	bne.n	8005dce <HAL_UART_Receive+0xd4>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <HAL_UART_Receive+0xca>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	227f      	movs	r2, #127	; 0x7f
 8005dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dc2:	e008      	b.n	8005dd6 <HAL_UART_Receive+0xdc>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	223f      	movs	r2, #63	; 0x3f
 8005dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dcc:	e003      	b.n	8005dd6 <HAL_UART_Receive+0xdc>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ddc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de6:	d108      	bne.n	8005dfa <HAL_UART_Receive+0x100>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	e003      	b.n	8005e02 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e0a:	e033      	b.n	8005e74 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2200      	movs	r2, #0
 8005e14:	2120      	movs	r1, #32
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fcdd 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e032      	b.n	8005e8c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10c      	bne.n	8005e46 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	8a7b      	ldrh	r3, [r7, #18]
 8005e36:	4013      	ands	r3, r2
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	3302      	adds	r3, #2
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	e00d      	b.n	8005e62 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	8a7b      	ldrh	r3, [r7, #18]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	4013      	ands	r3, r2
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1c5      	bne.n	8005e0c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3720      	adds	r7, #32
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005eba:	4013      	ands	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d113      	bne.n	8005eec <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d009      	beq.n	8005eec <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8114 	beq.w	800610a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
      }
      return;
 8005eea:	e10e      	b.n	800610a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80d6 	beq.w	80060a0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4b86      	ldr	r3, [pc, #536]	; (800611c <HAL_UART_IRQHandler+0x288>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 80cb 	beq.w	80060a0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00e      	beq.n	8005f32 <HAL_UART_IRQHandler+0x9e>
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d009      	beq.n	8005f32 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2201      	movs	r2, #1
 8005f24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f2a:	f043 0201 	orr.w	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00e      	beq.n	8005f5a <HAL_UART_IRQHandler+0xc6>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f52:	f043 0204 	orr.w	r2, r3, #4
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00e      	beq.n	8005f82 <HAL_UART_IRQHandler+0xee>
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2204      	movs	r2, #4
 8005f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d013      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d104      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fac:	f043 0208 	orr.w	r2, r3, #8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00f      	beq.n	8005fde <HAL_UART_IRQHandler+0x14a>
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd6:	f043 0220 	orr.w	r2, r3, #32
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8093 	beq.w	800610e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00c      	beq.n	800600c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006010:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b40      	cmp	r3, #64	; 0x40
 800601e:	d004      	beq.n	800602a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006026:	2b00      	cmp	r3, #0
 8006028:	d031      	beq.n	800608e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fc4e 	bl	80068cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d123      	bne.n	8006086 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d013      	beq.n	800607e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800605a:	4a31      	ldr	r2, [pc, #196]	; (8006120 <HAL_UART_IRQHandler+0x28c>)
 800605c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006062:	4618      	mov	r0, r3
 8006064:	f7fd fed4 	bl	8003e10 <HAL_DMA_Abort_IT>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d016      	beq.n	800609c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006078:	4610      	mov	r0, r2
 800607a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607c:	e00e      	b.n	800609c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f85a 	bl	8006138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006084:	e00a      	b.n	800609c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f856 	bl	8006138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608c:	e006      	b.n	800609c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f852 	bl	8006138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800609a:	e038      	b.n	800610e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	bf00      	nop
    return;
 800609e:	e036      	b.n	800610e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <HAL_UART_IRQHandler+0x232>
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fc53 	bl	800696a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060c4:	e026      	b.n	8006114 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d008      	beq.n	80060ec <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d017      	beq.n	8006112 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
    }
    return;
 80060ea:	e012      	b.n	8006112 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00e      	beq.n	8006114 <HAL_UART_IRQHandler+0x280>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fc19 	bl	8006938 <UART_EndTransmit_IT>
    return;
 8006106:	bf00      	nop
 8006108:	e004      	b.n	8006114 <HAL_UART_IRQHandler+0x280>
      return;
 800610a:	bf00      	nop
 800610c:	e002      	b.n	8006114 <HAL_UART_IRQHandler+0x280>
    return;
 800610e:	bf00      	nop
 8006110:	e000      	b.n	8006114 <HAL_UART_IRQHandler+0x280>
    return;
 8006112:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006114:	3720      	adds	r7, #32
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	04000120 	.word	0x04000120
 8006120:	0800690d 	.word	0x0800690d

08006124 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800614c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006150:	b088      	sub	sp, #32
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	4313      	orrs	r3, r2
 8006170:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	4ba4      	ldr	r3, [pc, #656]	; (800640c <UART_SetConfig+0x2c0>)
 800617a:	4013      	ands	r3, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	69f9      	ldr	r1, [r7, #28]
 8006182:	430b      	orrs	r3, r1
 8006184:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a9a      	ldr	r2, [pc, #616]	; (8006410 <UART_SetConfig+0x2c4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d004      	beq.n	80061b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a91      	ldr	r2, [pc, #580]	; (8006414 <UART_SetConfig+0x2c8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d121      	bne.n	8006218 <UART_SetConfig+0xcc>
 80061d4:	4b90      	ldr	r3, [pc, #576]	; (8006418 <UART_SetConfig+0x2cc>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d816      	bhi.n	8006210 <UART_SetConfig+0xc4>
 80061e2:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <UART_SetConfig+0x9c>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	080061f9 	.word	0x080061f9
 80061ec:	08006205 	.word	0x08006205
 80061f0:	080061ff 	.word	0x080061ff
 80061f4:	0800620b 	.word	0x0800620b
 80061f8:	2301      	movs	r3, #1
 80061fa:	76fb      	strb	r3, [r7, #27]
 80061fc:	e0be      	b.n	800637c <UART_SetConfig+0x230>
 80061fe:	2302      	movs	r3, #2
 8006200:	76fb      	strb	r3, [r7, #27]
 8006202:	e0bb      	b.n	800637c <UART_SetConfig+0x230>
 8006204:	2304      	movs	r3, #4
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	e0b8      	b.n	800637c <UART_SetConfig+0x230>
 800620a:	2308      	movs	r3, #8
 800620c:	76fb      	strb	r3, [r7, #27]
 800620e:	e0b5      	b.n	800637c <UART_SetConfig+0x230>
 8006210:	2310      	movs	r3, #16
 8006212:	76fb      	strb	r3, [r7, #27]
 8006214:	bf00      	nop
 8006216:	e0b1      	b.n	800637c <UART_SetConfig+0x230>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a7f      	ldr	r2, [pc, #508]	; (800641c <UART_SetConfig+0x2d0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d134      	bne.n	800628c <UART_SetConfig+0x140>
 8006222:	4b7d      	ldr	r3, [pc, #500]	; (8006418 <UART_SetConfig+0x2cc>)
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006228:	f003 030c 	and.w	r3, r3, #12
 800622c:	2b0c      	cmp	r3, #12
 800622e:	d829      	bhi.n	8006284 <UART_SetConfig+0x138>
 8006230:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <UART_SetConfig+0xec>)
 8006232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006236:	bf00      	nop
 8006238:	0800626d 	.word	0x0800626d
 800623c:	08006285 	.word	0x08006285
 8006240:	08006285 	.word	0x08006285
 8006244:	08006285 	.word	0x08006285
 8006248:	08006279 	.word	0x08006279
 800624c:	08006285 	.word	0x08006285
 8006250:	08006285 	.word	0x08006285
 8006254:	08006285 	.word	0x08006285
 8006258:	08006273 	.word	0x08006273
 800625c:	08006285 	.word	0x08006285
 8006260:	08006285 	.word	0x08006285
 8006264:	08006285 	.word	0x08006285
 8006268:	0800627f 	.word	0x0800627f
 800626c:	2300      	movs	r3, #0
 800626e:	76fb      	strb	r3, [r7, #27]
 8006270:	e084      	b.n	800637c <UART_SetConfig+0x230>
 8006272:	2302      	movs	r3, #2
 8006274:	76fb      	strb	r3, [r7, #27]
 8006276:	e081      	b.n	800637c <UART_SetConfig+0x230>
 8006278:	2304      	movs	r3, #4
 800627a:	76fb      	strb	r3, [r7, #27]
 800627c:	e07e      	b.n	800637c <UART_SetConfig+0x230>
 800627e:	2308      	movs	r3, #8
 8006280:	76fb      	strb	r3, [r7, #27]
 8006282:	e07b      	b.n	800637c <UART_SetConfig+0x230>
 8006284:	2310      	movs	r3, #16
 8006286:	76fb      	strb	r3, [r7, #27]
 8006288:	bf00      	nop
 800628a:	e077      	b.n	800637c <UART_SetConfig+0x230>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a63      	ldr	r2, [pc, #396]	; (8006420 <UART_SetConfig+0x2d4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d120      	bne.n	80062d8 <UART_SetConfig+0x18c>
 8006296:	4b60      	ldr	r3, [pc, #384]	; (8006418 <UART_SetConfig+0x2cc>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d00f      	beq.n	80062c4 <UART_SetConfig+0x178>
 80062a4:	2b10      	cmp	r3, #16
 80062a6:	d802      	bhi.n	80062ae <UART_SetConfig+0x162>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <UART_SetConfig+0x16c>
 80062ac:	e010      	b.n	80062d0 <UART_SetConfig+0x184>
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d005      	beq.n	80062be <UART_SetConfig+0x172>
 80062b2:	2b30      	cmp	r3, #48	; 0x30
 80062b4:	d009      	beq.n	80062ca <UART_SetConfig+0x17e>
 80062b6:	e00b      	b.n	80062d0 <UART_SetConfig+0x184>
 80062b8:	2300      	movs	r3, #0
 80062ba:	76fb      	strb	r3, [r7, #27]
 80062bc:	e05e      	b.n	800637c <UART_SetConfig+0x230>
 80062be:	2302      	movs	r3, #2
 80062c0:	76fb      	strb	r3, [r7, #27]
 80062c2:	e05b      	b.n	800637c <UART_SetConfig+0x230>
 80062c4:	2304      	movs	r3, #4
 80062c6:	76fb      	strb	r3, [r7, #27]
 80062c8:	e058      	b.n	800637c <UART_SetConfig+0x230>
 80062ca:	2308      	movs	r3, #8
 80062cc:	76fb      	strb	r3, [r7, #27]
 80062ce:	e055      	b.n	800637c <UART_SetConfig+0x230>
 80062d0:	2310      	movs	r3, #16
 80062d2:	76fb      	strb	r3, [r7, #27]
 80062d4:	bf00      	nop
 80062d6:	e051      	b.n	800637c <UART_SetConfig+0x230>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a51      	ldr	r2, [pc, #324]	; (8006424 <UART_SetConfig+0x2d8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d120      	bne.n	8006324 <UART_SetConfig+0x1d8>
 80062e2:	4b4d      	ldr	r3, [pc, #308]	; (8006418 <UART_SetConfig+0x2cc>)
 80062e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d00f      	beq.n	8006310 <UART_SetConfig+0x1c4>
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d802      	bhi.n	80062fa <UART_SetConfig+0x1ae>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <UART_SetConfig+0x1b8>
 80062f8:	e010      	b.n	800631c <UART_SetConfig+0x1d0>
 80062fa:	2b80      	cmp	r3, #128	; 0x80
 80062fc:	d005      	beq.n	800630a <UART_SetConfig+0x1be>
 80062fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006300:	d009      	beq.n	8006316 <UART_SetConfig+0x1ca>
 8006302:	e00b      	b.n	800631c <UART_SetConfig+0x1d0>
 8006304:	2300      	movs	r3, #0
 8006306:	76fb      	strb	r3, [r7, #27]
 8006308:	e038      	b.n	800637c <UART_SetConfig+0x230>
 800630a:	2302      	movs	r3, #2
 800630c:	76fb      	strb	r3, [r7, #27]
 800630e:	e035      	b.n	800637c <UART_SetConfig+0x230>
 8006310:	2304      	movs	r3, #4
 8006312:	76fb      	strb	r3, [r7, #27]
 8006314:	e032      	b.n	800637c <UART_SetConfig+0x230>
 8006316:	2308      	movs	r3, #8
 8006318:	76fb      	strb	r3, [r7, #27]
 800631a:	e02f      	b.n	800637c <UART_SetConfig+0x230>
 800631c:	2310      	movs	r3, #16
 800631e:	76fb      	strb	r3, [r7, #27]
 8006320:	bf00      	nop
 8006322:	e02b      	b.n	800637c <UART_SetConfig+0x230>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a39      	ldr	r2, [pc, #228]	; (8006410 <UART_SetConfig+0x2c4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d124      	bne.n	8006378 <UART_SetConfig+0x22c>
 800632e:	4b3a      	ldr	r3, [pc, #232]	; (8006418 <UART_SetConfig+0x2cc>)
 8006330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006334:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633c:	d012      	beq.n	8006364 <UART_SetConfig+0x218>
 800633e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006342:	d802      	bhi.n	800634a <UART_SetConfig+0x1fe>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <UART_SetConfig+0x20c>
 8006348:	e012      	b.n	8006370 <UART_SetConfig+0x224>
 800634a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634e:	d006      	beq.n	800635e <UART_SetConfig+0x212>
 8006350:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006354:	d009      	beq.n	800636a <UART_SetConfig+0x21e>
 8006356:	e00b      	b.n	8006370 <UART_SetConfig+0x224>
 8006358:	2300      	movs	r3, #0
 800635a:	76fb      	strb	r3, [r7, #27]
 800635c:	e00e      	b.n	800637c <UART_SetConfig+0x230>
 800635e:	2302      	movs	r3, #2
 8006360:	76fb      	strb	r3, [r7, #27]
 8006362:	e00b      	b.n	800637c <UART_SetConfig+0x230>
 8006364:	2304      	movs	r3, #4
 8006366:	76fb      	strb	r3, [r7, #27]
 8006368:	e008      	b.n	800637c <UART_SetConfig+0x230>
 800636a:	2308      	movs	r3, #8
 800636c:	76fb      	strb	r3, [r7, #27]
 800636e:	e005      	b.n	800637c <UART_SetConfig+0x230>
 8006370:	2310      	movs	r3, #16
 8006372:	76fb      	strb	r3, [r7, #27]
 8006374:	bf00      	nop
 8006376:	e001      	b.n	800637c <UART_SetConfig+0x230>
 8006378:	2310      	movs	r3, #16
 800637a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a23      	ldr	r2, [pc, #140]	; (8006410 <UART_SetConfig+0x2c4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	f040 8085 	bne.w	8006492 <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006388:	7efb      	ldrb	r3, [r7, #27]
 800638a:	2b08      	cmp	r3, #8
 800638c:	d823      	bhi.n	80063d6 <UART_SetConfig+0x28a>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <UART_SetConfig+0x248>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063b9 	.word	0x080063b9
 8006398:	080063d7 	.word	0x080063d7
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063d7 	.word	0x080063d7
 80063a4:	080063c7 	.word	0x080063c7
 80063a8:	080063d7 	.word	0x080063d7
 80063ac:	080063d7 	.word	0x080063d7
 80063b0:	080063d7 	.word	0x080063d7
 80063b4:	080063cf 	.word	0x080063cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b8:	f7fe fd14 	bl	8004de4 <HAL_RCC_GetPCLK1Freq>
 80063bc:	6178      	str	r0, [r7, #20]
        break;
 80063be:	e00f      	b.n	80063e0 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c0:	4b19      	ldr	r3, [pc, #100]	; (8006428 <UART_SetConfig+0x2dc>)
 80063c2:	617b      	str	r3, [r7, #20]
        break;
 80063c4:	e00c      	b.n	80063e0 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063c6:	f7fe fc77 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 80063ca:	6178      	str	r0, [r7, #20]
        break;
 80063cc:	e008      	b.n	80063e0 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d2:	617b      	str	r3, [r7, #20]
        break;
 80063d4:	e004      	b.n	80063e0 <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	76bb      	strb	r3, [r7, #26]
        break;
 80063de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 8102 	beq.w	80065ec <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	4413      	add	r3, r2
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d305      	bcc.n	8006404 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	429a      	cmp	r2, r3
 8006402:	d913      	bls.n	800642c <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	76bb      	strb	r3, [r7, #26]
 8006408:	e0f0      	b.n	80065ec <UART_SetConfig+0x4a0>
 800640a:	bf00      	nop
 800640c:	efff69f3 	.word	0xefff69f3
 8006410:	40008000 	.word	0x40008000
 8006414:	40013800 	.word	0x40013800
 8006418:	40021000 	.word	0x40021000
 800641c:	40004400 	.word	0x40004400
 8006420:	40004800 	.word	0x40004800
 8006424:	40004c00 	.word	0x40004c00
 8006428:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4619      	mov	r1, r3
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	f04f 0400 	mov.w	r4, #0
 800643c:	0214      	lsls	r4, r2, #8
 800643e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006442:	020b      	lsls	r3, r1, #8
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6852      	ldr	r2, [r2, #4]
 8006448:	0852      	lsrs	r2, r2, #1
 800644a:	4611      	mov	r1, r2
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	eb13 0b01 	adds.w	fp, r3, r1
 8006454:	eb44 0c02 	adc.w	ip, r4, r2
 8006458:	4658      	mov	r0, fp
 800645a:	4661      	mov	r1, ip
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f04f 0400 	mov.w	r4, #0
 8006464:	461a      	mov	r2, r3
 8006466:	4623      	mov	r3, r4
 8006468:	f7f9 ff0a 	bl	8000280 <__aeabi_uldivmod>
 800646c:	4603      	mov	r3, r0
 800646e:	460c      	mov	r4, r1
 8006470:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006478:	d308      	bcc.n	800648c <UART_SetConfig+0x340>
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006480:	d204      	bcs.n	800648c <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	60da      	str	r2, [r3, #12]
 800648a:	e0af      	b.n	80065ec <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	76bb      	strb	r3, [r7, #26]
 8006490:	e0ac      	b.n	80065ec <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800649a:	d15b      	bne.n	8006554 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800649c:	7efb      	ldrb	r3, [r7, #27]
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d827      	bhi.n	80064f2 <UART_SetConfig+0x3a6>
 80064a2:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <UART_SetConfig+0x35c>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064dd 	.word	0x080064dd
 80064b4:	080064f3 	.word	0x080064f3
 80064b8:	080064e3 	.word	0x080064e3
 80064bc:	080064f3 	.word	0x080064f3
 80064c0:	080064f3 	.word	0x080064f3
 80064c4:	080064f3 	.word	0x080064f3
 80064c8:	080064eb 	.word	0x080064eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064cc:	f7fe fc8a 	bl	8004de4 <HAL_RCC_GetPCLK1Freq>
 80064d0:	6178      	str	r0, [r7, #20]
        break;
 80064d2:	e013      	b.n	80064fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d4:	f7fe fc9c 	bl	8004e10 <HAL_RCC_GetPCLK2Freq>
 80064d8:	6178      	str	r0, [r7, #20]
        break;
 80064da:	e00f      	b.n	80064fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064dc:	4b49      	ldr	r3, [pc, #292]	; (8006604 <UART_SetConfig+0x4b8>)
 80064de:	617b      	str	r3, [r7, #20]
        break;
 80064e0:	e00c      	b.n	80064fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064e2:	f7fe fbe9 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 80064e6:	6178      	str	r0, [r7, #20]
        break;
 80064e8:	e008      	b.n	80064fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ee:	617b      	str	r3, [r7, #20]
        break;
 80064f0:	e004      	b.n	80064fc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	76bb      	strb	r3, [r7, #26]
        break;
 80064fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d074      	beq.n	80065ec <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	005a      	lsls	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	fbb2 f3f3 	udiv	r3, r2, r3
 8006516:	b29b      	uxth	r3, r3
 8006518:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b0f      	cmp	r3, #15
 800651e:	d916      	bls.n	800654e <UART_SetConfig+0x402>
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006526:	d212      	bcs.n	800654e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f023 030f 	bic.w	r3, r3, #15
 8006530:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	085b      	lsrs	r3, r3, #1
 8006536:	b29b      	uxth	r3, r3
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	b29a      	uxth	r2, r3
 800653e:	89fb      	ldrh	r3, [r7, #14]
 8006540:	4313      	orrs	r3, r2
 8006542:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	89fa      	ldrh	r2, [r7, #14]
 800654a:	60da      	str	r2, [r3, #12]
 800654c:	e04e      	b.n	80065ec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	76bb      	strb	r3, [r7, #26]
 8006552:	e04b      	b.n	80065ec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006554:	7efb      	ldrb	r3, [r7, #27]
 8006556:	2b08      	cmp	r3, #8
 8006558:	d827      	bhi.n	80065aa <UART_SetConfig+0x45e>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0x414>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006585 	.word	0x08006585
 8006564:	0800658d 	.word	0x0800658d
 8006568:	08006595 	.word	0x08006595
 800656c:	080065ab 	.word	0x080065ab
 8006570:	0800659b 	.word	0x0800659b
 8006574:	080065ab 	.word	0x080065ab
 8006578:	080065ab 	.word	0x080065ab
 800657c:	080065ab 	.word	0x080065ab
 8006580:	080065a3 	.word	0x080065a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006584:	f7fe fc2e 	bl	8004de4 <HAL_RCC_GetPCLK1Freq>
 8006588:	6178      	str	r0, [r7, #20]
        break;
 800658a:	e013      	b.n	80065b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800658c:	f7fe fc40 	bl	8004e10 <HAL_RCC_GetPCLK2Freq>
 8006590:	6178      	str	r0, [r7, #20]
        break;
 8006592:	e00f      	b.n	80065b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006594:	4b1b      	ldr	r3, [pc, #108]	; (8006604 <UART_SetConfig+0x4b8>)
 8006596:	617b      	str	r3, [r7, #20]
        break;
 8006598:	e00c      	b.n	80065b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659a:	f7fe fb8d 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 800659e:	6178      	str	r0, [r7, #20]
        break;
 80065a0:	e008      	b.n	80065b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	617b      	str	r3, [r7, #20]
        break;
 80065a8:	e004      	b.n	80065b4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	76bb      	strb	r3, [r7, #26]
        break;
 80065b2:	bf00      	nop
    }

    if (pclk != 0U)
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d018      	beq.n	80065ec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	085a      	lsrs	r2, r3, #1
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	441a      	add	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b0f      	cmp	r3, #15
 80065d4:	d908      	bls.n	80065e8 <UART_SetConfig+0x49c>
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065dc:	d204      	bcs.n	80065e8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	e001      	b.n	80065ec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80065f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3720      	adds	r7, #32
 80065fe:	46bd      	mov	sp, r7
 8006600:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006604:	00f42400 	.word	0x00f42400

08006608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	f003 0310 	and.w	r3, r3, #16
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01a      	beq.n	800671e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006706:	d10a      	bne.n	800671e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
  }
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af02      	add	r7, sp, #8
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800675a:	f7fd fa49 	bl	8003bf0 <HAL_GetTick>
 800675e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b08      	cmp	r3, #8
 800676c:	d10e      	bne.n	800678c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800676e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f82a 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e020      	b.n	80067ce <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b04      	cmp	r3, #4
 8006798:	d10e      	bne.n	80067b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800679a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f814 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e00a      	b.n	80067ce <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e6:	e05d      	b.n	80068a4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ee:	d059      	beq.n	80068a4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f0:	f7fd f9fe 	bl	8003bf0 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d302      	bcc.n	8006806 <UART_WaitOnFlagUntilTimeout+0x30>
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d11b      	bne.n	800683e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006814:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0201 	bic.w	r2, r2, #1
 8006824:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2220      	movs	r2, #32
 8006830:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e042      	b.n	80068c4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d02b      	beq.n	80068a4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685a:	d123      	bne.n	80068a4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006864:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006874:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e00f      	b.n	80068c4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69da      	ldr	r2, [r3, #28]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4013      	ands	r3, r2
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	bf0c      	ite	eq
 80068b4:	2301      	moveq	r3, #1
 80068b6:	2300      	movne	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d092      	beq.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0201 	bic.w	r2, r2, #1
 80068f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2220      	movs	r2, #32
 80068f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff fc04 	bl	8006138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800694e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fbe1 	bl	8006124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800697e:	b480      	push	{r7}
 8006980:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006982:	bf00      	nop
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006992:	f3ef 8305 	mrs	r3, IPSR
 8006996:	60bb      	str	r3, [r7, #8]
  return(result);
 8006998:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10f      	bne.n	80069be <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699e:	f3ef 8310 	mrs	r3, PRIMASK
 80069a2:	607b      	str	r3, [r7, #4]
  return(result);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d105      	bne.n	80069b6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069aa:	f3ef 8311 	mrs	r3, BASEPRI
 80069ae:	603b      	str	r3, [r7, #0]
  return(result);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <osKernelInitialize+0x3a>
 80069b6:	4b0e      	ldr	r3, [pc, #56]	; (80069f0 <osKernelInitialize+0x64>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d103      	bne.n	80069c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80069be:	f06f 0305 	mvn.w	r3, #5
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e00c      	b.n	80069e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <osKernelInitialize+0x64>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d105      	bne.n	80069da <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069ce:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <osKernelInitialize+0x64>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e002      	b.n	80069e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80069da:	f04f 33ff 	mov.w	r3, #4294967295
 80069de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80069e0:	68fb      	ldr	r3, [r7, #12]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000328 	.word	0x20000328

080069f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069fa:	f3ef 8305 	mrs	r3, IPSR
 80069fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10f      	bne.n	8006a26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a06:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0a:	607b      	str	r3, [r7, #4]
  return(result);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a12:	f3ef 8311 	mrs	r3, BASEPRI
 8006a16:	603b      	str	r3, [r7, #0]
  return(result);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <osKernelStart+0x3a>
 8006a1e:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <osKernelStart+0x68>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d103      	bne.n	8006a2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006a26:	f06f 0305 	mvn.w	r3, #5
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	e010      	b.n	8006a50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a2e:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <osKernelStart+0x68>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d109      	bne.n	8006a4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a36:	f7ff ffa2 	bl	800697e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a3a:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <osKernelStart+0x68>)
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a40:	f001 f870 	bl	8007b24 <vTaskStartScheduler>
      stat = osOK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	e002      	b.n	8006a50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a50:	68fb      	ldr	r3, [r7, #12]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000328 	.word	0x20000328

08006a60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b090      	sub	sp, #64	; 0x40
 8006a64:	af04      	add	r7, sp, #16
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a70:	f3ef 8305 	mrs	r3, IPSR
 8006a74:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a76:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f040 808f 	bne.w	8006b9c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a82:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d105      	bne.n	8006a96 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a8e:	617b      	str	r3, [r7, #20]
  return(result);
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <osThreadNew+0x3e>
 8006a96:	4b44      	ldr	r3, [pc, #272]	; (8006ba8 <osThreadNew+0x148>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d07e      	beq.n	8006b9c <osThreadNew+0x13c>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d07b      	beq.n	8006b9c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006aa4:	2380      	movs	r3, #128	; 0x80
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006aa8:	2318      	movs	r3, #24
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d045      	beq.n	8006b48 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <osThreadNew+0x6a>
        name = attr->name;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <osThreadNew+0x90>
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	2b38      	cmp	r3, #56	; 0x38
 8006ae2:	d805      	bhi.n	8006af0 <osThreadNew+0x90>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <osThreadNew+0x94>
        return (NULL);
 8006af0:	2300      	movs	r3, #0
 8006af2:	e054      	b.n	8006b9e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	089b      	lsrs	r3, r3, #2
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00e      	beq.n	8006b2a <osThreadNew+0xca>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b5b      	cmp	r3, #91	; 0x5b
 8006b12:	d90a      	bls.n	8006b2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d006      	beq.n	8006b2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <osThreadNew+0xca>
        mem = 1;
 8006b24:	2301      	movs	r3, #1
 8006b26:	623b      	str	r3, [r7, #32]
 8006b28:	e010      	b.n	8006b4c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10c      	bne.n	8006b4c <osThreadNew+0xec>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d108      	bne.n	8006b4c <osThreadNew+0xec>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <osThreadNew+0xec>
          mem = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	e001      	b.n	8006b4c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d110      	bne.n	8006b74 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b5a:	9202      	str	r2, [sp, #8]
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fe09 	bl	8007780 <xTaskCreateStatic>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	e013      	b.n	8006b9c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d110      	bne.n	8006b9c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	f107 0310 	add.w	r3, r7, #16
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 fe51 	bl	8007834 <xTaskCreate>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d001      	beq.n	8006b9c <osThreadNew+0x13c>
          hTask = NULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b9c:	693b      	ldr	r3, [r7, #16]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3730      	adds	r7, #48	; 0x30
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000328 	.word	0x20000328

08006bac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bb4:	f3ef 8305 	mrs	r3, IPSR
 8006bb8:	613b      	str	r3, [r7, #16]
  return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10f      	bne.n	8006be0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d105      	bne.n	8006bd8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <osDelay+0x3c>
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <osDelay+0x58>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d103      	bne.n	8006be8 <osDelay+0x3c>
    stat = osErrorISR;
 8006be0:	f06f 0305 	mvn.w	r3, #5
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e007      	b.n	8006bf8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 ff62 	bl	8007abc <vTaskDelay>
    }
  }

  return (stat);
 8006bf8:	697b      	ldr	r3, [r7, #20]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000328 	.word	0x20000328

08006c08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4a07      	ldr	r2, [pc, #28]	; (8006c34 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	4a06      	ldr	r2, [pc, #24]	; (8006c38 <vApplicationGetIdleTaskMemory+0x30>)
 8006c1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2280      	movs	r2, #128	; 0x80
 8006c24:	601a      	str	r2, [r3, #0]
}
 8006c26:	bf00      	nop
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	2000032c 	.word	0x2000032c
 8006c38:	20000388 	.word	0x20000388

08006c3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4a07      	ldr	r2, [pc, #28]	; (8006c68 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4a06      	ldr	r2, [pc, #24]	; (8006c6c <vApplicationGetTimerTaskMemory+0x30>)
 8006c52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c5a:	601a      	str	r2, [r3, #0]
}
 8006c5c:	bf00      	nop
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	20000588 	.word	0x20000588
 8006c6c:	200005e4 	.word	0x200005e4

08006c70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f103 0208 	add.w	r2, r3, #8
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f04f 32ff 	mov.w	r2, #4294967295
 8006c88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f103 0208 	add.w	r2, r3, #8
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f103 0208 	add.w	r2, r3, #8
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d103      	bne.n	8006d32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e00c      	b.n	8006d4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3308      	adds	r3, #8
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e002      	b.n	8006d40 <vListInsert+0x2e>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d2f6      	bcs.n	8006d3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	601a      	str	r2, [r3, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6892      	ldr	r2, [r2, #8]
 8006d9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6852      	ldr	r2, [r2, #4]
 8006da4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d103      	bne.n	8006db8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	1e5a      	subs	r2, r3, #1
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d109      	bne.n	8006e00 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	e7fe      	b.n	8006dfe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006e00:	f002 f814 	bl	8008e2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0c:	68f9      	ldr	r1, [r7, #12]
 8006e0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	441a      	add	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e30:	3b01      	subs	r3, #1
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e36:	fb01 f303 	mul.w	r3, r1, r3
 8006e3a:	441a      	add	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	22ff      	movs	r2, #255	; 0xff
 8006e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	22ff      	movs	r2, #255	; 0xff
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d114      	bne.n	8006e80 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01a      	beq.n	8006e94 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3310      	adds	r3, #16
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 f8de 	bl	8008024 <xTaskRemoveFromEventList>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d012      	beq.n	8006e94 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <xQueueGenericReset+0xcc>)
 8006e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	e009      	b.n	8006e94 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3310      	adds	r3, #16
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fef3 	bl	8006c70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3324      	adds	r3, #36	; 0x24
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff feee 	bl	8006c70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e94:	f001 fff8 	bl	8008e88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e98:	2301      	movs	r3, #1
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	e000ed04 	.word	0xe000ed04

08006ea8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08e      	sub	sp, #56	; 0x38
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d109      	bne.n	8006ed0 <xQueueGenericCreateStatic+0x28>
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ece:	e7fe      	b.n	8006ece <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <xQueueGenericCreateStatic+0x42>
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	e7fe      	b.n	8006ee8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <xQueueGenericCreateStatic+0x4e>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <xQueueGenericCreateStatic+0x52>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueGenericCreateStatic+0x54>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d109      	bne.n	8006f14 <xQueueGenericCreateStatic+0x6c>
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	623b      	str	r3, [r7, #32]
 8006f12:	e7fe      	b.n	8006f12 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <xQueueGenericCreateStatic+0x78>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <xQueueGenericCreateStatic+0x7c>
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <xQueueGenericCreateStatic+0x7e>
 8006f24:	2300      	movs	r3, #0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <xQueueGenericCreateStatic+0x96>
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	61fb      	str	r3, [r7, #28]
 8006f3c:	e7fe      	b.n	8006f3c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f3e:	2350      	movs	r3, #80	; 0x50
 8006f40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b50      	cmp	r3, #80	; 0x50
 8006f46:	d009      	beq.n	8006f5c <xQueueGenericCreateStatic+0xb4>
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	e7fe      	b.n	8006f5a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00d      	beq.n	8006f84 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f70:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	68b9      	ldr	r1, [r7, #8]
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 f805 	bl	8006f8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3730      	adds	r7, #48	; 0x30
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
 8006f9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	e002      	b.n	8006fb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	69b8      	ldr	r0, [r7, #24]
 8006fc0:	f7ff ff0a 	bl	8006dd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	78fa      	ldrb	r2, [r7, #3]
 8006fc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08e      	sub	sp, #56	; 0x38
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d109      	bne.n	8007004 <xQueueGenericSend+0x30>
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
 8007002:	e7fe      	b.n	8007002 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <xQueueGenericSend+0x3e>
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <xQueueGenericSend+0x42>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <xQueueGenericSend+0x44>
 8007016:	2300      	movs	r3, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d109      	bne.n	8007030 <xQueueGenericSend+0x5c>
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
 800702e:	e7fe      	b.n	800702e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d103      	bne.n	800703e <xQueueGenericSend+0x6a>
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <xQueueGenericSend+0x6e>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <xQueueGenericSend+0x70>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d109      	bne.n	800705c <xQueueGenericSend+0x88>
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	623b      	str	r3, [r7, #32]
 800705a:	e7fe      	b.n	800705a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800705c:	f001 f998 	bl	8008390 <xTaskGetSchedulerState>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <xQueueGenericSend+0x98>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <xQueueGenericSend+0x9c>
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <xQueueGenericSend+0x9e>
 8007070:	2300      	movs	r3, #0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <xQueueGenericSend+0xb6>
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	e7fe      	b.n	8007088 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800708a:	f001 fecf 	bl	8008e2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	429a      	cmp	r2, r3
 8007098:	d302      	bcc.n	80070a0 <xQueueGenericSend+0xcc>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d129      	bne.n	80070f4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070a6:	f000 f9ff 	bl	80074a8 <prvCopyDataToQueue>
 80070aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d010      	beq.n	80070d6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	3324      	adds	r3, #36	; 0x24
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 ffb3 	bl	8008024 <xTaskRemoveFromEventList>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d013      	beq.n	80070ec <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070c4:	4b3f      	ldr	r3, [pc, #252]	; (80071c4 <xQueueGenericSend+0x1f0>)
 80070c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	e00a      	b.n	80070ec <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070dc:	4b39      	ldr	r3, [pc, #228]	; (80071c4 <xQueueGenericSend+0x1f0>)
 80070de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80070ec:	f001 fecc 	bl	8008e88 <vPortExitCritical>
				return pdPASS;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e063      	b.n	80071bc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d103      	bne.n	8007102 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070fa:	f001 fec5 	bl	8008e88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	e05c      	b.n	80071bc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007104:	2b00      	cmp	r3, #0
 8007106:	d106      	bne.n	8007116 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007108:	f107 0314 	add.w	r3, r7, #20
 800710c:	4618      	mov	r0, r3
 800710e:	f000 ffeb 	bl	80080e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007112:	2301      	movs	r3, #1
 8007114:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007116:	f001 feb7 	bl	8008e88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800711a:	f000 fd67 	bl	8007bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800711e:	f001 fe85 	bl	8008e2c <vPortEnterCritical>
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007128:	b25b      	sxtb	r3, r3
 800712a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712e:	d103      	bne.n	8007138 <xQueueGenericSend+0x164>
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800713e:	b25b      	sxtb	r3, r3
 8007140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007144:	d103      	bne.n	800714e <xQueueGenericSend+0x17a>
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800714e:	f001 fe9b 	bl	8008e88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007152:	1d3a      	adds	r2, r7, #4
 8007154:	f107 0314 	add.w	r3, r7, #20
 8007158:	4611      	mov	r1, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f000 ffda 	bl	8008114 <xTaskCheckForTimeOut>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d124      	bne.n	80071b0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007168:	f000 fa96 	bl	8007698 <prvIsQueueFull>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d018      	beq.n	80071a4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	3310      	adds	r3, #16
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	4611      	mov	r1, r2
 800717a:	4618      	mov	r0, r3
 800717c:	f000 ff04 	bl	8007f88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007182:	f000 fa21 	bl	80075c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007186:	f000 fd3f 	bl	8007c08 <xTaskResumeAll>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	f47f af7c 	bne.w	800708a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <xQueueGenericSend+0x1f0>)
 8007194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	e772      	b.n	800708a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071a6:	f000 fa0f 	bl	80075c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071aa:	f000 fd2d 	bl	8007c08 <xTaskResumeAll>
 80071ae:	e76c      	b.n	800708a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071b2:	f000 fa09 	bl	80075c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071b6:	f000 fd27 	bl	8007c08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3738      	adds	r7, #56	; 0x38
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08e      	sub	sp, #56	; 0x38
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d109      	bne.n	80071f4 <xQueueGenericSendFromISR+0x2c>
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
 80071f2:	e7fe      	b.n	80071f2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d103      	bne.n	8007202 <xQueueGenericSendFromISR+0x3a>
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <xQueueGenericSendFromISR+0x3e>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <xQueueGenericSendFromISR+0x40>
 8007206:	2300      	movs	r3, #0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <xQueueGenericSendFromISR+0x58>
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	623b      	str	r3, [r7, #32]
 800721e:	e7fe      	b.n	800721e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d103      	bne.n	800722e <xQueueGenericSendFromISR+0x66>
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <xQueueGenericSendFromISR+0x6a>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <xQueueGenericSendFromISR+0x6c>
 8007232:	2300      	movs	r3, #0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <xQueueGenericSendFromISR+0x84>
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	e7fe      	b.n	800724a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800724c:	f001 feca 	bl	8008fe4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007250:	f3ef 8211 	mrs	r2, BASEPRI
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	61ba      	str	r2, [r7, #24]
 8007266:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007268:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007274:	429a      	cmp	r2, r3
 8007276:	d302      	bcc.n	800727e <xQueueGenericSendFromISR+0xb6>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d12c      	bne.n	80072d8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728e:	f000 f90b 	bl	80074a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007292:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729a:	d112      	bne.n	80072c2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d016      	beq.n	80072d2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	3324      	adds	r3, #36	; 0x24
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 febb 	bl	8008024 <xTaskRemoveFromEventList>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00e      	beq.n	80072d2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	e007      	b.n	80072d2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072c6:	3301      	adds	r3, #1
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	b25a      	sxtb	r2, r3
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072d2:	2301      	movs	r3, #1
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80072d6:	e001      	b.n	80072dc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	637b      	str	r3, [r7, #52]	; 0x34
 80072dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3738      	adds	r7, #56	; 0x38
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08c      	sub	sp, #48	; 0x30
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072fc:	2300      	movs	r3, #0
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <xQueueReceive+0x2e>
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	623b      	str	r3, [r7, #32]
 800731c:	e7fe      	b.n	800731c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d103      	bne.n	800732c <xQueueReceive+0x3c>
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <xQueueReceive+0x40>
 800732c:	2301      	movs	r3, #1
 800732e:	e000      	b.n	8007332 <xQueueReceive+0x42>
 8007330:	2300      	movs	r3, #0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <xQueueReceive+0x5a>
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	61fb      	str	r3, [r7, #28]
 8007348:	e7fe      	b.n	8007348 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800734a:	f001 f821 	bl	8008390 <xTaskGetSchedulerState>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d102      	bne.n	800735a <xQueueReceive+0x6a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <xQueueReceive+0x6e>
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <xQueueReceive+0x70>
 800735e:	2300      	movs	r3, #0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <xQueueReceive+0x88>
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	61bb      	str	r3, [r7, #24]
 8007376:	e7fe      	b.n	8007376 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007378:	f001 fd58 	bl	8008e2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01f      	beq.n	80073c8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738c:	f000 f8f6 	bl	800757c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	1e5a      	subs	r2, r3, #1
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00f      	beq.n	80073c0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	3310      	adds	r3, #16
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fe3d 	bl	8008024 <xTaskRemoveFromEventList>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d007      	beq.n	80073c0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073b0:	4b3c      	ldr	r3, [pc, #240]	; (80074a4 <xQueueReceive+0x1b4>)
 80073b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073c0:	f001 fd62 	bl	8008e88 <vPortExitCritical>
				return pdPASS;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e069      	b.n	800749c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073ce:	f001 fd5b 	bl	8008e88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073d2:	2300      	movs	r3, #0
 80073d4:	e062      	b.n	800749c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d106      	bne.n	80073ea <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073dc:	f107 0310 	add.w	r3, r7, #16
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fe81 	bl	80080e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073e6:	2301      	movs	r3, #1
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073ea:	f001 fd4d 	bl	8008e88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073ee:	f000 fbfd 	bl	8007bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073f2:	f001 fd1b 	bl	8008e2c <vPortEnterCritical>
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073fc:	b25b      	sxtb	r3, r3
 80073fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007402:	d103      	bne.n	800740c <xQueueReceive+0x11c>
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007412:	b25b      	sxtb	r3, r3
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d103      	bne.n	8007422 <xQueueReceive+0x132>
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007422:	f001 fd31 	bl	8008e88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007426:	1d3a      	adds	r2, r7, #4
 8007428:	f107 0310 	add.w	r3, r7, #16
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fe70 	bl	8008114 <xTaskCheckForTimeOut>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d123      	bne.n	8007482 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800743a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800743c:	f000 f916 	bl	800766c <prvIsQueueEmpty>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d017      	beq.n	8007476 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	3324      	adds	r3, #36	; 0x24
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fd9a 	bl	8007f88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007456:	f000 f8b7 	bl	80075c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800745a:	f000 fbd5 	bl	8007c08 <xTaskResumeAll>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d189      	bne.n	8007378 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007464:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <xQueueReceive+0x1b4>)
 8007466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	e780      	b.n	8007378 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007478:	f000 f8a6 	bl	80075c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800747c:	f000 fbc4 	bl	8007c08 <xTaskResumeAll>
 8007480:	e77a      	b.n	8007378 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007484:	f000 f8a0 	bl	80075c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007488:	f000 fbbe 	bl	8007c08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800748c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748e:	f000 f8ed 	bl	800766c <prvIsQueueEmpty>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	f43f af6f 	beq.w	8007378 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800749a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800749c:	4618      	mov	r0, r3
 800749e:	3730      	adds	r7, #48	; 0x30
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10d      	bne.n	80074e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d14d      	bne.n	800756a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 ff7a 	bl	80083cc <xTaskPriorityDisinherit>
 80074d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	609a      	str	r2, [r3, #8]
 80074e0:	e043      	b.n	800756a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d119      	bne.n	800751c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6858      	ldr	r0, [r3, #4]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	461a      	mov	r2, r3
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	f008 ff99 	bl	801042a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	441a      	add	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	429a      	cmp	r2, r3
 8007510:	d32b      	bcc.n	800756a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	605a      	str	r2, [r3, #4]
 800751a:	e026      	b.n	800756a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	68d8      	ldr	r0, [r3, #12]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	461a      	mov	r2, r3
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	f008 ff7f 	bl	801042a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	425b      	negs	r3, r3
 8007536:	441a      	add	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d207      	bcs.n	8007558 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	425b      	negs	r3, r3
 8007552:	441a      	add	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b02      	cmp	r3, #2
 800755c:	d105      	bne.n	800756a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	3b01      	subs	r3, #1
 8007568:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007572:	697b      	ldr	r3, [r7, #20]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	d018      	beq.n	80075c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	441a      	add	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d303      	bcc.n	80075b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68d9      	ldr	r1, [r3, #12]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	461a      	mov	r2, r3
 80075ba:	6838      	ldr	r0, [r7, #0]
 80075bc:	f008 ff35 	bl	801042a <memcpy>
	}
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075d0:	f001 fc2c 	bl	8008e2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075dc:	e011      	b.n	8007602 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d012      	beq.n	800760c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3324      	adds	r3, #36	; 0x24
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fd1a 	bl	8008024 <xTaskRemoveFromEventList>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075f6:	f000 fded 	bl	80081d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007606:	2b00      	cmp	r3, #0
 8007608:	dce9      	bgt.n	80075de <prvUnlockQueue+0x16>
 800760a:	e000      	b.n	800760e <prvUnlockQueue+0x46>
					break;
 800760c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	22ff      	movs	r2, #255	; 0xff
 8007612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007616:	f001 fc37 	bl	8008e88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800761a:	f001 fc07 	bl	8008e2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007624:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007626:	e011      	b.n	800764c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d012      	beq.n	8007656 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3310      	adds	r3, #16
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fcf5 	bl	8008024 <xTaskRemoveFromEventList>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007640:	f000 fdc8 	bl	80081d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	3b01      	subs	r3, #1
 8007648:	b2db      	uxtb	r3, r3
 800764a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800764c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007650:	2b00      	cmp	r3, #0
 8007652:	dce9      	bgt.n	8007628 <prvUnlockQueue+0x60>
 8007654:	e000      	b.n	8007658 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007656:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	22ff      	movs	r2, #255	; 0xff
 800765c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007660:	f001 fc12 	bl	8008e88 <vPortExitCritical>
}
 8007664:	bf00      	nop
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007674:	f001 fbda 	bl	8008e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	2b00      	cmp	r3, #0
 800767e:	d102      	bne.n	8007686 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e001      	b.n	800768a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800768a:	f001 fbfd 	bl	8008e88 <vPortExitCritical>

	return xReturn;
 800768e:	68fb      	ldr	r3, [r7, #12]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076a0:	f001 fbc4 	bl	8008e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d102      	bne.n	80076b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076b0:	2301      	movs	r3, #1
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e001      	b.n	80076ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076ba:	f001 fbe5 	bl	8008e88 <vPortExitCritical>

	return xReturn;
 80076be:	68fb      	ldr	r3, [r7, #12]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
 80076d6:	e014      	b.n	8007702 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80076d8:	4a0e      	ldr	r2, [pc, #56]	; (8007714 <vQueueAddToRegistry+0x4c>)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10b      	bne.n	80076fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80076e4:	490b      	ldr	r1, [pc, #44]	; (8007714 <vQueueAddToRegistry+0x4c>)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076ee:	4a09      	ldr	r2, [pc, #36]	; (8007714 <vQueueAddToRegistry+0x4c>)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	4413      	add	r3, r2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80076fa:	e005      	b.n	8007708 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b07      	cmp	r3, #7
 8007706:	d9e7      	bls.n	80076d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007708:	bf00      	nop
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	20021998 	.word	0x20021998

08007718 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007728:	f001 fb80 	bl	8008e2c <vPortEnterCritical>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007732:	b25b      	sxtb	r3, r3
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d103      	bne.n	8007742 <vQueueWaitForMessageRestricted+0x2a>
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007748:	b25b      	sxtb	r3, r3
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d103      	bne.n	8007758 <vQueueWaitForMessageRestricted+0x40>
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007758:	f001 fb96 	bl	8008e88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	2b00      	cmp	r3, #0
 8007762:	d106      	bne.n	8007772 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	3324      	adds	r3, #36	; 0x24
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fc2f 	bl	8007fd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007772:	6978      	ldr	r0, [r7, #20]
 8007774:	f7ff ff28 	bl	80075c8 <prvUnlockQueue>
	}
 8007778:	bf00      	nop
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08e      	sub	sp, #56	; 0x38
 8007784:	af04      	add	r7, sp, #16
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007790:	2b00      	cmp	r3, #0
 8007792:	d109      	bne.n	80077a8 <xTaskCreateStatic+0x28>
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	623b      	str	r3, [r7, #32]
 80077a6:	e7fe      	b.n	80077a6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d109      	bne.n	80077c2 <xTaskCreateStatic+0x42>
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	61fb      	str	r3, [r7, #28]
 80077c0:	e7fe      	b.n	80077c0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077c2:	235c      	movs	r3, #92	; 0x5c
 80077c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b5c      	cmp	r3, #92	; 0x5c
 80077ca:	d009      	beq.n	80077e0 <xTaskCreateStatic+0x60>
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	e7fe      	b.n	80077de <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d01e      	beq.n	8007826 <xTaskCreateStatic+0xa6>
 80077e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d01b      	beq.n	8007826 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007800:	2300      	movs	r3, #0
 8007802:	9303      	str	r3, [sp, #12]
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	9302      	str	r3, [sp, #8]
 8007808:	f107 0314 	add.w	r3, r7, #20
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f850 	bl	80078be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800781e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007820:	f000 f8dc 	bl	80079dc <prvAddNewTaskToReadyList>
 8007824:	e001      	b.n	800782a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800782a:	697b      	ldr	r3, [r7, #20]
	}
 800782c:	4618      	mov	r0, r3
 800782e:	3728      	adds	r7, #40	; 0x28
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08c      	sub	sp, #48	; 0x30
 8007838:	af04      	add	r7, sp, #16
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4618      	mov	r0, r3
 800784a:	f001 fc09 	bl	8009060 <pvPortMalloc>
 800784e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00e      	beq.n	8007874 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007856:	205c      	movs	r0, #92	; 0x5c
 8007858:	f001 fc02 	bl	8009060 <pvPortMalloc>
 800785c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
 800786a:	e005      	b.n	8007878 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800786c:	6978      	ldr	r0, [r7, #20]
 800786e:	f001 fcb9 	bl	80091e4 <vPortFree>
 8007872:	e001      	b.n	8007878 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007874:	2300      	movs	r3, #0
 8007876:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d017      	beq.n	80078ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007886:	88fa      	ldrh	r2, [r7, #6]
 8007888:	2300      	movs	r3, #0
 800788a:	9303      	str	r3, [sp, #12]
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	9302      	str	r3, [sp, #8]
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	9301      	str	r3, [sp, #4]
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 f80e 	bl	80078be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078a2:	69f8      	ldr	r0, [r7, #28]
 80078a4:	f000 f89a 	bl	80079dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078a8:	2301      	movs	r3, #1
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	e002      	b.n	80078b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078ae:	f04f 33ff 	mov.w	r3, #4294967295
 80078b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078b4:	69bb      	ldr	r3, [r7, #24]
	}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3720      	adds	r7, #32
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b088      	sub	sp, #32
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	607a      	str	r2, [r7, #4]
 80078ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	461a      	mov	r2, r3
 80078d6:	21a5      	movs	r1, #165	; 0xa5
 80078d8:	f008 fdb2 	bl	8010440 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078e6:	3b01      	subs	r3, #1
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	f023 0307 	bic.w	r3, r3, #7
 80078f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d009      	beq.n	8007914 <prvInitialiseNewTask+0x56>
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	e7fe      	b.n	8007912 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d01f      	beq.n	800795a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800791a:	2300      	movs	r3, #0
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	e012      	b.n	8007946 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	7819      	ldrb	r1, [r3, #0]
 8007928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	4413      	add	r3, r2
 800792e:	3334      	adds	r3, #52	; 0x34
 8007930:	460a      	mov	r2, r1
 8007932:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	4413      	add	r3, r2
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d006      	beq.n	800794e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	3301      	adds	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2b0f      	cmp	r3, #15
 800794a:	d9e9      	bls.n	8007920 <prvInitialiseNewTask+0x62>
 800794c:	e000      	b.n	8007950 <prvInitialiseNewTask+0x92>
			{
				break;
 800794e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007958:	e003      	b.n	8007962 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	2b37      	cmp	r3, #55	; 0x37
 8007966:	d901      	bls.n	800796c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007968:	2337      	movs	r3, #55	; 0x37
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007970:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007976:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	2200      	movs	r2, #0
 800797c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	3304      	adds	r3, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff f994 	bl	8006cb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	3318      	adds	r3, #24
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff f98f 	bl	8006cb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007996:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	2200      	movs	r2, #0
 80079ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	68f9      	ldr	r1, [r7, #12]
 80079ba:	69b8      	ldr	r0, [r7, #24]
 80079bc:	f001 f90c 	bl	8008bd8 <pxPortInitialiseStack>
 80079c0:	4602      	mov	r2, r0
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079d2:	bf00      	nop
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079e4:	f001 fa22 	bl	8008e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079e8:	4b2d      	ldr	r3, [pc, #180]	; (8007aa0 <prvAddNewTaskToReadyList+0xc4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3301      	adds	r3, #1
 80079ee:	4a2c      	ldr	r2, [pc, #176]	; (8007aa0 <prvAddNewTaskToReadyList+0xc4>)
 80079f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079f2:	4b2c      	ldr	r3, [pc, #176]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d109      	bne.n	8007a0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079fa:	4a2a      	ldr	r2, [pc, #168]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a00:	4b27      	ldr	r3, [pc, #156]	; (8007aa0 <prvAddNewTaskToReadyList+0xc4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d110      	bne.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a08:	f000 fc08 	bl	800821c <prvInitialiseTaskLists>
 8007a0c:	e00d      	b.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a0e:	4b26      	ldr	r3, [pc, #152]	; (8007aa8 <prvAddNewTaskToReadyList+0xcc>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d109      	bne.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a16:	4b23      	ldr	r3, [pc, #140]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d802      	bhi.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a24:	4a1f      	ldr	r2, [pc, #124]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a2a:	4b20      	ldr	r3, [pc, #128]	; (8007aac <prvAddNewTaskToReadyList+0xd0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	4a1e      	ldr	r2, [pc, #120]	; (8007aac <prvAddNewTaskToReadyList+0xd0>)
 8007a32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a34:	4b1d      	ldr	r3, [pc, #116]	; (8007aac <prvAddNewTaskToReadyList+0xd0>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a40:	4b1b      	ldr	r3, [pc, #108]	; (8007ab0 <prvAddNewTaskToReadyList+0xd4>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d903      	bls.n	8007a50 <prvAddNewTaskToReadyList+0x74>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	4a18      	ldr	r2, [pc, #96]	; (8007ab0 <prvAddNewTaskToReadyList+0xd4>)
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4a15      	ldr	r2, [pc, #84]	; (8007ab4 <prvAddNewTaskToReadyList+0xd8>)
 8007a5e:	441a      	add	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3304      	adds	r3, #4
 8007a64:	4619      	mov	r1, r3
 8007a66:	4610      	mov	r0, r2
 8007a68:	f7ff f92f 	bl	8006cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a6c:	f001 fa0c 	bl	8008e88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a70:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <prvAddNewTaskToReadyList+0xcc>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00e      	beq.n	8007a96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d207      	bcs.n	8007a96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a86:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <prvAddNewTaskToReadyList+0xdc>)
 8007a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000eb8 	.word	0x20000eb8
 8007aa4:	200009e4 	.word	0x200009e4
 8007aa8:	20000ec4 	.word	0x20000ec4
 8007aac:	20000ed4 	.word	0x20000ed4
 8007ab0:	20000ec0 	.word	0x20000ec0
 8007ab4:	200009e8 	.word	0x200009e8
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d016      	beq.n	8007afc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <vTaskDelay+0x60>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <vTaskDelay+0x2e>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	60bb      	str	r3, [r7, #8]
 8007ae8:	e7fe      	b.n	8007ae8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007aea:	f000 f87f 	bl	8007bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007aee:	2100      	movs	r1, #0
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fcd7 	bl	80084a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007af6:	f000 f887 	bl	8007c08 <xTaskResumeAll>
 8007afa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d107      	bne.n	8007b12 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007b02:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <vTaskDelay+0x64>)
 8007b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000ee0 	.word	0x20000ee0
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08a      	sub	sp, #40	; 0x28
 8007b28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b32:	463a      	mov	r2, r7
 8007b34:	1d39      	adds	r1, r7, #4
 8007b36:	f107 0308 	add.w	r3, r7, #8
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff f864 	bl	8006c08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	9202      	str	r2, [sp, #8]
 8007b48:	9301      	str	r3, [sp, #4]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	460a      	mov	r2, r1
 8007b52:	4920      	ldr	r1, [pc, #128]	; (8007bd4 <vTaskStartScheduler+0xb0>)
 8007b54:	4820      	ldr	r0, [pc, #128]	; (8007bd8 <vTaskStartScheduler+0xb4>)
 8007b56:	f7ff fe13 	bl	8007780 <xTaskCreateStatic>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	4b1f      	ldr	r3, [pc, #124]	; (8007bdc <vTaskStartScheduler+0xb8>)
 8007b5e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b60:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <vTaskStartScheduler+0xb8>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	e001      	b.n	8007b72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d102      	bne.n	8007b7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b78:	f000 fce8 	bl	800854c <xTimerCreateTimerTask>
 8007b7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d115      	bne.n	8007bb0 <vTaskStartScheduler+0x8c>
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b96:	4b12      	ldr	r3, [pc, #72]	; (8007be0 <vTaskStartScheduler+0xbc>)
 8007b98:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b9e:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <vTaskStartScheduler+0xc0>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ba4:	4b10      	ldr	r3, [pc, #64]	; (8007be8 <vTaskStartScheduler+0xc4>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007baa:	f001 f8a1 	bl	8008cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bae:	e00d      	b.n	8007bcc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d109      	bne.n	8007bcc <vTaskStartScheduler+0xa8>
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e7fe      	b.n	8007bca <vTaskStartScheduler+0xa6>
}
 8007bcc:	bf00      	nop
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	08011920 	.word	0x08011920
 8007bd8:	080081ed 	.word	0x080081ed
 8007bdc:	20000edc 	.word	0x20000edc
 8007be0:	20000ed8 	.word	0x20000ed8
 8007be4:	20000ec4 	.word	0x20000ec4
 8007be8:	20000ebc 	.word	0x20000ebc

08007bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007bf0:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <vTaskSuspendAll+0x18>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	4a03      	ldr	r2, [pc, #12]	; (8007c04 <vTaskSuspendAll+0x18>)
 8007bf8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007bfa:	bf00      	nop
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	20000ee0 	.word	0x20000ee0

08007c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c16:	4b41      	ldr	r3, [pc, #260]	; (8007d1c <xTaskResumeAll+0x114>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <xTaskResumeAll+0x2a>
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	603b      	str	r3, [r7, #0]
 8007c30:	e7fe      	b.n	8007c30 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c32:	f001 f8fb 	bl	8008e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c36:	4b39      	ldr	r3, [pc, #228]	; (8007d1c <xTaskResumeAll+0x114>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	4a37      	ldr	r2, [pc, #220]	; (8007d1c <xTaskResumeAll+0x114>)
 8007c3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c40:	4b36      	ldr	r3, [pc, #216]	; (8007d1c <xTaskResumeAll+0x114>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d162      	bne.n	8007d0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c48:	4b35      	ldr	r3, [pc, #212]	; (8007d20 <xTaskResumeAll+0x118>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d05e      	beq.n	8007d0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c50:	e02f      	b.n	8007cb2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c52:	4b34      	ldr	r3, [pc, #208]	; (8007d24 <xTaskResumeAll+0x11c>)
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3318      	adds	r3, #24
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff f890 	bl	8006d84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3304      	adds	r3, #4
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff f88b 	bl	8006d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c72:	4b2d      	ldr	r3, [pc, #180]	; (8007d28 <xTaskResumeAll+0x120>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d903      	bls.n	8007c82 <xTaskResumeAll+0x7a>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	4a2a      	ldr	r2, [pc, #168]	; (8007d28 <xTaskResumeAll+0x120>)
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4a27      	ldr	r2, [pc, #156]	; (8007d2c <xTaskResumeAll+0x124>)
 8007c90:	441a      	add	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7ff f816 	bl	8006cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca2:	4b23      	ldr	r3, [pc, #140]	; (8007d30 <xTaskResumeAll+0x128>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d302      	bcc.n	8007cb2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007cac:	4b21      	ldr	r3, [pc, #132]	; (8007d34 <xTaskResumeAll+0x12c>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <xTaskResumeAll+0x11c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1cb      	bne.n	8007c52 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cc0:	f000 fb46 	bl	8008350 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cc4:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <xTaskResumeAll+0x130>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d010      	beq.n	8007cf2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cd0:	f000 f846 	bl	8007d60 <xTaskIncrementTick>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007cda:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <xTaskResumeAll+0x12c>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f1      	bne.n	8007cd0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007cec:	4b12      	ldr	r3, [pc, #72]	; (8007d38 <xTaskResumeAll+0x130>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cf2:	4b10      	ldr	r3, [pc, #64]	; (8007d34 <xTaskResumeAll+0x12c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <xTaskResumeAll+0x134>)
 8007d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d0e:	f001 f8bb 	bl	8008e88 <vPortExitCritical>

	return xAlreadyYielded;
 8007d12:	68bb      	ldr	r3, [r7, #8]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000ee0 	.word	0x20000ee0
 8007d20:	20000eb8 	.word	0x20000eb8
 8007d24:	20000e78 	.word	0x20000e78
 8007d28:	20000ec0 	.word	0x20000ec0
 8007d2c:	200009e8 	.word	0x200009e8
 8007d30:	200009e4 	.word	0x200009e4
 8007d34:	20000ecc 	.word	0x20000ecc
 8007d38:	20000ec8 	.word	0x20000ec8
 8007d3c:	e000ed04 	.word	0xe000ed04

08007d40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d46:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <xTaskGetTickCount+0x1c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d4c:	687b      	ldr	r3, [r7, #4]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	20000ebc 	.word	0x20000ebc

08007d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d6a:	4b4e      	ldr	r3, [pc, #312]	; (8007ea4 <xTaskIncrementTick+0x144>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f040 8088 	bne.w	8007e84 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d74:	4b4c      	ldr	r3, [pc, #304]	; (8007ea8 <xTaskIncrementTick+0x148>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d7c:	4a4a      	ldr	r2, [pc, #296]	; (8007ea8 <xTaskIncrementTick+0x148>)
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11f      	bne.n	8007dc8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d88:	4b48      	ldr	r3, [pc, #288]	; (8007eac <xTaskIncrementTick+0x14c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d009      	beq.n	8007da6 <xTaskIncrementTick+0x46>
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	e7fe      	b.n	8007da4 <xTaskIncrementTick+0x44>
 8007da6:	4b41      	ldr	r3, [pc, #260]	; (8007eac <xTaskIncrementTick+0x14c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	4b40      	ldr	r3, [pc, #256]	; (8007eb0 <xTaskIncrementTick+0x150>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a3e      	ldr	r2, [pc, #248]	; (8007eac <xTaskIncrementTick+0x14c>)
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	4a3e      	ldr	r2, [pc, #248]	; (8007eb0 <xTaskIncrementTick+0x150>)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	4b3e      	ldr	r3, [pc, #248]	; (8007eb4 <xTaskIncrementTick+0x154>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	4a3c      	ldr	r2, [pc, #240]	; (8007eb4 <xTaskIncrementTick+0x154>)
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	f000 fac4 	bl	8008350 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007dc8:	4b3b      	ldr	r3, [pc, #236]	; (8007eb8 <xTaskIncrementTick+0x158>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d349      	bcc.n	8007e66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dd2:	4b36      	ldr	r3, [pc, #216]	; (8007eac <xTaskIncrementTick+0x14c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d104      	bne.n	8007de6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ddc:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <xTaskIncrementTick+0x158>)
 8007dde:	f04f 32ff 	mov.w	r2, #4294967295
 8007de2:	601a      	str	r2, [r3, #0]
					break;
 8007de4:	e03f      	b.n	8007e66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007de6:	4b31      	ldr	r3, [pc, #196]	; (8007eac <xTaskIncrementTick+0x14c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d203      	bcs.n	8007e06 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dfe:	4a2e      	ldr	r2, [pc, #184]	; (8007eb8 <xTaskIncrementTick+0x158>)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e04:	e02f      	b.n	8007e66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe ffba 	bl	8006d84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d004      	beq.n	8007e22 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	3318      	adds	r3, #24
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe ffb1 	bl	8006d84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e26:	4b25      	ldr	r3, [pc, #148]	; (8007ebc <xTaskIncrementTick+0x15c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d903      	bls.n	8007e36 <xTaskIncrementTick+0xd6>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	4a22      	ldr	r2, [pc, #136]	; (8007ebc <xTaskIncrementTick+0x15c>)
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4a1f      	ldr	r2, [pc, #124]	; (8007ec0 <xTaskIncrementTick+0x160>)
 8007e44:	441a      	add	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	f7fe ff3c 	bl	8006cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e56:	4b1b      	ldr	r3, [pc, #108]	; (8007ec4 <xTaskIncrementTick+0x164>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d3b8      	bcc.n	8007dd2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007e60:	2301      	movs	r3, #1
 8007e62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e64:	e7b5      	b.n	8007dd2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e66:	4b17      	ldr	r3, [pc, #92]	; (8007ec4 <xTaskIncrementTick+0x164>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6c:	4914      	ldr	r1, [pc, #80]	; (8007ec0 <xTaskIncrementTick+0x160>)
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	440b      	add	r3, r1
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d907      	bls.n	8007e8e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	e004      	b.n	8007e8e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e84:	4b10      	ldr	r3, [pc, #64]	; (8007ec8 <xTaskIncrementTick+0x168>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	4a0f      	ldr	r2, [pc, #60]	; (8007ec8 <xTaskIncrementTick+0x168>)
 8007e8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ecc <xTaskIncrementTick+0x16c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e9a:	697b      	ldr	r3, [r7, #20]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	20000ee0 	.word	0x20000ee0
 8007ea8:	20000ebc 	.word	0x20000ebc
 8007eac:	20000e70 	.word	0x20000e70
 8007eb0:	20000e74 	.word	0x20000e74
 8007eb4:	20000ed0 	.word	0x20000ed0
 8007eb8:	20000ed8 	.word	0x20000ed8
 8007ebc:	20000ec0 	.word	0x20000ec0
 8007ec0:	200009e8 	.word	0x200009e8
 8007ec4:	200009e4 	.word	0x200009e4
 8007ec8:	20000ec8 	.word	0x20000ec8
 8007ecc:	20000ecc 	.word	0x20000ecc

08007ed0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ed6:	4b27      	ldr	r3, [pc, #156]	; (8007f74 <vTaskSwitchContext+0xa4>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ede:	4b26      	ldr	r3, [pc, #152]	; (8007f78 <vTaskSwitchContext+0xa8>)
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ee4:	e040      	b.n	8007f68 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007ee6:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <vTaskSwitchContext+0xa8>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eec:	4b23      	ldr	r3, [pc, #140]	; (8007f7c <vTaskSwitchContext+0xac>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	e00f      	b.n	8007f14 <vTaskSwitchContext+0x44>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d109      	bne.n	8007f0e <vTaskSwitchContext+0x3e>
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	607b      	str	r3, [r7, #4]
 8007f0c:	e7fe      	b.n	8007f0c <vTaskSwitchContext+0x3c>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	491a      	ldr	r1, [pc, #104]	; (8007f80 <vTaskSwitchContext+0xb0>)
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	440b      	add	r3, r1
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0e5      	beq.n	8007ef4 <vTaskSwitchContext+0x24>
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4a13      	ldr	r2, [pc, #76]	; (8007f80 <vTaskSwitchContext+0xb0>)
 8007f34:	4413      	add	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	605a      	str	r2, [r3, #4]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	3308      	adds	r3, #8
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d104      	bne.n	8007f58 <vTaskSwitchContext+0x88>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	605a      	str	r2, [r3, #4]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	4a09      	ldr	r2, [pc, #36]	; (8007f84 <vTaskSwitchContext+0xb4>)
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	4a06      	ldr	r2, [pc, #24]	; (8007f7c <vTaskSwitchContext+0xac>)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6013      	str	r3, [r2, #0]
}
 8007f68:	bf00      	nop
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	20000ee0 	.word	0x20000ee0
 8007f78:	20000ecc 	.word	0x20000ecc
 8007f7c:	20000ec0 	.word	0x20000ec0
 8007f80:	200009e8 	.word	0x200009e8
 8007f84:	200009e4 	.word	0x200009e4

08007f88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d109      	bne.n	8007fac <vTaskPlaceOnEventList+0x24>
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	e7fe      	b.n	8007faa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fac:	4b07      	ldr	r3, [pc, #28]	; (8007fcc <vTaskPlaceOnEventList+0x44>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3318      	adds	r3, #24
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fe feac 	bl	8006d12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fba:	2101      	movs	r1, #1
 8007fbc:	6838      	ldr	r0, [r7, #0]
 8007fbe:	f000 fa71 	bl	80084a4 <prvAddCurrentTaskToDelayedList>
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	200009e4 	.word	0x200009e4

08007fd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <vTaskPlaceOnEventListRestricted+0x26>
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e7fe      	b.n	8007ff4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ff6:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <vTaskPlaceOnEventListRestricted+0x50>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3318      	adds	r3, #24
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f7fe fe63 	bl	8006cca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800800a:	f04f 33ff 	mov.w	r3, #4294967295
 800800e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	68b8      	ldr	r0, [r7, #8]
 8008014:	f000 fa46 	bl	80084a4 <prvAddCurrentTaskToDelayedList>
	}
 8008018:	bf00      	nop
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	200009e4 	.word	0x200009e4

08008024 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <xTaskRemoveFromEventList+0x2a>
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e7fe      	b.n	800804c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	3318      	adds	r3, #24
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fe96 	bl	8006d84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008058:	4b1d      	ldr	r3, [pc, #116]	; (80080d0 <xTaskRemoveFromEventList+0xac>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d11d      	bne.n	800809c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	3304      	adds	r3, #4
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe fe8d 	bl	8006d84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806e:	4b19      	ldr	r3, [pc, #100]	; (80080d4 <xTaskRemoveFromEventList+0xb0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d903      	bls.n	800807e <xTaskRemoveFromEventList+0x5a>
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	4a16      	ldr	r2, [pc, #88]	; (80080d4 <xTaskRemoveFromEventList+0xb0>)
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4a13      	ldr	r2, [pc, #76]	; (80080d8 <xTaskRemoveFromEventList+0xb4>)
 800808c:	441a      	add	r2, r3
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	3304      	adds	r3, #4
 8008092:	4619      	mov	r1, r3
 8008094:	4610      	mov	r0, r2
 8008096:	f7fe fe18 	bl	8006cca <vListInsertEnd>
 800809a:	e005      	b.n	80080a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	3318      	adds	r3, #24
 80080a0:	4619      	mov	r1, r3
 80080a2:	480e      	ldr	r0, [pc, #56]	; (80080dc <xTaskRemoveFromEventList+0xb8>)
 80080a4:	f7fe fe11 	bl	8006cca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <xTaskRemoveFromEventList+0xbc>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d905      	bls.n	80080c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080b6:	2301      	movs	r3, #1
 80080b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080ba:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <xTaskRemoveFromEventList+0xc0>)
 80080bc:	2201      	movs	r2, #1
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	e001      	b.n	80080c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80080c2:	2300      	movs	r3, #0
 80080c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80080c6:	697b      	ldr	r3, [r7, #20]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20000ee0 	.word	0x20000ee0
 80080d4:	20000ec0 	.word	0x20000ec0
 80080d8:	200009e8 	.word	0x200009e8
 80080dc:	20000e78 	.word	0x20000e78
 80080e0:	200009e4 	.word	0x200009e4
 80080e4:	20000ecc 	.word	0x20000ecc

080080e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <vTaskInternalSetTimeOutState+0x24>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <vTaskInternalSetTimeOutState+0x28>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	605a      	str	r2, [r3, #4]
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	20000ed0 	.word	0x20000ed0
 8008110:	20000ebc 	.word	0x20000ebc

08008114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d109      	bne.n	8008138 <xTaskCheckForTimeOut+0x24>
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	613b      	str	r3, [r7, #16]
 8008136:	e7fe      	b.n	8008136 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d109      	bne.n	8008152 <xTaskCheckForTimeOut+0x3e>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	e7fe      	b.n	8008150 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008152:	f000 fe6b 	bl	8008e2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008156:	4b1d      	ldr	r3, [pc, #116]	; (80081cc <xTaskCheckForTimeOut+0xb8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816e:	d102      	bne.n	8008176 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]
 8008174:	e023      	b.n	80081be <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <xTaskCheckForTimeOut+0xbc>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d007      	beq.n	8008192 <xTaskCheckForTimeOut+0x7e>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	429a      	cmp	r2, r3
 800818a:	d302      	bcc.n	8008192 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800818c:	2301      	movs	r3, #1
 800818e:	61fb      	str	r3, [r7, #28]
 8008190:	e015      	b.n	80081be <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	429a      	cmp	r2, r3
 800819a:	d20b      	bcs.n	80081b4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff ff9d 	bl	80080e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61fb      	str	r3, [r7, #28]
 80081b2:	e004      	b.n	80081be <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2200      	movs	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081ba:	2301      	movs	r3, #1
 80081bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80081be:	f000 fe63 	bl	8008e88 <vPortExitCritical>

	return xReturn;
 80081c2:	69fb      	ldr	r3, [r7, #28]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3720      	adds	r7, #32
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000ebc 	.word	0x20000ebc
 80081d0:	20000ed0 	.word	0x20000ed0

080081d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081d8:	4b03      	ldr	r3, [pc, #12]	; (80081e8 <vTaskMissedYield+0x14>)
 80081da:	2201      	movs	r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
}
 80081de:	bf00      	nop
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	20000ecc 	.word	0x20000ecc

080081ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081f4:	f000 f852 	bl	800829c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081f8:	4b06      	ldr	r3, [pc, #24]	; (8008214 <prvIdleTask+0x28>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d9f9      	bls.n	80081f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <prvIdleTask+0x2c>)
 8008202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008210:	e7f0      	b.n	80081f4 <prvIdleTask+0x8>
 8008212:	bf00      	nop
 8008214:	200009e8 	.word	0x200009e8
 8008218:	e000ed04 	.word	0xe000ed04

0800821c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008222:	2300      	movs	r3, #0
 8008224:	607b      	str	r3, [r7, #4]
 8008226:	e00c      	b.n	8008242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4a12      	ldr	r2, [pc, #72]	; (800827c <prvInitialiseTaskLists+0x60>)
 8008234:	4413      	add	r3, r2
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe fd1a 	bl	8006c70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3301      	adds	r3, #1
 8008240:	607b      	str	r3, [r7, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b37      	cmp	r3, #55	; 0x37
 8008246:	d9ef      	bls.n	8008228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008248:	480d      	ldr	r0, [pc, #52]	; (8008280 <prvInitialiseTaskLists+0x64>)
 800824a:	f7fe fd11 	bl	8006c70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800824e:	480d      	ldr	r0, [pc, #52]	; (8008284 <prvInitialiseTaskLists+0x68>)
 8008250:	f7fe fd0e 	bl	8006c70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008254:	480c      	ldr	r0, [pc, #48]	; (8008288 <prvInitialiseTaskLists+0x6c>)
 8008256:	f7fe fd0b 	bl	8006c70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800825a:	480c      	ldr	r0, [pc, #48]	; (800828c <prvInitialiseTaskLists+0x70>)
 800825c:	f7fe fd08 	bl	8006c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008260:	480b      	ldr	r0, [pc, #44]	; (8008290 <prvInitialiseTaskLists+0x74>)
 8008262:	f7fe fd05 	bl	8006c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <prvInitialiseTaskLists+0x78>)
 8008268:	4a05      	ldr	r2, [pc, #20]	; (8008280 <prvInitialiseTaskLists+0x64>)
 800826a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <prvInitialiseTaskLists+0x7c>)
 800826e:	4a05      	ldr	r2, [pc, #20]	; (8008284 <prvInitialiseTaskLists+0x68>)
 8008270:	601a      	str	r2, [r3, #0]
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	200009e8 	.word	0x200009e8
 8008280:	20000e48 	.word	0x20000e48
 8008284:	20000e5c 	.word	0x20000e5c
 8008288:	20000e78 	.word	0x20000e78
 800828c:	20000e8c 	.word	0x20000e8c
 8008290:	20000ea4 	.word	0x20000ea4
 8008294:	20000e70 	.word	0x20000e70
 8008298:	20000e74 	.word	0x20000e74

0800829c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082a2:	e019      	b.n	80082d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082a4:	f000 fdc2 	bl	8008e2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082a8:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <prvCheckTasksWaitingTermination+0x4c>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3304      	adds	r3, #4
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe fd65 	bl	8006d84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082ba:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <prvCheckTasksWaitingTermination+0x50>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3b01      	subs	r3, #1
 80082c0:	4a0a      	ldr	r2, [pc, #40]	; (80082ec <prvCheckTasksWaitingTermination+0x50>)
 80082c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082c4:	4b0a      	ldr	r3, [pc, #40]	; (80082f0 <prvCheckTasksWaitingTermination+0x54>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	4a09      	ldr	r2, [pc, #36]	; (80082f0 <prvCheckTasksWaitingTermination+0x54>)
 80082cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082ce:	f000 fddb 	bl	8008e88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f80e 	bl	80082f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082d8:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <prvCheckTasksWaitingTermination+0x54>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e1      	bne.n	80082a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20000e8c 	.word	0x20000e8c
 80082ec:	20000eb8 	.word	0x20000eb8
 80082f0:	20000ea0 	.word	0x20000ea0

080082f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008302:	2b00      	cmp	r3, #0
 8008304:	d108      	bne.n	8008318 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830a:	4618      	mov	r0, r3
 800830c:	f000 ff6a 	bl	80091e4 <vPortFree>
				vPortFree( pxTCB );
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 ff67 	bl	80091e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008316:	e017      	b.n	8008348 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800831e:	2b01      	cmp	r3, #1
 8008320:	d103      	bne.n	800832a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 ff5e 	bl	80091e4 <vPortFree>
	}
 8008328:	e00e      	b.n	8008348 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008330:	2b02      	cmp	r3, #2
 8008332:	d009      	beq.n	8008348 <prvDeleteTCB+0x54>
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	60fb      	str	r3, [r7, #12]
 8008346:	e7fe      	b.n	8008346 <prvDeleteTCB+0x52>
	}
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008356:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <prvResetNextTaskUnblockTime+0x38>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d104      	bne.n	800836a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008360:	4b0a      	ldr	r3, [pc, #40]	; (800838c <prvResetNextTaskUnblockTime+0x3c>)
 8008362:	f04f 32ff 	mov.w	r2, #4294967295
 8008366:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008368:	e008      	b.n	800837c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836a:	4b07      	ldr	r3, [pc, #28]	; (8008388 <prvResetNextTaskUnblockTime+0x38>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4a04      	ldr	r2, [pc, #16]	; (800838c <prvResetNextTaskUnblockTime+0x3c>)
 800837a:	6013      	str	r3, [r2, #0]
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	20000e70 	.word	0x20000e70
 800838c:	20000ed8 	.word	0x20000ed8

08008390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <xTaskGetSchedulerState+0x34>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800839e:	2301      	movs	r3, #1
 80083a0:	607b      	str	r3, [r7, #4]
 80083a2:	e008      	b.n	80083b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a4:	4b08      	ldr	r3, [pc, #32]	; (80083c8 <xTaskGetSchedulerState+0x38>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d102      	bne.n	80083b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083ac:	2302      	movs	r3, #2
 80083ae:	607b      	str	r3, [r7, #4]
 80083b0:	e001      	b.n	80083b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083b2:	2300      	movs	r3, #0
 80083b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083b6:	687b      	ldr	r3, [r7, #4]
	}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	20000ec4 	.word	0x20000ec4
 80083c8:	20000ee0 	.word	0x20000ee0

080083cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d054      	beq.n	800848c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083e2:	4b2d      	ldr	r3, [pc, #180]	; (8008498 <xTaskPriorityDisinherit+0xcc>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d009      	beq.n	8008400 <xTaskPriorityDisinherit+0x34>
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	e7fe      	b.n	80083fe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008404:	2b00      	cmp	r3, #0
 8008406:	d109      	bne.n	800841c <xTaskPriorityDisinherit+0x50>
 8008408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	60bb      	str	r3, [r7, #8]
 800841a:	e7fe      	b.n	800841a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008420:	1e5a      	subs	r2, r3, #1
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800842e:	429a      	cmp	r2, r3
 8008430:	d02c      	beq.n	800848c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008436:	2b00      	cmp	r3, #0
 8008438:	d128      	bne.n	800848c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	3304      	adds	r3, #4
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe fca0 	bl	8006d84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	4b0f      	ldr	r3, [pc, #60]	; (800849c <xTaskPriorityDisinherit+0xd0>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d903      	bls.n	800846c <xTaskPriorityDisinherit+0xa0>
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	4a0c      	ldr	r2, [pc, #48]	; (800849c <xTaskPriorityDisinherit+0xd0>)
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008470:	4613      	mov	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4a09      	ldr	r2, [pc, #36]	; (80084a0 <xTaskPriorityDisinherit+0xd4>)
 800847a:	441a      	add	r2, r3
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	3304      	adds	r3, #4
 8008480:	4619      	mov	r1, r3
 8008482:	4610      	mov	r0, r2
 8008484:	f7fe fc21 	bl	8006cca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800848c:	697b      	ldr	r3, [r7, #20]
	}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	200009e4 	.word	0x200009e4
 800849c:	20000ec0 	.word	0x20000ec0
 80084a0:	200009e8 	.word	0x200009e8

080084a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084ae:	4b21      	ldr	r3, [pc, #132]	; (8008534 <prvAddCurrentTaskToDelayedList+0x90>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084b4:	4b20      	ldr	r3, [pc, #128]	; (8008538 <prvAddCurrentTaskToDelayedList+0x94>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fc62 	bl	8006d84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c6:	d10a      	bne.n	80084de <prvAddCurrentTaskToDelayedList+0x3a>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ce:	4b1a      	ldr	r3, [pc, #104]	; (8008538 <prvAddCurrentTaskToDelayedList+0x94>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4819      	ldr	r0, [pc, #100]	; (800853c <prvAddCurrentTaskToDelayedList+0x98>)
 80084d8:	f7fe fbf7 	bl	8006cca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084dc:	e026      	b.n	800852c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084e6:	4b14      	ldr	r3, [pc, #80]	; (8008538 <prvAddCurrentTaskToDelayedList+0x94>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d209      	bcs.n	800850a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084f6:	4b12      	ldr	r3, [pc, #72]	; (8008540 <prvAddCurrentTaskToDelayedList+0x9c>)
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	4b0f      	ldr	r3, [pc, #60]	; (8008538 <prvAddCurrentTaskToDelayedList+0x94>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3304      	adds	r3, #4
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f7fe fc05 	bl	8006d12 <vListInsert>
}
 8008508:	e010      	b.n	800852c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800850a:	4b0e      	ldr	r3, [pc, #56]	; (8008544 <prvAddCurrentTaskToDelayedList+0xa0>)
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <prvAddCurrentTaskToDelayedList+0x94>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3304      	adds	r3, #4
 8008514:	4619      	mov	r1, r3
 8008516:	4610      	mov	r0, r2
 8008518:	f7fe fbfb 	bl	8006d12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	429a      	cmp	r2, r3
 8008524:	d202      	bcs.n	800852c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008526:	4a08      	ldr	r2, [pc, #32]	; (8008548 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6013      	str	r3, [r2, #0]
}
 800852c:	bf00      	nop
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20000ebc 	.word	0x20000ebc
 8008538:	200009e4 	.word	0x200009e4
 800853c:	20000ea4 	.word	0x20000ea4
 8008540:	20000e74 	.word	0x20000e74
 8008544:	20000e70 	.word	0x20000e70
 8008548:	20000ed8 	.word	0x20000ed8

0800854c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08a      	sub	sp, #40	; 0x28
 8008550:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008556:	f000 faff 	bl	8008b58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800855a:	4b1c      	ldr	r3, [pc, #112]	; (80085cc <xTimerCreateTimerTask+0x80>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d021      	beq.n	80085a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800856a:	1d3a      	adds	r2, r7, #4
 800856c:	f107 0108 	add.w	r1, r7, #8
 8008570:	f107 030c 	add.w	r3, r7, #12
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe fb61 	bl	8006c3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	9202      	str	r2, [sp, #8]
 8008582:	9301      	str	r3, [sp, #4]
 8008584:	2302      	movs	r3, #2
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	2300      	movs	r3, #0
 800858a:	460a      	mov	r2, r1
 800858c:	4910      	ldr	r1, [pc, #64]	; (80085d0 <xTimerCreateTimerTask+0x84>)
 800858e:	4811      	ldr	r0, [pc, #68]	; (80085d4 <xTimerCreateTimerTask+0x88>)
 8008590:	f7ff f8f6 	bl	8007780 <xTaskCreateStatic>
 8008594:	4602      	mov	r2, r0
 8008596:	4b10      	ldr	r3, [pc, #64]	; (80085d8 <xTimerCreateTimerTask+0x8c>)
 8008598:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800859a:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <xTimerCreateTimerTask+0x8c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085a2:	2301      	movs	r3, #1
 80085a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d109      	bne.n	80085c0 <xTimerCreateTimerTask+0x74>
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	e7fe      	b.n	80085be <xTimerCreateTimerTask+0x72>
	return xReturn;
 80085c0:	697b      	ldr	r3, [r7, #20]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000f14 	.word	0x20000f14
 80085d0:	08011928 	.word	0x08011928
 80085d4:	0800870d 	.word	0x0800870d
 80085d8:	20000f18 	.word	0x20000f18

080085dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	; 0x28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d109      	bne.n	8008608 <xTimerGenericCommand+0x2c>
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	623b      	str	r3, [r7, #32]
 8008606:	e7fe      	b.n	8008606 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008608:	4b19      	ldr	r3, [pc, #100]	; (8008670 <xTimerGenericCommand+0x94>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d02a      	beq.n	8008666 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2b05      	cmp	r3, #5
 8008620:	dc18      	bgt.n	8008654 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008622:	f7ff feb5 	bl	8008390 <xTaskGetSchedulerState>
 8008626:	4603      	mov	r3, r0
 8008628:	2b02      	cmp	r3, #2
 800862a:	d109      	bne.n	8008640 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800862c:	4b10      	ldr	r3, [pc, #64]	; (8008670 <xTimerGenericCommand+0x94>)
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	f107 0110 	add.w	r1, r7, #16
 8008634:	2300      	movs	r3, #0
 8008636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008638:	f7fe fccc 	bl	8006fd4 <xQueueGenericSend>
 800863c:	6278      	str	r0, [r7, #36]	; 0x24
 800863e:	e012      	b.n	8008666 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008640:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <xTimerGenericCommand+0x94>)
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	f107 0110 	add.w	r1, r7, #16
 8008648:	2300      	movs	r3, #0
 800864a:	2200      	movs	r2, #0
 800864c:	f7fe fcc2 	bl	8006fd4 <xQueueGenericSend>
 8008650:	6278      	str	r0, [r7, #36]	; 0x24
 8008652:	e008      	b.n	8008666 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008654:	4b06      	ldr	r3, [pc, #24]	; (8008670 <xTimerGenericCommand+0x94>)
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	f107 0110 	add.w	r1, r7, #16
 800865c:	2300      	movs	r3, #0
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	f7fe fdb2 	bl	80071c8 <xQueueGenericSendFromISR>
 8008664:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008668:	4618      	mov	r0, r3
 800866a:	3728      	adds	r7, #40	; 0x28
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20000f14 	.word	0x20000f14

08008674 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af02      	add	r7, sp, #8
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800867e:	4b22      	ldr	r3, [pc, #136]	; (8008708 <prvProcessExpiredTimer+0x94>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	3304      	adds	r3, #4
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe fb79 	bl	8006d84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d021      	beq.n	80086e4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	699a      	ldr	r2, [r3, #24]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	18d1      	adds	r1, r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	6978      	ldr	r0, [r7, #20]
 80086ae:	f000 f8d1 	bl	8008854 <prvInsertTimerInActiveList>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d01e      	beq.n	80086f6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086b8:	2300      	movs	r3, #0
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	2300      	movs	r3, #0
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	2100      	movs	r1, #0
 80086c2:	6978      	ldr	r0, [r7, #20]
 80086c4:	f7ff ff8a 	bl	80085dc <xTimerGenericCommand>
 80086c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d112      	bne.n	80086f6 <prvProcessExpiredTimer+0x82>
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	e7fe      	b.n	80086e2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	6978      	ldr	r0, [r7, #20]
 80086fc:	4798      	blx	r3
}
 80086fe:	bf00      	nop
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20000f0c 	.word	0x20000f0c

0800870c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008714:	f107 0308 	add.w	r3, r7, #8
 8008718:	4618      	mov	r0, r3
 800871a:	f000 f857 	bl	80087cc <prvGetNextExpireTime>
 800871e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	4619      	mov	r1, r3
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 f803 	bl	8008730 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800872a:	f000 f8d5 	bl	80088d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800872e:	e7f1      	b.n	8008714 <prvTimerTask+0x8>

08008730 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800873a:	f7ff fa57 	bl	8007bec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800873e:	f107 0308 	add.w	r3, r7, #8
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f866 	bl	8008814 <prvSampleTimeNow>
 8008748:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d130      	bne.n	80087b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <prvProcessTimerOrBlockTask+0x3c>
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	429a      	cmp	r2, r3
 800875c:	d806      	bhi.n	800876c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800875e:	f7ff fa53 	bl	8007c08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff ff85 	bl	8008674 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800876a:	e024      	b.n	80087b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d008      	beq.n	8008784 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <prvProcessTimerOrBlockTask+0x90>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <prvProcessTimerOrBlockTask+0x50>
 800877c:	2301      	movs	r3, #1
 800877e:	e000      	b.n	8008782 <prvProcessTimerOrBlockTask+0x52>
 8008780:	2300      	movs	r3, #0
 8008782:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008784:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <prvProcessTimerOrBlockTask+0x94>)
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	4619      	mov	r1, r3
 8008792:	f7fe ffc1 	bl	8007718 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008796:	f7ff fa37 	bl	8007c08 <xTaskResumeAll>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087a0:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <prvProcessTimerOrBlockTask+0x98>)
 80087a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	f3bf 8f6f 	isb	sy
}
 80087b0:	e001      	b.n	80087b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80087b2:	f7ff fa29 	bl	8007c08 <xTaskResumeAll>
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000f10 	.word	0x20000f10
 80087c4:	20000f14 	.word	0x20000f14
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087d4:	4b0e      	ldr	r3, [pc, #56]	; (8008810 <prvGetNextExpireTime+0x44>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <prvGetNextExpireTime+0x16>
 80087de:	2201      	movs	r2, #1
 80087e0:	e000      	b.n	80087e4 <prvGetNextExpireTime+0x18>
 80087e2:	2200      	movs	r2, #0
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d105      	bne.n	80087fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087f0:	4b07      	ldr	r3, [pc, #28]	; (8008810 <prvGetNextExpireTime+0x44>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	e001      	b.n	8008800 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008800:	68fb      	ldr	r3, [r7, #12]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20000f0c 	.word	0x20000f0c

08008814 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800881c:	f7ff fa90 	bl	8007d40 <xTaskGetTickCount>
 8008820:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008822:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <prvSampleTimeNow+0x3c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	429a      	cmp	r2, r3
 800882a:	d205      	bcs.n	8008838 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800882c:	f000 f930 	bl	8008a90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	e002      	b.n	800883e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800883e:	4a04      	ldr	r2, [pc, #16]	; (8008850 <prvSampleTimeNow+0x3c>)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008844:	68fb      	ldr	r3, [r7, #12]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20000f1c 	.word	0x20000f1c

08008854 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008862:	2300      	movs	r3, #0
 8008864:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	429a      	cmp	r2, r3
 8008878:	d812      	bhi.n	80088a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	1ad2      	subs	r2, r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	429a      	cmp	r2, r3
 8008886:	d302      	bcc.n	800888e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008888:	2301      	movs	r3, #1
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e01b      	b.n	80088c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800888e:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <prvInsertTimerInActiveList+0x7c>)
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3304      	adds	r3, #4
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f7fe fa3a 	bl	8006d12 <vListInsert>
 800889e:	e012      	b.n	80088c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d206      	bcs.n	80088b6 <prvInsertTimerInActiveList+0x62>
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d302      	bcc.n	80088b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80088b0:	2301      	movs	r3, #1
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	e007      	b.n	80088c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088b6:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <prvInsertTimerInActiveList+0x80>)
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3304      	adds	r3, #4
 80088be:	4619      	mov	r1, r3
 80088c0:	4610      	mov	r0, r2
 80088c2:	f7fe fa26 	bl	8006d12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088c6:	697b      	ldr	r3, [r7, #20]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20000f10 	.word	0x20000f10
 80088d4:	20000f0c 	.word	0x20000f0c

080088d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08e      	sub	sp, #56	; 0x38
 80088dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088de:	e0c6      	b.n	8008a6e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	da17      	bge.n	8008916 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088e6:	1d3b      	adds	r3, r7, #4
 80088e8:	3304      	adds	r3, #4
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d109      	bne.n	8008906 <prvProcessReceivedCommands+0x2e>
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	61fb      	str	r3, [r7, #28]
 8008904:	e7fe      	b.n	8008904 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800890c:	6850      	ldr	r0, [r2, #4]
 800890e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008910:	6892      	ldr	r2, [r2, #8]
 8008912:	4611      	mov	r1, r2
 8008914:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f2c0 80a7 	blt.w	8008a6c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d004      	beq.n	8008934 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	3304      	adds	r3, #4
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe fa28 	bl	8006d84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008934:	463b      	mov	r3, r7
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff ff6c 	bl	8008814 <prvSampleTimeNow>
 800893c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b09      	cmp	r3, #9
 8008942:	f200 8094 	bhi.w	8008a6e <prvProcessReceivedCommands+0x196>
 8008946:	a201      	add	r2, pc, #4	; (adr r2, 800894c <prvProcessReceivedCommands+0x74>)
 8008948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894c:	08008975 	.word	0x08008975
 8008950:	08008975 	.word	0x08008975
 8008954:	08008975 	.word	0x08008975
 8008958:	080089e7 	.word	0x080089e7
 800895c:	080089fb 	.word	0x080089fb
 8008960:	08008a43 	.word	0x08008a43
 8008964:	08008975 	.word	0x08008975
 8008968:	08008975 	.word	0x08008975
 800896c:	080089e7 	.word	0x080089e7
 8008970:	080089fb 	.word	0x080089fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	b2da      	uxtb	r2, r3
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	18d1      	adds	r1, r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008994:	f7ff ff5e 	bl	8008854 <prvInsertTimerInActiveList>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d067      	beq.n	8008a6e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05c      	beq.n	8008a6e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	441a      	add	r2, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	2300      	movs	r3, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089c6:	f7ff fe09 	bl	80085dc <xTimerGenericCommand>
 80089ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d14d      	bne.n	8008a6e <prvProcessReceivedCommands+0x196>
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	61bb      	str	r3, [r7, #24]
 80089e4:	e7fe      	b.n	80089e4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ec:	f023 0301 	bic.w	r3, r3, #1
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80089f8:	e039      	b.n	8008a6e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a00:	f043 0301 	orr.w	r3, r3, #1
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d109      	bne.n	8008a2e <prvProcessReceivedCommands+0x156>
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	e7fe      	b.n	8008a2c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a30:	699a      	ldr	r2, [r3, #24]
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	18d1      	adds	r1, r2, r3
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a3c:	f7ff ff0a 	bl	8008854 <prvInsertTimerInActiveList>
					break;
 8008a40:	e015      	b.n	8008a6e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d103      	bne.n	8008a58 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a52:	f000 fbc7 	bl	80091e4 <vPortFree>
 8008a56:	e00a      	b.n	8008a6e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a5e:	f023 0301 	bic.w	r3, r3, #1
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a6a:	e000      	b.n	8008a6e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a6e:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <prvProcessReceivedCommands+0x1b4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	1d39      	adds	r1, r7, #4
 8008a74:	2200      	movs	r2, #0
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe fc3a 	bl	80072f0 <xQueueReceive>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f47f af2e 	bne.w	80088e0 <prvProcessReceivedCommands+0x8>
	}
}
 8008a84:	bf00      	nop
 8008a86:	3730      	adds	r7, #48	; 0x30
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20000f14 	.word	0x20000f14

08008a90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b088      	sub	sp, #32
 8008a94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a96:	e047      	b.n	8008b28 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a98:	4b2d      	ldr	r3, [pc, #180]	; (8008b50 <prvSwitchTimerLists+0xc0>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa2:	4b2b      	ldr	r3, [pc, #172]	; (8008b50 <prvSwitchTimerLists+0xc0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe f967 	bl	8006d84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d02d      	beq.n	8008b28 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d90e      	bls.n	8008afc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008aea:	4b19      	ldr	r3, [pc, #100]	; (8008b50 <prvSwitchTimerLists+0xc0>)
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4619      	mov	r1, r3
 8008af4:	4610      	mov	r0, r2
 8008af6:	f7fe f90c 	bl	8006d12 <vListInsert>
 8008afa:	e015      	b.n	8008b28 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008afc:	2300      	movs	r3, #0
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	2300      	movs	r3, #0
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	2100      	movs	r1, #0
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff fd68 	bl	80085dc <xTimerGenericCommand>
 8008b0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d109      	bne.n	8008b28 <prvSwitchTimerLists+0x98>
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	603b      	str	r3, [r7, #0]
 8008b26:	e7fe      	b.n	8008b26 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b28:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <prvSwitchTimerLists+0xc0>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1b2      	bne.n	8008a98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <prvSwitchTimerLists+0xc0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b38:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <prvSwitchTimerLists+0xc4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a04      	ldr	r2, [pc, #16]	; (8008b50 <prvSwitchTimerLists+0xc0>)
 8008b3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b40:	4a04      	ldr	r2, [pc, #16]	; (8008b54 <prvSwitchTimerLists+0xc4>)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	6013      	str	r3, [r2, #0]
}
 8008b46:	bf00      	nop
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000f0c 	.word	0x20000f0c
 8008b54:	20000f10 	.word	0x20000f10

08008b58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b5e:	f000 f965 	bl	8008e2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b62:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <prvCheckForValidListAndQueue+0x60>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d120      	bne.n	8008bac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b6a:	4814      	ldr	r0, [pc, #80]	; (8008bbc <prvCheckForValidListAndQueue+0x64>)
 8008b6c:	f7fe f880 	bl	8006c70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b70:	4813      	ldr	r0, [pc, #76]	; (8008bc0 <prvCheckForValidListAndQueue+0x68>)
 8008b72:	f7fe f87d 	bl	8006c70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b76:	4b13      	ldr	r3, [pc, #76]	; (8008bc4 <prvCheckForValidListAndQueue+0x6c>)
 8008b78:	4a10      	ldr	r2, [pc, #64]	; (8008bbc <prvCheckForValidListAndQueue+0x64>)
 8008b7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b7c:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <prvCheckForValidListAndQueue+0x70>)
 8008b7e:	4a10      	ldr	r2, [pc, #64]	; (8008bc0 <prvCheckForValidListAndQueue+0x68>)
 8008b80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b82:	2300      	movs	r3, #0
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	4b11      	ldr	r3, [pc, #68]	; (8008bcc <prvCheckForValidListAndQueue+0x74>)
 8008b88:	4a11      	ldr	r2, [pc, #68]	; (8008bd0 <prvCheckForValidListAndQueue+0x78>)
 8008b8a:	2110      	movs	r1, #16
 8008b8c:	200a      	movs	r0, #10
 8008b8e:	f7fe f98b 	bl	8006ea8 <xQueueGenericCreateStatic>
 8008b92:	4602      	mov	r2, r0
 8008b94:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <prvCheckForValidListAndQueue+0x60>)
 8008b96:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b98:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <prvCheckForValidListAndQueue+0x60>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ba0:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <prvCheckForValidListAndQueue+0x60>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	490b      	ldr	r1, [pc, #44]	; (8008bd4 <prvCheckForValidListAndQueue+0x7c>)
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fd8e 	bl	80076c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bac:	f000 f96c 	bl	8008e88 <vPortExitCritical>
}
 8008bb0:	bf00      	nop
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000f14 	.word	0x20000f14
 8008bbc:	20000ee4 	.word	0x20000ee4
 8008bc0:	20000ef8 	.word	0x20000ef8
 8008bc4:	20000f0c 	.word	0x20000f0c
 8008bc8:	20000f10 	.word	0x20000f10
 8008bcc:	20000fc0 	.word	0x20000fc0
 8008bd0:	20000f20 	.word	0x20000f20
 8008bd4:	08011930 	.word	0x08011930

08008bd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3b04      	subs	r3, #4
 8008be8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3b04      	subs	r3, #4
 8008bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f023 0201 	bic.w	r2, r3, #1
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3b04      	subs	r3, #4
 8008c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c08:	4a0c      	ldr	r2, [pc, #48]	; (8008c3c <pxPortInitialiseStack+0x64>)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3b14      	subs	r3, #20
 8008c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3b04      	subs	r3, #4
 8008c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f06f 0202 	mvn.w	r2, #2
 8008c26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3b20      	subs	r3, #32
 8008c2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	08008c41 	.word	0x08008c41

08008c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c4a:	4b11      	ldr	r3, [pc, #68]	; (8008c90 <prvTaskExitError+0x50>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c52:	d009      	beq.n	8008c68 <prvTaskExitError+0x28>
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	e7fe      	b.n	8008c66 <prvTaskExitError+0x26>
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c7a:	bf00      	nop
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0fc      	beq.n	8008c7c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c82:	bf00      	nop
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	2000008c 	.word	0x2000008c
	...

08008ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ca0:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <pxCurrentTCBConst2>)
 8008ca2:	6819      	ldr	r1, [r3, #0]
 8008ca4:	6808      	ldr	r0, [r1, #0]
 8008ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008caa:	f380 8809 	msr	PSP, r0
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f04f 0000 	mov.w	r0, #0
 8008cb6:	f380 8811 	msr	BASEPRI, r0
 8008cba:	4770      	bx	lr
 8008cbc:	f3af 8000 	nop.w

08008cc0 <pxCurrentTCBConst2>:
 8008cc0:	200009e4 	.word	0x200009e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop

08008cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008cc8:	4808      	ldr	r0, [pc, #32]	; (8008cec <prvPortStartFirstTask+0x24>)
 8008cca:	6800      	ldr	r0, [r0, #0]
 8008ccc:	6800      	ldr	r0, [r0, #0]
 8008cce:	f380 8808 	msr	MSP, r0
 8008cd2:	f04f 0000 	mov.w	r0, #0
 8008cd6:	f380 8814 	msr	CONTROL, r0
 8008cda:	b662      	cpsie	i
 8008cdc:	b661      	cpsie	f
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	df00      	svc	0
 8008ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cea:	bf00      	nop
 8008cec:	e000ed08 	.word	0xe000ed08

08008cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cf6:	4b44      	ldr	r3, [pc, #272]	; (8008e08 <xPortStartScheduler+0x118>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a44      	ldr	r2, [pc, #272]	; (8008e0c <xPortStartScheduler+0x11c>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d109      	bne.n	8008d14 <xPortStartScheduler+0x24>
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	613b      	str	r3, [r7, #16]
 8008d12:	e7fe      	b.n	8008d12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d14:	4b3c      	ldr	r3, [pc, #240]	; (8008e08 <xPortStartScheduler+0x118>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a3d      	ldr	r2, [pc, #244]	; (8008e10 <xPortStartScheduler+0x120>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d109      	bne.n	8008d32 <xPortStartScheduler+0x42>
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	e7fe      	b.n	8008d30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d32:	4b38      	ldr	r3, [pc, #224]	; (8008e14 <xPortStartScheduler+0x124>)
 8008d34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	22ff      	movs	r2, #255	; 0xff
 8008d42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	4b30      	ldr	r3, [pc, #192]	; (8008e18 <xPortStartScheduler+0x128>)
 8008d58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d5a:	4b30      	ldr	r3, [pc, #192]	; (8008e1c <xPortStartScheduler+0x12c>)
 8008d5c:	2207      	movs	r2, #7
 8008d5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d60:	e009      	b.n	8008d76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008d62:	4b2e      	ldr	r3, [pc, #184]	; (8008e1c <xPortStartScheduler+0x12c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	4a2c      	ldr	r2, [pc, #176]	; (8008e1c <xPortStartScheduler+0x12c>)
 8008d6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d76:	78fb      	ldrb	r3, [r7, #3]
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7e:	2b80      	cmp	r3, #128	; 0x80
 8008d80:	d0ef      	beq.n	8008d62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d82:	4b26      	ldr	r3, [pc, #152]	; (8008e1c <xPortStartScheduler+0x12c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f1c3 0307 	rsb	r3, r3, #7
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	d009      	beq.n	8008da2 <xPortStartScheduler+0xb2>
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	60bb      	str	r3, [r7, #8]
 8008da0:	e7fe      	b.n	8008da0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008da2:	4b1e      	ldr	r3, [pc, #120]	; (8008e1c <xPortStartScheduler+0x12c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	021b      	lsls	r3, r3, #8
 8008da8:	4a1c      	ldr	r2, [pc, #112]	; (8008e1c <xPortStartScheduler+0x12c>)
 8008daa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dac:	4b1b      	ldr	r3, [pc, #108]	; (8008e1c <xPortStartScheduler+0x12c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008db4:	4a19      	ldr	r2, [pc, #100]	; (8008e1c <xPortStartScheduler+0x12c>)
 8008db6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008dc0:	4b17      	ldr	r3, [pc, #92]	; (8008e20 <xPortStartScheduler+0x130>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a16      	ldr	r2, [pc, #88]	; (8008e20 <xPortStartScheduler+0x130>)
 8008dc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008dca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008dcc:	4b14      	ldr	r3, [pc, #80]	; (8008e20 <xPortStartScheduler+0x130>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a13      	ldr	r2, [pc, #76]	; (8008e20 <xPortStartScheduler+0x130>)
 8008dd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dd8:	f000 f8d6 	bl	8008f88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ddc:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <xPortStartScheduler+0x134>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008de2:	f000 f8f5 	bl	8008fd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008de6:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <xPortStartScheduler+0x138>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a0f      	ldr	r2, [pc, #60]	; (8008e28 <xPortStartScheduler+0x138>)
 8008dec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008df0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008df2:	f7ff ff69 	bl	8008cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008df6:	f7ff f86b 	bl	8007ed0 <vTaskSwitchContext>
	prvTaskExitError();
 8008dfa:	f7ff ff21 	bl	8008c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	e000ed00 	.word	0xe000ed00
 8008e0c:	410fc271 	.word	0x410fc271
 8008e10:	410fc270 	.word	0x410fc270
 8008e14:	e000e400 	.word	0xe000e400
 8008e18:	20001010 	.word	0x20001010
 8008e1c:	20001014 	.word	0x20001014
 8008e20:	e000ed20 	.word	0xe000ed20
 8008e24:	2000008c 	.word	0x2000008c
 8008e28:	e000ef34 	.word	0xe000ef34

08008e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e44:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <vPortEnterCritical+0x54>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	4a0d      	ldr	r2, [pc, #52]	; (8008e80 <vPortEnterCritical+0x54>)
 8008e4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e4e:	4b0c      	ldr	r3, [pc, #48]	; (8008e80 <vPortEnterCritical+0x54>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d10e      	bne.n	8008e74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e56:	4b0b      	ldr	r3, [pc, #44]	; (8008e84 <vPortEnterCritical+0x58>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d009      	beq.n	8008e74 <vPortEnterCritical+0x48>
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	603b      	str	r3, [r7, #0]
 8008e72:	e7fe      	b.n	8008e72 <vPortEnterCritical+0x46>
	}
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	2000008c 	.word	0x2000008c
 8008e84:	e000ed04 	.word	0xe000ed04

08008e88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e8e:	4b11      	ldr	r3, [pc, #68]	; (8008ed4 <vPortExitCritical+0x4c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d109      	bne.n	8008eaa <vPortExitCritical+0x22>
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	607b      	str	r3, [r7, #4]
 8008ea8:	e7fe      	b.n	8008ea8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008eaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <vPortExitCritical+0x4c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	4a08      	ldr	r2, [pc, #32]	; (8008ed4 <vPortExitCritical+0x4c>)
 8008eb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008eb4:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <vPortExitCritical+0x4c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d104      	bne.n	8008ec6 <vPortExitCritical+0x3e>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ec6:	bf00      	nop
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	2000008c 	.word	0x2000008c
	...

08008ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ee0:	f3ef 8009 	mrs	r0, PSP
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <pxCurrentTCBConst>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	f01e 0f10 	tst.w	lr, #16
 8008ef0:	bf08      	it	eq
 8008ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efa:	6010      	str	r0, [r2, #0]
 8008efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f04:	f380 8811 	msr	BASEPRI, r0
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f7fe ffde 	bl	8007ed0 <vTaskSwitchContext>
 8008f14:	f04f 0000 	mov.w	r0, #0
 8008f18:	f380 8811 	msr	BASEPRI, r0
 8008f1c:	bc09      	pop	{r0, r3}
 8008f1e:	6819      	ldr	r1, [r3, #0]
 8008f20:	6808      	ldr	r0, [r1, #0]
 8008f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f26:	f01e 0f10 	tst.w	lr, #16
 8008f2a:	bf08      	it	eq
 8008f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f30:	f380 8809 	msr	PSP, r0
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	f3af 8000 	nop.w

08008f40 <pxCurrentTCBConst>:
 8008f40:	200009e4 	.word	0x200009e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop

08008f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f60:	f7fe fefe 	bl	8007d60 <xTaskIncrementTick>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f6a:	4b06      	ldr	r3, [pc, #24]	; (8008f84 <SysTick_Handler+0x3c>)
 8008f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	2300      	movs	r3, #0
 8008f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	e000ed04 	.word	0xe000ed04

08008f88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f8c:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <vPortSetupTimerInterrupt+0x34>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f92:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <vPortSetupTimerInterrupt+0x38>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f98:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <vPortSetupTimerInterrupt+0x3c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a0a      	ldr	r2, [pc, #40]	; (8008fc8 <vPortSetupTimerInterrupt+0x40>)
 8008f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa2:	099b      	lsrs	r3, r3, #6
 8008fa4:	4a09      	ldr	r2, [pc, #36]	; (8008fcc <vPortSetupTimerInterrupt+0x44>)
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008faa:	4b04      	ldr	r3, [pc, #16]	; (8008fbc <vPortSetupTimerInterrupt+0x34>)
 8008fac:	2207      	movs	r2, #7
 8008fae:	601a      	str	r2, [r3, #0]
}
 8008fb0:	bf00      	nop
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	e000e010 	.word	0xe000e010
 8008fc0:	e000e018 	.word	0xe000e018
 8008fc4:	20000080 	.word	0x20000080
 8008fc8:	10624dd3 	.word	0x10624dd3
 8008fcc:	e000e014 	.word	0xe000e014

08008fd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008fe0 <vPortEnableVFP+0x10>
 8008fd4:	6801      	ldr	r1, [r0, #0]
 8008fd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008fda:	6001      	str	r1, [r0, #0]
 8008fdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fde:	bf00      	nop
 8008fe0:	e000ed88 	.word	0xe000ed88

08008fe4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fea:	f3ef 8305 	mrs	r3, IPSR
 8008fee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b0f      	cmp	r3, #15
 8008ff4:	d913      	bls.n	800901e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ff6:	4a16      	ldr	r2, [pc, #88]	; (8009050 <vPortValidateInterruptPriority+0x6c>)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009000:	4b14      	ldr	r3, [pc, #80]	; (8009054 <vPortValidateInterruptPriority+0x70>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	7afa      	ldrb	r2, [r7, #11]
 8009006:	429a      	cmp	r2, r3
 8009008:	d209      	bcs.n	800901e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	607b      	str	r3, [r7, #4]
 800901c:	e7fe      	b.n	800901c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800901e:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <vPortValidateInterruptPriority+0x74>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009026:	4b0d      	ldr	r3, [pc, #52]	; (800905c <vPortValidateInterruptPriority+0x78>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d909      	bls.n	8009042 <vPortValidateInterruptPriority+0x5e>
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	e7fe      	b.n	8009040 <vPortValidateInterruptPriority+0x5c>
	}
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	e000e3f0 	.word	0xe000e3f0
 8009054:	20001010 	.word	0x20001010
 8009058:	e000ed0c 	.word	0xe000ed0c
 800905c:	20001014 	.word	0x20001014

08009060 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b08a      	sub	sp, #40	; 0x28
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009068:	2300      	movs	r3, #0
 800906a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800906c:	f7fe fdbe 	bl	8007bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009070:	4b57      	ldr	r3, [pc, #348]	; (80091d0 <pvPortMalloc+0x170>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009078:	f000 f968 	bl	800934c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800907c:	4b55      	ldr	r3, [pc, #340]	; (80091d4 <pvPortMalloc+0x174>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4013      	ands	r3, r2
 8009084:	2b00      	cmp	r3, #0
 8009086:	f040 808c 	bne.w	80091a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01c      	beq.n	80090ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009090:	2208      	movs	r2, #8
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4413      	add	r3, r2
 8009096:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d013      	beq.n	80090ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f023 0307 	bic.w	r3, r3, #7
 80090a8:	3308      	adds	r3, #8
 80090aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f003 0307 	and.w	r3, r3, #7
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d009      	beq.n	80090ca <pvPortMalloc+0x6a>
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e7fe      	b.n	80090c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d068      	beq.n	80091a2 <pvPortMalloc+0x142>
 80090d0:	4b41      	ldr	r3, [pc, #260]	; (80091d8 <pvPortMalloc+0x178>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d863      	bhi.n	80091a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090da:	4b40      	ldr	r3, [pc, #256]	; (80091dc <pvPortMalloc+0x17c>)
 80090dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090de:	4b3f      	ldr	r3, [pc, #252]	; (80091dc <pvPortMalloc+0x17c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090e4:	e004      	b.n	80090f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d903      	bls.n	8009102 <pvPortMalloc+0xa2>
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1f1      	bne.n	80090e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009102:	4b33      	ldr	r3, [pc, #204]	; (80091d0 <pvPortMalloc+0x170>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009108:	429a      	cmp	r2, r3
 800910a:	d04a      	beq.n	80091a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2208      	movs	r2, #8
 8009112:	4413      	add	r3, r2
 8009114:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	1ad2      	subs	r2, r2, r3
 8009126:	2308      	movs	r3, #8
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	429a      	cmp	r2, r3
 800912c:	d91e      	bls.n	800916c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800912e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4413      	add	r3, r2
 8009134:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	2b00      	cmp	r3, #0
 800913e:	d009      	beq.n	8009154 <pvPortMalloc+0xf4>
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	613b      	str	r3, [r7, #16]
 8009152:	e7fe      	b.n	8009152 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	1ad2      	subs	r2, r2, r3
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009166:	69b8      	ldr	r0, [r7, #24]
 8009168:	f000 f952 	bl	8009410 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800916c:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <pvPortMalloc+0x178>)
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <pvPortMalloc+0x178>)
 8009178:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800917a:	4b17      	ldr	r3, [pc, #92]	; (80091d8 <pvPortMalloc+0x178>)
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4b18      	ldr	r3, [pc, #96]	; (80091e0 <pvPortMalloc+0x180>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d203      	bcs.n	800918e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009186:	4b14      	ldr	r3, [pc, #80]	; (80091d8 <pvPortMalloc+0x178>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a15      	ldr	r2, [pc, #84]	; (80091e0 <pvPortMalloc+0x180>)
 800918c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	4b10      	ldr	r3, [pc, #64]	; (80091d4 <pvPortMalloc+0x174>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	431a      	orrs	r2, r3
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80091a2:	f7fe fd31 	bl	8007c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	f003 0307 	and.w	r3, r3, #7
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d009      	beq.n	80091c4 <pvPortMalloc+0x164>
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	e7fe      	b.n	80091c2 <pvPortMalloc+0x162>
	return pvReturn;
 80091c4:	69fb      	ldr	r3, [r7, #28]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3728      	adds	r7, #40	; 0x28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20021820 	.word	0x20021820
 80091d4:	2002182c 	.word	0x2002182c
 80091d8:	20021824 	.word	0x20021824
 80091dc:	20021818 	.word	0x20021818
 80091e0:	20021828 	.word	0x20021828

080091e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d046      	beq.n	8009284 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091f6:	2308      	movs	r3, #8
 80091f8:	425b      	negs	r3, r3
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	4413      	add	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	4b20      	ldr	r3, [pc, #128]	; (800928c <vPortFree+0xa8>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4013      	ands	r3, r2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d109      	bne.n	8009226 <vPortFree+0x42>
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e7fe      	b.n	8009224 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d009      	beq.n	8009242 <vPortFree+0x5e>
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	60bb      	str	r3, [r7, #8]
 8009240:	e7fe      	b.n	8009240 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	4b11      	ldr	r3, [pc, #68]	; (800928c <vPortFree+0xa8>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4013      	ands	r3, r2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d019      	beq.n	8009284 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d115      	bne.n	8009284 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	4b0b      	ldr	r3, [pc, #44]	; (800928c <vPortFree+0xa8>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	43db      	mvns	r3, r3
 8009262:	401a      	ands	r2, r3
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009268:	f7fe fcc0 	bl	8007bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <vPortFree+0xac>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4413      	add	r3, r2
 8009276:	4a06      	ldr	r2, [pc, #24]	; (8009290 <vPortFree+0xac>)
 8009278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800927a:	6938      	ldr	r0, [r7, #16]
 800927c:	f000 f8c8 	bl	8009410 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009280:	f7fe fcc2 	bl	8007c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009284:	bf00      	nop
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	2002182c 	.word	0x2002182c
 8009290:	20021824 	.word	0x20021824

08009294 <pvPortRealloc>:
/*-----------------------------------------------------------*/

void *pvPortRealloc(void *mem, size_t newsize)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
	//test mem
	uint8_t *puc = (uint8_t *) mem;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	61fb      	str	r3, [r7, #28]
	BlockLink_t *pxLink;

	//null pointer
	if (mem == NULL)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d104      	bne.n	80092b2 <pvPortRealloc+0x1e>
		return pvPortMalloc(newsize); //TODO
 80092a8:	6838      	ldr	r0, [r7, #0]
 80092aa:	f7ff fed9 	bl	8009060 <pvPortMalloc>
 80092ae:	4603      	mov	r3, r0
 80092b0:	e046      	b.n	8009340 <pvPortRealloc+0xac>

	/* The memory will have an BlockLink_t structure immediately
	before it. */
	puc -= xHeapStructSize;
 80092b2:	2308      	movs	r3, #8
 80092b4:	425b      	negs	r3, r3
 80092b6:	69fa      	ldr	r2, [r7, #28]
 80092b8:	4413      	add	r3, r2
 80092ba:	61fb      	str	r3, [r7, #28]

	/* This casting is to keep the compiler from issuing warnings. */
	pxLink = (void *) puc;
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	61bb      	str	r3, [r7, #24]

	/* Check the block is actually allocated. */
	configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	4b20      	ldr	r3, [pc, #128]	; (8009348 <pvPortRealloc+0xb4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4013      	ands	r3, r2
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d109      	bne.n	80092e2 <pvPortRealloc+0x4e>
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	e7fe      	b.n	80092e0 <pvPortRealloc+0x4c>
	configASSERT(pxLink->pxNextFreeBlock == NULL);
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d009      	beq.n	80092fe <pvPortRealloc+0x6a>
 80092ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	60bb      	str	r3, [r7, #8]
 80092fc:	e7fe      	b.n	80092fc <pvPortRealloc+0x68>

	//old size
	size_t tempSize = pxLink->xBlockSize;
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	617b      	str	r3, [r7, #20]
	tempSize &= ~xBlockAllocatedBit;
 8009304:	4b10      	ldr	r3, [pc, #64]	; (8009348 <pvPortRealloc+0xb4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	43db      	mvns	r3, r3
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	4013      	ands	r3, r2
 800930e:	617b      	str	r3, [r7, #20]

	//amount to copy - smaller one
	tempSize = tempSize > newsize ? newsize : tempSize;
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	4293      	cmp	r3, r2
 8009316:	bf28      	it	cs
 8009318:	4613      	movcs	r3, r2
 800931a:	617b      	str	r3, [r7, #20]

	//alloc new
	void *p = pvPortMalloc(newsize);
 800931c:	6838      	ldr	r0, [r7, #0]
 800931e:	f7ff fe9f 	bl	8009060 <pvPortMalloc>
 8009322:	6138      	str	r0, [r7, #16]
	if (p)
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <pvPortRealloc+0xaa>
	{
		memcpy(p, mem, tempSize);
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	6938      	ldr	r0, [r7, #16]
 8009330:	f007 f87b 	bl	801042a <memcpy>
		vPortFree(mem);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7ff ff55 	bl	80091e4 <vPortFree>
		return p;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	e000      	b.n	8009340 <pvPortRealloc+0xac>
	}
	else return NULL;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3720      	adds	r7, #32
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	2002182c 	.word	0x2002182c

0800934c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009352:	f44f 3302 	mov.w	r3, #133120	; 0x20800
 8009356:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009358:	4b27      	ldr	r3, [pc, #156]	; (80093f8 <prvHeapInit+0xac>)
 800935a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f003 0307 	and.w	r3, r3, #7
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00c      	beq.n	8009380 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3307      	adds	r3, #7
 800936a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f023 0307 	bic.w	r3, r3, #7
 8009372:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	4a1f      	ldr	r2, [pc, #124]	; (80093f8 <prvHeapInit+0xac>)
 800937c:	4413      	add	r3, r2
 800937e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009384:	4a1d      	ldr	r2, [pc, #116]	; (80093fc <prvHeapInit+0xb0>)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800938a:	4b1c      	ldr	r3, [pc, #112]	; (80093fc <prvHeapInit+0xb0>)
 800938c:	2200      	movs	r2, #0
 800938e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	4413      	add	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009398:	2208      	movs	r2, #8
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	1a9b      	subs	r3, r3, r2
 800939e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0307 	bic.w	r3, r3, #7
 80093a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4a15      	ldr	r2, [pc, #84]	; (8009400 <prvHeapInit+0xb4>)
 80093ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093ae:	4b14      	ldr	r3, [pc, #80]	; (8009400 <prvHeapInit+0xb4>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093b6:	4b12      	ldr	r3, [pc, #72]	; (8009400 <prvHeapInit+0xb4>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2200      	movs	r2, #0
 80093bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	1ad2      	subs	r2, r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093cc:	4b0c      	ldr	r3, [pc, #48]	; (8009400 <prvHeapInit+0xb4>)
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	4a0a      	ldr	r2, [pc, #40]	; (8009404 <prvHeapInit+0xb8>)
 80093da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4a09      	ldr	r2, [pc, #36]	; (8009408 <prvHeapInit+0xbc>)
 80093e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093e4:	4b09      	ldr	r3, [pc, #36]	; (800940c <prvHeapInit+0xc0>)
 80093e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093ea:	601a      	str	r2, [r3, #0]
}
 80093ec:	bf00      	nop
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20001018 	.word	0x20001018
 80093fc:	20021818 	.word	0x20021818
 8009400:	20021820 	.word	0x20021820
 8009404:	20021828 	.word	0x20021828
 8009408:	20021824 	.word	0x20021824
 800940c:	2002182c 	.word	0x2002182c

08009410 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009418:	4b28      	ldr	r3, [pc, #160]	; (80094bc <prvInsertBlockIntoFreeList+0xac>)
 800941a:	60fb      	str	r3, [r7, #12]
 800941c:	e002      	b.n	8009424 <prvInsertBlockIntoFreeList+0x14>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	429a      	cmp	r2, r3
 800942c:	d8f7      	bhi.n	800941e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	4413      	add	r3, r2
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d108      	bne.n	8009452 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	441a      	add	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	441a      	add	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	429a      	cmp	r2, r3
 8009464:	d118      	bne.n	8009498 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	4b15      	ldr	r3, [pc, #84]	; (80094c0 <prvInsertBlockIntoFreeList+0xb0>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d00d      	beq.n	800948e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	441a      	add	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	e008      	b.n	80094a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800948e:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <prvInsertBlockIntoFreeList+0xb0>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	e003      	b.n	80094a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d002      	beq.n	80094ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ae:	bf00      	nop
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20021818 	.word	0x20021818
 80094c0:	20021820 	.word	0x20021820

080094c4 <sml_attention_response_init>:
#include <sml/sml_log.h>

// sml_attention_response;

sml_attention_response *sml_attention_response_init(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
	sml_attention_response *msg = (sml_attention_response *)malloc(sizeof(sml_attention_response));
 80094ca:	2010      	movs	r0, #16
 80094cc:	f7ff fdc8 	bl	8009060 <pvPortMalloc>
 80094d0:	6078      	str	r0, [r7, #4]
	if (!msg)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d105      	bne.n	80094e4 <sml_attention_response_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_attention_response));
 80094d8:	2110      	movs	r1, #16
 80094da:	4807      	ldr	r0, [pc, #28]	; (80094f8 <sml_attention_response_init+0x34>)
 80094dc:	f002 fcf2 	bl	800bec4 <trace>
		return NULL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	e005      	b.n	80094f0 <sml_attention_response_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_attention_response));
 80094e4:	2210      	movs	r2, #16
 80094e6:	2100      	movs	r1, #0
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f006 ffa9 	bl	8010440 <memset>
	
	return msg;
 80094ee:	687b      	ldr	r3, [r7, #4]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	08011938 	.word	0x08011938

080094fc <sml_attention_response_parse>:

sml_attention_response *sml_attention_response_parse(sml_buffer *buf)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
	sml_attention_response *msg = NULL;
 8009504:	2300      	movs	r3, #0
 8009506:	60fb      	str	r3, [r7, #12]

	if (!buf)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <sml_attention_response_parse+0x16>
	{
		return NULL;
 800950e:	2300      	movs	r3, #0
 8009510:	e065      	b.n	80095de <sml_attention_response_parse+0xe2>
	}

	msg = sml_attention_response_init();
 8009512:	f7ff ffd7 	bl	80094c4 <sml_attention_response_init>
 8009516:	60f8      	str	r0, [r7, #12]
	if (!msg)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d105      	bne.n	800952a <sml_attention_response_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009524:	611a      	str	r2, [r3, #16]
		return NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	e059      	b.n	80095de <sml_attention_response_parse+0xe2>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f004 fa4d 	bl	800d9ca <sml_buf_get_next_type>
 8009530:	4603      	mov	r3, r0
 8009532:	2b70      	cmp	r3, #112	; 0x70
 8009534:	d003      	beq.n	800953e <sml_attention_response_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2232      	movs	r2, #50	; 0x32
 800953a:	611a      	str	r2, [r3, #16]
		goto error;
 800953c:	e04b      	b.n	80095d6 <sml_attention_response_parse+0xda>
	}

	if (sml_buf_get_next_length(buf) != 4)
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f004 f932 	bl	800d7a8 <sml_buf_get_next_length>
 8009544:	4603      	mov	r3, r0
 8009546:	2b04      	cmp	r3, #4
 8009548:	d003      	beq.n	8009552 <sml_attention_response_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2220      	movs	r2, #32
 800954e:	611a      	str	r2, [r3, #16]
		goto error;
 8009550:	e041      	b.n	80095d6 <sml_attention_response_parse+0xda>
	}

	if (sml_debug_output(buf))
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f004 faae 	bl	800dab4 <sml_debug_output>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <sml_attention_response_parse+0x68>
    {
		trace("\t\tATTENTION RESPONSE\r\n");
 800955e:	4822      	ldr	r0, [pc, #136]	; (80095e8 <sml_attention_response_parse+0xec>)
 8009560:	f002 fcb0 	bl	800bec4 <trace>
	}

	msg->server_id = sml_octet_string_parse(buf);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f003 fbb9 	bl	800ccdc <sml_octet_string_parse>
 800956a:	4602      	mov	r2, r0
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f004 fa19 	bl	800d9a8 <sml_buf_has_errors>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d125      	bne.n	80095c8 <sml_attention_response_parse+0xcc>

	msg->attention_number = sml_octet_string_parse(buf);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f003 fbad 	bl	800ccdc <sml_octet_string_parse>
 8009582:	4602      	mov	r2, r0
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f004 fa0d 	bl	800d9a8 <sml_buf_has_errors>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d11b      	bne.n	80095cc <sml_attention_response_parse+0xd0>

	msg->attention_message = sml_octet_string_parse(buf);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f003 fba1 	bl	800ccdc <sml_octet_string_parse>
 800959a:	4602      	mov	r2, r0
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f004 fa01 	bl	800d9a8 <sml_buf_has_errors>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d111      	bne.n	80095d0 <sml_attention_response_parse+0xd4>

	msg->attention_details = sml_tree_parse(buf);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f005 f8ed 	bl	800e78c <sml_tree_parse>
 80095b2:	4602      	mov	r2, r0
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f004 f9f5 	bl	800d9a8 <sml_buf_has_errors>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d107      	bne.n	80095d4 <sml_attention_response_parse+0xd8>

	return msg;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	e00a      	b.n	80095de <sml_attention_response_parse+0xe2>
	if (sml_buf_has_errors(buf)) goto error;
 80095c8:	bf00      	nop
 80095ca:	e004      	b.n	80095d6 <sml_attention_response_parse+0xda>
	if (sml_buf_has_errors(buf)) goto error;
 80095cc:	bf00      	nop
 80095ce:	e002      	b.n	80095d6 <sml_attention_response_parse+0xda>
	if (sml_buf_has_errors(buf)) goto error;
 80095d0:	bf00      	nop
 80095d2:	e000      	b.n	80095d6 <sml_attention_response_parse+0xda>
	if (sml_buf_has_errors(buf)) goto error;
 80095d4:	bf00      	nop

error:
	sml_attention_response_free(msg);
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 f856 	bl	8009688 <sml_attention_response_free>
	return NULL;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	08011954 	.word	0x08011954

080095ec <sml_attention_response_write>:

int sml_attention_response_write(sml_attention_response *msg, sml_buffer *buf)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <sml_attention_response_write+0x16>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d102      	bne.n	8009608 <sml_attention_response_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 8009602:	f240 33e6 	movw	r3, #998	; 0x3e6
 8009606:	e03b      	b.n	8009680 <sml_attention_response_write+0x94>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 4);
 8009608:	2204      	movs	r2, #4
 800960a:	2170      	movs	r1, #112	; 0x70
 800960c:	6838      	ldr	r0, [r7, #0]
 800960e:	f004 f92d 	bl	800d86c <sml_buf_set_type_and_length>
 8009612:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <sml_attention_response_write+0x32>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	e030      	b.n	8009680 <sml_attention_response_write+0x94>

	rv = sml_octet_string_write(msg->server_id, buf);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	4618      	mov	r0, r3
 8009626:	f003 fba5 	bl	800cd74 <sml_octet_string_write>
 800962a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <sml_attention_response_write+0x4a>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	e024      	b.n	8009680 <sml_attention_response_write+0x94>

	rv = sml_octet_string_write(msg->attention_number, buf);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f003 fb99 	bl	800cd74 <sml_octet_string_write>
 8009642:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <sml_attention_response_write+0x62>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	e018      	b.n	8009680 <sml_attention_response_write+0x94>

	rv = sml_octet_string_write(msg->attention_message, buf);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	4618      	mov	r0, r3
 8009656:	f003 fb8d 	bl	800cd74 <sml_octet_string_write>
 800965a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <sml_attention_response_write+0x7a>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	e00c      	b.n	8009680 <sml_attention_response_write+0x94>

	rv = sml_tree_write(msg->attention_details, buf);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	4618      	mov	r0, r3
 800966e:	f005 f937 	bl	800e8e0 <sml_tree_write>
 8009672:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <sml_attention_response_write+0x92>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	e000      	b.n	8009680 <sml_attention_response_write+0x94>

	return rv;
 800967e:	68fb      	ldr	r3, [r7, #12]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <sml_attention_response_free>:

void sml_attention_response_free(sml_attention_response *msg)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
	if (msg)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d016      	beq.n	80096c4 <sml_attention_response_free+0x3c>
    {
		sml_octet_string_free(msg->server_id);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4618      	mov	r0, r3
 800969c:	f003 fbaf 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->attention_number);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f003 fbaa 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->attention_message);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f003 fba5 	bl	800cdfe <sml_octet_string_free>
		sml_tree_free(msg->attention_details);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f005 f987 	bl	800e9cc <sml_tree_free>

		free(msg);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff fd90 	bl	80091e4 <vPortFree>
	}
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <sml_boolean_init>:
#include <sml/sml_log.h>

// sml_boolean;

sml_boolean *sml_boolean_init(u8 b)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	71fb      	strb	r3, [r7, #7]
	sml_boolean *boolean = (sml_boolean*)malloc(sizeof(u8));
 80096d6:	2001      	movs	r0, #1
 80096d8:	f7ff fcc2 	bl	8009060 <pvPortMalloc>
 80096dc:	60f8      	str	r0, [r7, #12]
	if (!boolean)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d105      	bne.n	80096f0 <sml_boolean_init+0x24>
    {
		trace("ERROR: malloc %ld bytes\n", sizeof(u8));
 80096e4:	2101      	movs	r1, #1
 80096e6:	4806      	ldr	r0, [pc, #24]	; (8009700 <sml_boolean_init+0x34>)
 80096e8:	f002 fbec 	bl	800bec4 <trace>
		return NULL;
 80096ec:	2300      	movs	r3, #0
 80096ee:	e003      	b.n	80096f8 <sml_boolean_init+0x2c>
	}

	*boolean = b;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	79fa      	ldrb	r2, [r7, #7]
 80096f4:	701a      	strb	r2, [r3, #0]

	return boolean;
 80096f6:	68fb      	ldr	r3, [r7, #12]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	0801196c 	.word	0x0801196c

08009704 <sml_boolean_parse>:

sml_boolean *sml_boolean_parse(sml_buffer *buf)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
    u8 v;
    sml_boolean *boolean = NULL;
 800970c:	2300      	movs	r3, #0
 800970e:	60bb      	str	r3, [r7, #8]

	if (!buf)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <sml_boolean_parse+0x16>
	{
		return NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	e04a      	b.n	80097b0 <sml_boolean_parse+0xac>
	}

	if (sml_buf_optional_is_skipped(buf))
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f004 f9b5 	bl	800da8a <sml_buf_optional_is_skipped>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <sml_boolean_parse+0x26>
    {
		return NULL;
 8009726:	2300      	movs	r3, #0
 8009728:	e042      	b.n	80097b0 <sml_boolean_parse+0xac>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_BOOLEAN)
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f004 f94d 	bl	800d9ca <sml_buf_get_next_type>
 8009730:	4603      	mov	r3, r0
 8009732:	2b40      	cmp	r3, #64	; 0x40
 8009734:	d004      	beq.n	8009740 <sml_boolean_parse+0x3c>
    {
		buf->error = SML_TYPE_BOOLEAN_EXPECTED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2214      	movs	r2, #20
 800973a:	611a      	str	r2, [r3, #16]
		return NULL;
 800973c:	2300      	movs	r3, #0
 800973e:	e037      	b.n	80097b0 <sml_boolean_parse+0xac>
	}

	if (sml_buf_get_next_length(buf) != 1)
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f004 f831 	bl	800d7a8 <sml_buf_get_next_length>
 8009746:	4603      	mov	r3, r0
 8009748:	2b01      	cmp	r3, #1
 800974a:	d004      	beq.n	8009756 <sml_boolean_parse+0x52>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2220      	movs	r2, #32
 8009750:	611a      	str	r2, [r3, #16]
		return NULL;
 8009752:	2300      	movs	r3, #0
 8009754:	e02c      	b.n	80097b0 <sml_boolean_parse+0xac>
	}

	if (sml_buf_get_current_byte(buf))
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f004 f94a 	bl	800d9f0 <sml_buf_get_current_byte>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d006      	beq.n	8009770 <sml_boolean_parse+0x6c>
    {
		sml_buf_update_bytes_read(buf, 1);
 8009762:	2101      	movs	r1, #1
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f004 f962 	bl	800da2e <sml_buf_update_bytes_read>
		v = SML_BOOLEAN_TRUE;
 800976a:	2301      	movs	r3, #1
 800976c:	73fb      	strb	r3, [r7, #15]
 800976e:	e005      	b.n	800977c <sml_boolean_parse+0x78>
	}
	else
    {
		sml_buf_update_bytes_read(buf, 1);
 8009770:	2101      	movs	r1, #1
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f004 f95b 	bl	800da2e <sml_buf_update_bytes_read>
		v = SML_BOOLEAN_FALSE;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
	}

	if (sml_debug_output(buf))
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f004 f999 	bl	800dab4 <sml_debug_output>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <sml_boolean_parse+0x8e>
    {
		trace("\t\tBOOLEAN\t%i\r\n", v);
 8009788:	7bfb      	ldrb	r3, [r7, #15]
 800978a:	4619      	mov	r1, r3
 800978c:	480a      	ldr	r0, [pc, #40]	; (80097b8 <sml_boolean_parse+0xb4>)
 800978e:	f002 fb99 	bl	800bec4 <trace>
	}

	boolean = sml_boolean_init(v);
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	4618      	mov	r0, r3
 8009796:	f7ff ff99 	bl	80096cc <sml_boolean_init>
 800979a:	60b8      	str	r0, [r7, #8]
	if (!boolean)
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d105      	bne.n	80097ae <sml_boolean_parse+0xaa>
    {
		buf->error = SML_MALLOC_ERROR;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80097a8:	611a      	str	r2, [r3, #16]
		return NULL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	e000      	b.n	80097b0 <sml_boolean_parse+0xac>
	}

	return boolean;
 80097ae:	68bb      	ldr	r3, [r7, #8]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	08011988 	.word	0x08011988

080097bc <sml_boolean_write>:

int sml_boolean_write(sml_boolean *boolean, sml_buffer *buf)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
	int rv;

	if (!buf)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <sml_boolean_write+0x16>
	{
		return SML_PARAMETER_ERROR;
 80097cc:	f240 33e6 	movw	r3, #998	; 0x3e6
 80097d0:	e02c      	b.n	800982c <sml_boolean_write+0x70>
	}

	if (boolean == 0)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d105      	bne.n	80097e4 <sml_boolean_write+0x28>
    {
		rv = sml_buf_optional_write(buf);
 80097d8:	6838      	ldr	r0, [r7, #0]
 80097da:	f004 f939 	bl	800da50 <sml_buf_optional_write>
 80097de:	60f8      	str	r0, [r7, #12]
		return rv;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	e023      	b.n	800982c <sml_boolean_write+0x70>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_BOOLEAN, 1);
 80097e4:	2201      	movs	r2, #1
 80097e6:	2140      	movs	r1, #64	; 0x40
 80097e8:	6838      	ldr	r0, [r7, #0]
 80097ea:	f004 f83f 	bl	800d86c <sml_buf_set_type_and_length>
 80097ee:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <sml_boolean_write+0x3e>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	e018      	b.n	800982c <sml_boolean_write+0x70>

	if (*boolean == SML_BOOLEAN_FALSE)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d107      	bne.n	8009812 <sml_boolean_write+0x56>
    {
		buf->buffer[buf->cursor] = SML_BOOLEAN_FALSE;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	4413      	add	r3, r2
 800980c:	2200      	movs	r2, #0
 800980e:	701a      	strb	r2, [r3, #0]
 8009810:	e006      	b.n	8009820 <sml_boolean_write+0x64>
	}
	else
    {
		buf->buffer[buf->cursor] = SML_BOOLEAN_TRUE;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	4413      	add	r3, r2
 800981c:	2201      	movs	r2, #1
 800981e:	701a      	strb	r2, [r3, #0]
	}
	buf->cursor++;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	609a      	str	r2, [r3, #8]

	return rv;
 800982a:	68fb      	ldr	r3, [r7, #12]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <sml_boolean_free>:

void sml_boolean_free(sml_boolean *b)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	if (b)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <sml_boolean_free+0x14>
    {
		free(b);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff fcce 	bl	80091e4 <vPortFree>
	}
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <sml_close_request_init>:
#include <sml/sml_log.h>

// sml_close_request;

sml_close_request *sml_close_request_init(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
	sml_close_request *msg = (sml_close_request *)malloc(sizeof(sml_close_request));
 8009856:	2004      	movs	r0, #4
 8009858:	f7ff fc02 	bl	8009060 <pvPortMalloc>
 800985c:	6078      	str	r0, [r7, #4]
	if (!msg)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d105      	bne.n	8009870 <sml_close_request_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_close_request));
 8009864:	2104      	movs	r1, #4
 8009866:	4807      	ldr	r0, [pc, #28]	; (8009884 <sml_close_request_init+0x34>)
 8009868:	f002 fb2c 	bl	800bec4 <trace>
		return NULL;
 800986c:	2300      	movs	r3, #0
 800986e:	e005      	b.n	800987c <sml_close_request_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_close_request));
 8009870:	2204      	movs	r2, #4
 8009872:	2100      	movs	r1, #0
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f006 fde3 	bl	8010440 <memset>
	
	return msg;
 800987a:	687b      	ldr	r3, [r7, #4]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	08011998 	.word	0x08011998

08009888 <sml_close_request_parse>:

sml_close_request *sml_close_request_parse(sml_buffer *buf)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	sml_close_request *msg = NULL;
 8009890:	2300      	movs	r3, #0
 8009892:	60fb      	str	r3, [r7, #12]

	if (!buf)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <sml_close_request_parse+0x16>
	{
		return NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	e03b      	b.n	8009916 <sml_close_request_parse+0x8e>
	}

	msg = sml_close_request_init();
 800989e:	f7ff ffd7 	bl	8009850 <sml_close_request_init>
 80098a2:	60f8      	str	r0, [r7, #12]
	if (!msg)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d105      	bne.n	80098b6 <sml_close_request_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80098b0:	611a      	str	r2, [r3, #16]
		return NULL;
 80098b2:	2300      	movs	r3, #0
 80098b4:	e02f      	b.n	8009916 <sml_close_request_parse+0x8e>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f004 f887 	bl	800d9ca <sml_buf_get_next_type>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b70      	cmp	r3, #112	; 0x70
 80098c0:	d003      	beq.n	80098ca <sml_close_request_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2232      	movs	r2, #50	; 0x32
 80098c6:	611a      	str	r2, [r3, #16]
		goto error;
 80098c8:	e021      	b.n	800990e <sml_close_request_parse+0x86>
	}

	if (sml_buf_get_next_length(buf) != 1)
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f003 ff6c 	bl	800d7a8 <sml_buf_get_next_length>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d003      	beq.n	80098de <sml_close_request_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2220      	movs	r2, #32
 80098da:	611a      	str	r2, [r3, #16]
		goto error;
 80098dc:	e017      	b.n	800990e <sml_close_request_parse+0x86>
	}

	if (sml_debug_output(buf))
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f004 f8e8 	bl	800dab4 <sml_debug_output>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <sml_close_request_parse+0x68>
    {
		trace("\t\tCLOSE REQUEST\r\n");
 80098ea:	480d      	ldr	r0, [pc, #52]	; (8009920 <sml_close_request_parse+0x98>)
 80098ec:	f002 faea 	bl	800bec4 <trace>
	}

	msg->global_signature = sml_octet_string_parse(buf);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f003 f9f3 	bl	800ccdc <sml_octet_string_parse>
 80098f6:	4602      	mov	r2, r0
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f004 f853 	bl	800d9a8 <sml_buf_has_errors>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <sml_close_request_parse+0x84>

	return msg;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	e004      	b.n	8009916 <sml_close_request_parse+0x8e>
	if (sml_buf_has_errors(buf)) goto error;
 800990c:	bf00      	nop

error:
	sml_close_request_free(msg);
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 f82b 	bl	800996a <sml_close_request_free>
	return NULL;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	080119b4 	.word	0x080119b4

08009924 <sml_close_request_write>:

int sml_close_request_write(sml_close_request *msg, sml_buffer *buf)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
	int rv = SML_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	60fb      	str	r3, [r7, #12]

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 1);
 8009932:	2201      	movs	r2, #1
 8009934:	2170      	movs	r1, #112	; 0x70
 8009936:	6838      	ldr	r0, [r7, #0]
 8009938:	f003 ff98 	bl	800d86c <sml_buf_set_type_and_length>
 800993c:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <sml_close_request_write+0x24>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	e00c      	b.n	8009962 <sml_close_request_write+0x3e>

	rv = sml_octet_string_write(msg->global_signature, buf);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f003 fa10 	bl	800cd74 <sml_octet_string_write>
 8009954:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <sml_close_request_write+0x3c>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	e000      	b.n	8009962 <sml_close_request_write+0x3e>

	return rv;
 8009960:	68fb      	ldr	r3, [r7, #12]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <sml_close_request_free>:

void sml_close_request_free(sml_close_request *msg)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
	if (msg)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d007      	beq.n	8009988 <sml_close_request_free+0x1e>
    {
		sml_octet_string_free(msg->global_signature);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4618      	mov	r0, r3
 800997e:	f003 fa3e 	bl	800cdfe <sml_octet_string_free>
		free(msg);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff fc2e 	bl	80091e4 <vPortFree>
	}
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <sml_close_response_init>:
#include <sml/sml_log.h>

// sml_close_response;

sml_close_response *sml_close_response_init(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
	sml_close_response *msg = (sml_close_response *)malloc(sizeof(sml_close_response));
 8009996:	2004      	movs	r0, #4
 8009998:	f7ff fb62 	bl	8009060 <pvPortMalloc>
 800999c:	6078      	str	r0, [r7, #4]
	if (!msg)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d105      	bne.n	80099b0 <sml_close_response_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_close_response));
 80099a4:	2104      	movs	r1, #4
 80099a6:	4807      	ldr	r0, [pc, #28]	; (80099c4 <sml_close_response_init+0x34>)
 80099a8:	f002 fa8c 	bl	800bec4 <trace>
		return NULL;
 80099ac:	2300      	movs	r3, #0
 80099ae:	e005      	b.n	80099bc <sml_close_response_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_close_response));
 80099b0:	2204      	movs	r2, #4
 80099b2:	2100      	movs	r1, #0
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f006 fd43 	bl	8010440 <memset>
	
	return msg;
 80099ba:	687b      	ldr	r3, [r7, #4]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	080119c8 	.word	0x080119c8

080099c8 <sml_close_response_parse>:

sml_close_response *sml_close_response_parse(sml_buffer *buf)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
	sml_close_response *msg = NULL;
 80099d0:	2300      	movs	r3, #0
 80099d2:	60fb      	str	r3, [r7, #12]

	if (!buf)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <sml_close_response_parse+0x16>
	{
		return NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	e03b      	b.n	8009a56 <sml_close_response_parse+0x8e>
	}

	msg = sml_close_response_init();
 80099de:	f7ff ffd7 	bl	8009990 <sml_close_response_init>
 80099e2:	60f8      	str	r0, [r7, #12]
	if (!msg)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d105      	bne.n	80099f6 <sml_close_response_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80099f0:	611a      	str	r2, [r3, #16]
		return NULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	e02f      	b.n	8009a56 <sml_close_response_parse+0x8e>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f003 ffe7 	bl	800d9ca <sml_buf_get_next_type>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b70      	cmp	r3, #112	; 0x70
 8009a00:	d003      	beq.n	8009a0a <sml_close_response_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2232      	movs	r2, #50	; 0x32
 8009a06:	611a      	str	r2, [r3, #16]
		goto error;
 8009a08:	e021      	b.n	8009a4e <sml_close_response_parse+0x86>
	}

	if (sml_buf_get_next_length(buf) != 1)
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f003 fecc 	bl	800d7a8 <sml_buf_get_next_length>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d003      	beq.n	8009a1e <sml_close_response_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	611a      	str	r2, [r3, #16]
		goto error;
 8009a1c:	e017      	b.n	8009a4e <sml_close_response_parse+0x86>
	}

	if (sml_debug_output(buf))
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f004 f848 	bl	800dab4 <sml_debug_output>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <sml_close_response_parse+0x68>
    {
		trace("\t\tCLOSE RESPONSE\r\n");
 8009a2a:	480d      	ldr	r0, [pc, #52]	; (8009a60 <sml_close_response_parse+0x98>)
 8009a2c:	f002 fa4a 	bl	800bec4 <trace>
	}

	msg->global_signature = sml_octet_string_parse(buf);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f003 f953 	bl	800ccdc <sml_octet_string_parse>
 8009a36:	4602      	mov	r2, r0
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f003 ffb3 	bl	800d9a8 <sml_buf_has_errors>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <sml_close_response_parse+0x84>

	return msg;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	e004      	b.n	8009a56 <sml_close_response_parse+0x8e>
	if (sml_buf_has_errors(buf)) goto error;
 8009a4c:	bf00      	nop

error:
	sml_close_response_free(msg);
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 f832 	bl	8009ab8 <sml_close_response_free>
	return NULL;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	080119e4 	.word	0x080119e4

08009a64 <sml_close_response_write>:

int sml_close_response_write(sml_close_response *msg, sml_buffer *buf)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <sml_close_response_write+0x16>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d102      	bne.n	8009a80 <sml_close_response_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 8009a7a:	f240 33e6 	movw	r3, #998	; 0x3e6
 8009a7e:	e017      	b.n	8009ab0 <sml_close_response_write+0x4c>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 1);
 8009a80:	2201      	movs	r2, #1
 8009a82:	2170      	movs	r1, #112	; 0x70
 8009a84:	6838      	ldr	r0, [r7, #0]
 8009a86:	f003 fef1 	bl	800d86c <sml_buf_set_type_and_length>
 8009a8a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <sml_close_response_write+0x32>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	e00c      	b.n	8009ab0 <sml_close_response_write+0x4c>

	rv = sml_octet_string_write(msg->global_signature, buf);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f003 f969 	bl	800cd74 <sml_octet_string_write>
 8009aa2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <sml_close_response_write+0x4a>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	e000      	b.n	8009ab0 <sml_close_response_write+0x4c>

	return rv;
 8009aae:	68fb      	ldr	r3, [r7, #12]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <sml_close_response_free>:

void sml_close_response_free(sml_close_response *msg)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
	if (msg)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d007      	beq.n	8009ad6 <sml_close_response_free+0x1e>
    {
		sml_octet_string_free(msg->global_signature);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f003 f997 	bl	800cdfe <sml_octet_string_free>

		free(msg);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7ff fb87 	bl	80091e4 <vPortFree>
	}
}
 8009ad6:	bf00      	nop
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <sml_crc16_calculate>:
		0x8238, 0x93b1, 0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9, 0xf78f, 0xe606, 0xd49d,
		0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330, 0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

u16 sml_crc16_calculate(unsigned char *cp, int len)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
	u16 fcs = PPPINITFCS16;
 8009aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009aee:	81fb      	strh	r3, [r7, #14]
	
	while (len--)
 8009af0:	e00e      	b.n	8009b10 <sml_crc16_calculate+0x30>
    {
		fcs = (fcs >> 8) ^ fcstab[(fcs ^ *cp++) & 0xff];
 8009af2:	89fb      	ldrh	r3, [r7, #14]
 8009af4:	0a1b      	lsrs	r3, r3, #8
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	89f9      	ldrh	r1, [r7, #14]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	1c58      	adds	r0, r3, #1
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	404b      	eors	r3, r1
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	490f      	ldr	r1, [pc, #60]	; (8009b44 <sml_crc16_calculate+0x64>)
 8009b08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009b0c:	4053      	eors	r3, r2
 8009b0e:	81fb      	strh	r3, [r7, #14]
	while (len--)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	1e5a      	subs	r2, r3, #1
 8009b14:	603a      	str	r2, [r7, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1eb      	bne.n	8009af2 <sml_crc16_calculate+0x12>
	}
	
	fcs ^= 0xffff;
 8009b1a:	89fb      	ldrh	r3, [r7, #14]
 8009b1c:	43db      	mvns	r3, r3
 8009b1e:	81fb      	strh	r3, [r7, #14]
	fcs = ((fcs & 0xff) << 8) | ((fcs & 0xff00) >> 8);
 8009b20:	89fb      	ldrh	r3, [r7, #14]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	b21a      	sxth	r2, r3
 8009b26:	89fb      	ldrh	r3, [r7, #14]
 8009b28:	0a1b      	lsrs	r3, r3, #8
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	b21b      	sxth	r3, r3
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	b21b      	sxth	r3, r3
 8009b32:	81fb      	strh	r3, [r7, #14]

	return fcs;
 8009b34:	89fb      	ldrh	r3, [r7, #14]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	20000090 	.word	0x20000090

08009b48 <sml_file_init>:
#include <sml/sml_number.h>
#include <sml/sml_time.h>
#include <sml/sml_log.h>

sml_file *sml_file_init(int flags)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	return sml_file_init2(SML_BUFFER_LENGTH, flags);
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8009b56:	f000 f805 	bl	8009b64 <sml_file_init2>
 8009b5a:	4603      	mov	r3, r0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <sml_file_init2>:

sml_file *sml_file_init2(size_t buffer_len, int flags)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
	sml_buffer *buf = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]

	sml_file *file = (sml_file*)malloc(sizeof(sml_file));
 8009b72:	200c      	movs	r0, #12
 8009b74:	f7ff fa74 	bl	8009060 <pvPortMalloc>
 8009b78:	60b8      	str	r0, [r7, #8]
	if (!file)
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d105      	bne.n	8009b8c <sml_file_init2+0x28>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_file));
 8009b80:	210c      	movs	r1, #12
 8009b82:	480e      	ldr	r0, [pc, #56]	; (8009bbc <sml_file_init2+0x58>)
 8009b84:	f002 f99e 	bl	800bec4 <trace>
		return NULL;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e012      	b.n	8009bb2 <sml_file_init2+0x4e>
	}

	memset(file, 0, sizeof(sml_file));
 8009b8c:	220c      	movs	r2, #12
 8009b8e:	2100      	movs	r1, #0
 8009b90:	68b8      	ldr	r0, [r7, #8]
 8009b92:	f006 fc55 	bl	8010440 <memset>

	buf = sml_buffer_init(buffer_len, flags);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f003 fd55 	bl	800d648 <sml_buffer_init>
 8009b9e:	60f8      	str	r0, [r7, #12]
	if (!buf)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <sml_file_init2+0x46>
	{
		return NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e003      	b.n	8009bb2 <sml_file_init2+0x4e>
	}

	file->buf = buf;
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	609a      	str	r2, [r3, #8]

	return file;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	080119f8 	.word	0x080119f8

08009bc0 <sml_file_parse>:

sml_file *sml_file_parse(unsigned char *buffer, size_t buffer_len, int flags)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
    size_t size = buffer_len + SML_BUFFER_ADDITIONAL_LENGTH;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	3380      	adds	r3, #128	; 0x80
 8009bd0:	61fb      	str	r3, [r7, #28]
    sml_buffer *buf = NULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	61bb      	str	r3, [r7, #24]

	if (!buffer || (buffer_len == 0))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <sml_file_parse+0x22>
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <sml_file_parse+0x26>
	{
		return NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e056      	b.n	8009c94 <sml_file_parse+0xd4>
	}

    sml_file *file = sml_file_init2(size, flags);
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	69f8      	ldr	r0, [r7, #28]
 8009bea:	f7ff ffbb 	bl	8009b64 <sml_file_init2>
 8009bee:	6178      	str	r0, [r7, #20]
	if (!file)
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d101      	bne.n	8009bfa <sml_file_parse+0x3a>
    {
		return NULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e04c      	b.n	8009c94 <sml_file_parse+0xd4>
	}
	buf = file->buf;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	61bb      	str	r3, [r7, #24]
	memcpy(buf->buffer, buffer, buffer_len);
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	68f9      	ldr	r1, [r7, #12]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f006 fc0e 	bl	801042a <memcpy>

	// parsing all messages
	for (; buf->cursor < (int)buf->buffer_len;)
 8009c0e:	e038      	b.n	8009c82 <sml_file_parse+0xc2>
    {
        sml_message *msg = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	613b      	str	r3, [r7, #16]

		if(sml_buf_get_current_byte(buf) == SML_MESSAGE_END)
 8009c14:	69b8      	ldr	r0, [r7, #24]
 8009c16:	f003 feeb 	bl	800d9f0 <sml_buf_get_current_byte>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d104      	bne.n	8009c2a <sml_file_parse+0x6a>
        {
			// reading trailing zeroed bytes
			sml_buf_update_bytes_read(buf, 1);
 8009c20:	2101      	movs	r1, #1
 8009c22:	69b8      	ldr	r0, [r7, #24]
 8009c24:	f003 ff03 	bl	800da2e <sml_buf_update_bytes_read>
			continue;
 8009c28:	e02b      	b.n	8009c82 <sml_file_parse+0xc2>
		}

        msg = sml_message_parse(buf);
 8009c2a:	69b8      	ldr	r0, [r7, #24]
 8009c2c:	f002 f99e 	bl	800bf6c <sml_message_parse>
 8009c30:	6138      	str	r0, [r7, #16]

        if (buf->error == SML_MESSAGE_CRC_ERROR)
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	2bc8      	cmp	r3, #200	; 0xc8
 8009c38:	d10f      	bne.n	8009c5a <sml_file_parse+0x9a>
        {
            if (flags & SML_FLAGS_IGNORE_CRC_ERRORS)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <sml_file_parse+0x8c>
            {
		        buf->error = 0;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2200      	movs	r2, #0
 8009c48:	611a      	str	r2, [r3, #16]
 8009c4a:	e006      	b.n	8009c5a <sml_file_parse+0x9a>
            }
            else
            {
                if (msg)
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <sml_file_parse+0x9a>
                {
                    sml_message_free(msg);
 8009c52:	6938      	ldr	r0, [r7, #16]
 8009c54:	f002 fae4 	bl	800c220 <sml_message_free>
                    break;
 8009c58:	e01b      	b.n	8009c92 <sml_file_parse+0xd2>
                }
            }
        }

		if (sml_buf_has_errors(buf))
 8009c5a:	69b8      	ldr	r0, [r7, #24]
 8009c5c:	f003 fea4 	bl	800d9a8 <sml_buf_has_errors>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d009      	beq.n	8009c7a <sml_file_parse+0xba>
        {
			if (sml_debug_output(buf))
 8009c66:	69b8      	ldr	r0, [r7, #24]
 8009c68:	f003 ff24 	bl	800dab4 <sml_debug_output>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00e      	beq.n	8009c90 <sml_file_parse+0xd0>
            {
				trace("warning: could not read the whole file\n");
 8009c72:	480a      	ldr	r0, [pc, #40]	; (8009c9c <sml_file_parse+0xdc>)
 8009c74:	f002 f926 	bl	800bec4 <trace>
			}
			break;
 8009c78:	e00a      	b.n	8009c90 <sml_file_parse+0xd0>
		}

	    sml_file_add_message(file, msg);
 8009c7a:	6939      	ldr	r1, [r7, #16]
 8009c7c:	6978      	ldr	r0, [r7, #20]
 8009c7e:	f000 f87f 	bl	8009d80 <sml_file_add_message>
	for (; buf->cursor < (int)buf->buffer_len;)
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d3c0      	bcc.n	8009c10 <sml_file_parse+0x50>
 8009c8e:	e000      	b.n	8009c92 <sml_file_parse+0xd2>
			break;
 8009c90:	bf00      	nop
	}

	return file;
 8009c92:	697b      	ldr	r3, [r7, #20]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3720      	adds	r7, #32
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	08011a14 	.word	0x08011a14

08009ca0 <sml_file_write>:

int sml_file_write(sml_file *file)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
	int rv = SML_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]
	
	if (!file)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d102      	bne.n	8009cb8 <sml_file_write+0x18>
	{
		return SML_PARAMETER_ERROR;
 8009cb2:	f240 33e6 	movw	r3, #998	; 0x3e6
 8009cb6:	e028      	b.n	8009d0a <sml_file_write+0x6a>
	}

	if (file->messages && file->messages_len > 0)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d023      	beq.n	8009d08 <sml_file_write+0x68>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	dd1e      	ble.n	8009d08 <sml_file_write+0x68>
    {
		int i;
		for (i = 0; i < file->messages_len; i++)
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60bb      	str	r3, [r7, #8]
 8009cce:	e014      	b.n	8009cfa <sml_file_write+0x5a>
        {
			rv = sml_message_write(file->messages[i], file->buf);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	f002 f9f8 	bl	800c0d8 <sml_message_write>
 8009ce8:	60f8      	str	r0, [r7, #12]
			if (rv != SML_OK) return rv;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <sml_file_write+0x54>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	e00a      	b.n	8009d0a <sml_file_write+0x6a>
		for (i = 0; i < file->messages_len; i++)
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	60bb      	str	r3, [r7, #8]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009d00:	461a      	mov	r2, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4293      	cmp	r3, r2
 8009d06:	dbe3      	blt.n	8009cd0 <sml_file_write+0x30>
		}
	}

	return rv;
 8009d08:	68fb      	ldr	r3, [r7, #12]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <sml_file_free>:

void sml_file_free(sml_file *file)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
	if (file)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d02a      	beq.n	8009d76 <sml_file_free+0x64>
	{
		if (file->messages)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d01a      	beq.n	8009d5e <sml_file_free+0x4c>
		{
			int i;
			for (i = 0; i < file->messages_len; i++)
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	e00b      	b.n	8009d46 <sml_file_free+0x34>
			{
				sml_message_free(file->messages[i]);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f002 fa70 	bl	800c220 <sml_message_free>
			for (i = 0; i < file->messages_len; i++)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	3301      	adds	r3, #1
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4293      	cmp	r3, r2
 8009d52:	dbec      	blt.n	8009d2e <sml_file_free+0x1c>
			}
			free(file->messages);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff fa43 	bl	80091e4 <vPortFree>
		}

		if (file->buf)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d004      	beq.n	8009d70 <sml_file_free+0x5e>
		{
			sml_buffer_free(file->buf);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f003 fcfc 	bl	800d768 <sml_buffer_free>
		}

		free(file);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff fa37 	bl	80091e4 <vPortFree>
	}
}
 8009d76:	bf00      	nop
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <sml_file_add_message>:

int sml_file_add_message(sml_file *file, sml_message *message)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	int rv = SML_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	60fb      	str	r3, [r7, #12]

	if (!file || !message)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <sml_file_add_message+0x1a>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d102      	bne.n	8009da0 <sml_file_add_message+0x20>
	{
		return SML_PARAMETER_ERROR;
 8009d9a:	f240 33e6 	movw	r3, #998	; 0x3e6
 8009d9e:	e036      	b.n	8009e0e <sml_file_add_message+0x8e>
	}

	file->messages_len++;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	3301      	adds	r3, #1
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	b21a      	sxth	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	809a      	strh	r2, [r3, #4]
	file->messages = (sml_message **)realloc(file->messages, sizeof(sml_message *) * file->messages_len);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	f7ff fa67 	bl	8009294 <pvPortRealloc>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	601a      	str	r2, [r3, #0]
	if (!file->messages)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10f      	bne.n	8009df4 <sml_file_add_message+0x74>
	{
		trace("ERROR: realloc %ld bytes\n", sizeof(sml_message *) * file->messages_len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4619      	mov	r1, r3
 8009dde:	480e      	ldr	r0, [pc, #56]	; (8009e18 <sml_file_add_message+0x98>)
 8009de0:	f002 f870 	bl	800bec4 <trace>
		file->buf->error = SML_MALLOC_ERROR;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009dec:	611a      	str	r2, [r3, #16]
		return SML_MALLOC_ERROR;
 8009dee:	f240 33e7 	movw	r3, #999	; 0x3e7
 8009df2:	e00c      	b.n	8009e0e <sml_file_add_message+0x8e>
	}

	file->messages[file->messages_len - 1] = message;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009dfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e02:	3b01      	subs	r3, #1
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	601a      	str	r2, [r3, #0]

	return rv;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	08011a3c 	.word	0x08011a3c

08009e1c <sml_file_get_buffer_len>:
	}
	return buf;
}

int sml_file_get_buffer_len(sml_file *file)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
	int len = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	60fb      	str	r3, [r7, #12]
	if (file->buf)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <sml_file_get_buffer_len+0x1c>
    {
		len = file->buf->cursor;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	60fb      	str	r3, [r7, #12]
	}
	return len;
 8009e38:	68fb      	ldr	r3, [r7, #12]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
	...

08009e48 <sml_get_list_request_init>:
#include <sml/sml_log.h>

// sml_get_list_request;

sml_get_list_request* sml_get_list_request_init(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
	sml_get_list_request *msg = (sml_get_list_request *)malloc(sizeof(sml_get_list_request));
 8009e4e:	2014      	movs	r0, #20
 8009e50:	f7ff f906 	bl	8009060 <pvPortMalloc>
 8009e54:	6078      	str	r0, [r7, #4]
	if (!msg)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d105      	bne.n	8009e68 <sml_get_list_request_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_get_list_request));
 8009e5c:	2114      	movs	r1, #20
 8009e5e:	4807      	ldr	r0, [pc, #28]	; (8009e7c <sml_get_list_request_init+0x34>)
 8009e60:	f002 f830 	bl	800bec4 <trace>
		return NULL;
 8009e64:	2300      	movs	r3, #0
 8009e66:	e005      	b.n	8009e74 <sml_get_list_request_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_get_list_request));
 8009e68:	2214      	movs	r2, #20
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f006 fae7 	bl	8010440 <memset>
	
	return msg;
 8009e72:	687b      	ldr	r3, [r7, #4]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	08011a94 	.word	0x08011a94

08009e80 <sml_get_list_request_parse>:

sml_get_list_request *sml_get_list_request_parse(sml_buffer *buf)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
	sml_get_list_request *msg = NULL;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60fb      	str	r3, [r7, #12]

	if (!buf)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <sml_get_list_request_parse+0x16>
	{
		return NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	e073      	b.n	8009f7e <sml_get_list_request_parse+0xfe>
	}

	msg = sml_get_list_request_init();
 8009e96:	f7ff ffd7 	bl	8009e48 <sml_get_list_request_init>
 8009e9a:	60f8      	str	r0, [r7, #12]
	if (!msg)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d105      	bne.n	8009eae <sml_get_list_request_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ea8:	611a      	str	r2, [r3, #16]
		return NULL;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e067      	b.n	8009f7e <sml_get_list_request_parse+0xfe>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f003 fd8b 	bl	800d9ca <sml_buf_get_next_type>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b70      	cmp	r3, #112	; 0x70
 8009eb8:	d003      	beq.n	8009ec2 <sml_get_list_request_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2232      	movs	r2, #50	; 0x32
 8009ebe:	611a      	str	r2, [r3, #16]
		goto error;
 8009ec0:	e059      	b.n	8009f76 <sml_get_list_request_parse+0xf6>
	}

	if (sml_buf_get_next_length(buf) != 5)
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f003 fc70 	bl	800d7a8 <sml_buf_get_next_length>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b05      	cmp	r3, #5
 8009ecc:	d003      	beq.n	8009ed6 <sml_get_list_request_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	611a      	str	r2, [r3, #16]
		goto error;
 8009ed4:	e04f      	b.n	8009f76 <sml_get_list_request_parse+0xf6>
	}

	if (sml_debug_output(buf))
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f003 fdec 	bl	800dab4 <sml_debug_output>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <sml_get_list_request_parse+0x68>
    {
		trace("\t\tGET LIST REQUEST\r\n");
 8009ee2:	4829      	ldr	r0, [pc, #164]	; (8009f88 <sml_get_list_request_parse+0x108>)
 8009ee4:	f001 ffee 	bl	800bec4 <trace>
	}

	msg->client_id = sml_octet_string_parse(buf);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f002 fef7 	bl	800ccdc <sml_octet_string_parse>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f003 fd57 	bl	800d9a8 <sml_buf_has_errors>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d131      	bne.n	8009f64 <sml_get_list_request_parse+0xe4>

	msg->server_id = sml_octet_string_parse(buf);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f002 feeb 	bl	800ccdc <sml_octet_string_parse>
 8009f06:	4602      	mov	r2, r0
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f003 fd4b 	bl	800d9a8 <sml_buf_has_errors>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d127      	bne.n	8009f68 <sml_get_list_request_parse+0xe8>

	msg->username = sml_octet_string_parse(buf);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f002 fedf 	bl	800ccdc <sml_octet_string_parse>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f003 fd3f 	bl	800d9a8 <sml_buf_has_errors>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d11d      	bne.n	8009f6c <sml_get_list_request_parse+0xec>

	msg->password = sml_octet_string_parse(buf);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f002 fed3 	bl	800ccdc <sml_octet_string_parse>
 8009f36:	4602      	mov	r2, r0
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f003 fd33 	bl	800d9a8 <sml_buf_has_errors>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d113      	bne.n	8009f70 <sml_get_list_request_parse+0xf0>

	msg->list_name = sml_octet_string_parse(buf);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f002 fec7 	bl	800ccdc <sml_octet_string_parse>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f003 fd27 	bl	800d9a8 <sml_buf_has_errors>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d109      	bne.n	8009f74 <sml_get_list_request_parse+0xf4>

	return msg;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	e00c      	b.n	8009f7e <sml_get_list_request_parse+0xfe>
	if (sml_buf_has_errors(buf)) goto error;
 8009f64:	bf00      	nop
 8009f66:	e006      	b.n	8009f76 <sml_get_list_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 8009f68:	bf00      	nop
 8009f6a:	e004      	b.n	8009f76 <sml_get_list_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 8009f6c:	bf00      	nop
 8009f6e:	e002      	b.n	8009f76 <sml_get_list_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 8009f70:	bf00      	nop
 8009f72:	e000      	b.n	8009f76 <sml_get_list_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 8009f74:	bf00      	nop

error:
	sml_get_list_request_free(msg);
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 f862 	bl	800a040 <sml_get_list_request_free>
	return NULL;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	08011ab0 	.word	0x08011ab0

08009f8c <sml_get_list_request_write>:

int sml_get_list_request_write(sml_get_list_request *msg, sml_buffer *buf)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <sml_get_list_request_write+0x16>
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <sml_get_list_request_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 8009fa2:	f240 33e6 	movw	r3, #998	; 0x3e6
 8009fa6:	e047      	b.n	800a038 <sml_get_list_request_write+0xac>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 5);
 8009fa8:	2205      	movs	r2, #5
 8009faa:	2170      	movs	r1, #112	; 0x70
 8009fac:	6838      	ldr	r0, [r7, #0]
 8009fae:	f003 fc5d 	bl	800d86c <sml_buf_set_type_and_length>
 8009fb2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <sml_get_list_request_write+0x32>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	e03c      	b.n	800a038 <sml_get_list_request_write+0xac>

	rv = sml_octet_string_write(msg->client_id, buf);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f002 fed5 	bl	800cd74 <sml_octet_string_write>
 8009fca:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <sml_get_list_request_write+0x4a>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	e030      	b.n	800a038 <sml_get_list_request_write+0xac>

	rv = sml_octet_string_write(msg->server_id, buf);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f002 fec9 	bl	800cd74 <sml_octet_string_write>
 8009fe2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <sml_get_list_request_write+0x62>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	e024      	b.n	800a038 <sml_get_list_request_write+0xac>

	rv = sml_octet_string_write(msg->username, buf);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f002 febd 	bl	800cd74 <sml_octet_string_write>
 8009ffa:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <sml_get_list_request_write+0x7a>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	e018      	b.n	800a038 <sml_get_list_request_write+0xac>

	rv = sml_octet_string_write(msg->password, buf);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f002 feb1 	bl	800cd74 <sml_octet_string_write>
 800a012:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <sml_get_list_request_write+0x92>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	e00c      	b.n	800a038 <sml_get_list_request_write+0xac>

	rv = sml_octet_string_write(msg->list_name, buf);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	4618      	mov	r0, r3
 800a026:	f002 fea5 	bl	800cd74 <sml_octet_string_write>
 800a02a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <sml_get_list_request_write+0xaa>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	e000      	b.n	800a038 <sml_get_list_request_write+0xac>

	return rv;
 800a036:	68fb      	ldr	r3, [r7, #12]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <sml_get_list_request_free>:

void sml_get_list_request_free(sml_get_list_request *msg)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
	if (msg)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d01b      	beq.n	800a086 <sml_get_list_request_free+0x46>
    {
		sml_octet_string_free(msg->client_id);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4618      	mov	r0, r3
 800a054:	f002 fed3 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->server_id);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f002 fece 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->list_name);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	4618      	mov	r0, r3
 800a068:	f002 fec9 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->username);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	4618      	mov	r0, r3
 800a072:	f002 fec4 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->password);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f002 febf 	bl	800cdfe <sml_octet_string_free>
		free(msg);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff f8af 	bl	80091e4 <vPortFree>
	}
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <sml_get_list_response_init>:
#include <sml/sml_log.h>

// sml_get_list_response;

sml_get_list_response *sml_get_list_response_init(void)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
	sml_get_list_response *msg = (sml_get_list_response *)malloc(sizeof(sml_get_list_response));
 800a096:	201c      	movs	r0, #28
 800a098:	f7fe ffe2 	bl	8009060 <pvPortMalloc>
 800a09c:	6078      	str	r0, [r7, #4]
	if (!msg)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d105      	bne.n	800a0b0 <sml_get_list_response_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_get_list_response));
 800a0a4:	211c      	movs	r1, #28
 800a0a6:	4807      	ldr	r0, [pc, #28]	; (800a0c4 <sml_get_list_response_init+0x34>)
 800a0a8:	f001 ff0c 	bl	800bec4 <trace>
		return NULL;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	e005      	b.n	800a0bc <sml_get_list_response_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_get_list_response));
 800a0b0:	221c      	movs	r2, #28
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f006 f9c3 	bl	8010440 <memset>
	
	return msg;
 800a0ba:	687b      	ldr	r3, [r7, #4]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	08011ac8 	.word	0x08011ac8

0800a0c8 <sml_get_list_response_parse>:

sml_get_list_response *sml_get_list_response_parse(sml_buffer *buf)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	sml_get_list_response *msg = NULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <sml_get_list_response_parse+0x16>
	{
		return NULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e08f      	b.n	800a1fe <sml_get_list_response_parse+0x136>
	}

	msg = sml_get_list_response_init();
 800a0de:	f7ff ffd7 	bl	800a090 <sml_get_list_response_init>
 800a0e2:	60f8      	str	r0, [r7, #12]
	if (!msg)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d105      	bne.n	800a0f6 <sml_get_list_response_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a0f0:	611a      	str	r2, [r3, #16]
		return NULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e083      	b.n	800a1fe <sml_get_list_response_parse+0x136>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f003 fc67 	bl	800d9ca <sml_buf_get_next_type>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b70      	cmp	r3, #112	; 0x70
 800a100:	d003      	beq.n	800a10a <sml_get_list_response_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2232      	movs	r2, #50	; 0x32
 800a106:	611a      	str	r2, [r3, #16]
		goto error;
 800a108:	e075      	b.n	800a1f6 <sml_get_list_response_parse+0x12e>
	}

	if (sml_buf_get_next_length(buf) != 7)
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f003 fb4c 	bl	800d7a8 <sml_buf_get_next_length>
 800a110:	4603      	mov	r3, r0
 800a112:	2b07      	cmp	r3, #7
 800a114:	d003      	beq.n	800a11e <sml_get_list_response_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2220      	movs	r2, #32
 800a11a:	611a      	str	r2, [r3, #16]
		goto error;
 800a11c:	e06b      	b.n	800a1f6 <sml_get_list_response_parse+0x12e>
	}

	if (sml_debug_output(buf))
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f003 fcc8 	bl	800dab4 <sml_debug_output>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <sml_get_list_response_parse+0x68>
    {
		trace("\t\tGET LIST RESPONSE\r\n");
 800a12a:	4837      	ldr	r0, [pc, #220]	; (800a208 <sml_get_list_response_parse+0x140>)
 800a12c:	f001 feca 	bl	800bec4 <trace>
	}

	msg->client_id = sml_octet_string_parse(buf);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f002 fdd3 	bl	800ccdc <sml_octet_string_parse>
 800a136:	4602      	mov	r2, r0
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f003 fc33 	bl	800d9a8 <sml_buf_has_errors>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d149      	bne.n	800a1dc <sml_get_list_response_parse+0x114>

	msg->server_id = sml_octet_string_parse(buf);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f002 fdc7 	bl	800ccdc <sml_octet_string_parse>
 800a14e:	4602      	mov	r2, r0
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f003 fc27 	bl	800d9a8 <sml_buf_has_errors>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d13f      	bne.n	800a1e0 <sml_get_list_response_parse+0x118>

	msg->list_name = sml_octet_string_parse(buf);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f002 fdbb 	bl	800ccdc <sml_octet_string_parse>
 800a166:	4602      	mov	r2, r0
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f003 fc1b 	bl	800d9a8 <sml_buf_has_errors>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d135      	bne.n	800a1e4 <sml_get_list_response_parse+0x11c>

	msg->act_sensor_time = sml_time_parse(buf);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f003 fe8b 	bl	800de94 <sml_time_parse>
 800a17e:	4602      	mov	r2, r0
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f003 fc0f 	bl	800d9a8 <sml_buf_has_errors>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d12b      	bne.n	800a1e8 <sml_get_list_response_parse+0x120>

	msg->val_list = sml_list_parse(buf);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 fd2f 	bl	800bbf4 <sml_list_parse>
 800a196:	4602      	mov	r2, r0
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f003 fc03 	bl	800d9a8 <sml_buf_has_errors>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d121      	bne.n	800a1ec <sml_get_list_response_parse+0x124>

	msg->list_signature = sml_octet_string_parse(buf);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f002 fd97 	bl	800ccdc <sml_octet_string_parse>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	615a      	str	r2, [r3, #20]
	if (sml_buf_has_errors(buf)) goto error;
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f003 fbf7 	bl	800d9a8 <sml_buf_has_errors>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d117      	bne.n	800a1f0 <sml_get_list_response_parse+0x128>

	msg->act_gateway_time = sml_time_parse(buf);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f003 fe67 	bl	800de94 <sml_time_parse>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	619a      	str	r2, [r3, #24]
	if (sml_buf_has_errors(buf)) goto error;
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f003 fbeb 	bl	800d9a8 <sml_buf_has_errors>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10d      	bne.n	800a1f4 <sml_get_list_response_parse+0x12c>

	return msg;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	e010      	b.n	800a1fe <sml_get_list_response_parse+0x136>
	if (sml_buf_has_errors(buf)) goto error;
 800a1dc:	bf00      	nop
 800a1de:	e00a      	b.n	800a1f6 <sml_get_list_response_parse+0x12e>
	if (sml_buf_has_errors(buf)) goto error;
 800a1e0:	bf00      	nop
 800a1e2:	e008      	b.n	800a1f6 <sml_get_list_response_parse+0x12e>
	if (sml_buf_has_errors(buf)) goto error;
 800a1e4:	bf00      	nop
 800a1e6:	e006      	b.n	800a1f6 <sml_get_list_response_parse+0x12e>
	if (sml_buf_has_errors(buf)) goto error;
 800a1e8:	bf00      	nop
 800a1ea:	e004      	b.n	800a1f6 <sml_get_list_response_parse+0x12e>
	if (sml_buf_has_errors(buf)) goto error;
 800a1ec:	bf00      	nop
 800a1ee:	e002      	b.n	800a1f6 <sml_get_list_response_parse+0x12e>
	if (sml_buf_has_errors(buf)) goto error;
 800a1f0:	bf00      	nop
 800a1f2:	e000      	b.n	800a1f6 <sml_get_list_response_parse+0x12e>
	if (sml_buf_has_errors(buf)) goto error;
 800a1f4:	bf00      	nop

error:
	sml_get_list_response_free(msg);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 f87a 	bl	800a2f0 <sml_get_list_response_free>
	return NULL;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	08011ae4 	.word	0x08011ae4

0800a20c <sml_get_list_response_write>:

int sml_get_list_response_write(sml_get_list_response *msg, sml_buffer *buf)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d002      	beq.n	800a222 <sml_get_list_response_write+0x16>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <sml_get_list_response_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800a222:	f240 33e6 	movw	r3, #998	; 0x3e6
 800a226:	e05f      	b.n	800a2e8 <sml_get_list_response_write+0xdc>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 7);
 800a228:	2207      	movs	r2, #7
 800a22a:	2170      	movs	r1, #112	; 0x70
 800a22c:	6838      	ldr	r0, [r7, #0]
 800a22e:	f003 fb1d 	bl	800d86c <sml_buf_set_type_and_length>
 800a232:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <sml_get_list_response_write+0x32>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	e054      	b.n	800a2e8 <sml_get_list_response_write+0xdc>

	rv = sml_octet_string_write(msg->client_id, buf);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	4618      	mov	r0, r3
 800a246:	f002 fd95 	bl	800cd74 <sml_octet_string_write>
 800a24a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <sml_get_list_response_write+0x4a>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	e048      	b.n	800a2e8 <sml_get_list_response_write+0xdc>

	rv = sml_octet_string_write(msg->server_id, buf);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f002 fd89 	bl	800cd74 <sml_octet_string_write>
 800a262:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <sml_get_list_response_write+0x62>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	e03c      	b.n	800a2e8 <sml_get_list_response_write+0xdc>

	rv = sml_octet_string_write(msg->list_name, buf);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f002 fd7d 	bl	800cd74 <sml_octet_string_write>
 800a27a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <sml_get_list_response_write+0x7a>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	e030      	b.n	800a2e8 <sml_get_list_response_write+0xdc>

	rv = sml_time_write(msg->act_sensor_time, buf);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f003 fe97 	bl	800dfc0 <sml_time_write>
 800a292:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <sml_get_list_response_write+0x92>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	e024      	b.n	800a2e8 <sml_get_list_response_write+0xdc>

	rv = sml_list_write(msg->val_list, buf);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 fd78 	bl	800bd9a <sml_list_write>
 800a2aa:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <sml_get_list_response_write+0xaa>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	e018      	b.n	800a2e8 <sml_get_list_response_write+0xdc>

	rv = sml_octet_string_write(msg->list_signature, buf);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f002 fd59 	bl	800cd74 <sml_octet_string_write>
 800a2c2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <sml_get_list_response_write+0xc2>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	e00c      	b.n	800a2e8 <sml_get_list_response_write+0xdc>

	rv = sml_time_write(msg->act_gateway_time, buf);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f003 fe73 	bl	800dfc0 <sml_time_write>
 800a2da:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <sml_get_list_response_write+0xda>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	e000      	b.n	800a2e8 <sml_get_list_response_write+0xdc>

	return rv;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <sml_get_list_response_free>:

void sml_get_list_response_free(sml_get_list_response *msg)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
	if (msg)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d025      	beq.n	800a34a <sml_get_list_response_free+0x5a>
    {
		sml_octet_string_free(msg->client_id);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f002 fd7b 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->server_id);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f002 fd76 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->list_name);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	4618      	mov	r0, r3
 800a318:	f002 fd71 	bl	800cdfe <sml_octet_string_free>
		sml_time_free(msg->act_sensor_time);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	4618      	mov	r0, r3
 800a322:	f003 fe99 	bl	800e058 <sml_time_free>
		sml_list_free(msg->val_list);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f001 fdab 	bl	800be86 <sml_list_free>
		sml_octet_string_free(msg->list_signature);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	4618      	mov	r0, r3
 800a336:	f002 fd62 	bl	800cdfe <sml_octet_string_free>
		sml_time_free(msg->act_gateway_time);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	4618      	mov	r0, r3
 800a340:	f003 fe8a 	bl	800e058 <sml_time_free>

		free(msg);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7fe ff4d 	bl	80091e4 <vPortFree>
	}
}
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <sml_get_proc_parameter_request_init>:
#include <sml/sml_log.h>

// sml_get_proc_parameter_request;

sml_get_proc_parameter_request *sml_get_proc_parameter_request_init(void)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
	sml_get_proc_parameter_request *msg = (sml_get_proc_parameter_request *)malloc(sizeof(sml_get_proc_parameter_request));
 800a35a:	2014      	movs	r0, #20
 800a35c:	f7fe fe80 	bl	8009060 <pvPortMalloc>
 800a360:	6078      	str	r0, [r7, #4]
	if (!msg)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d105      	bne.n	800a374 <sml_get_proc_parameter_request_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_get_proc_parameter_request));
 800a368:	2114      	movs	r1, #20
 800a36a:	4807      	ldr	r0, [pc, #28]	; (800a388 <sml_get_proc_parameter_request_init+0x34>)
 800a36c:	f001 fdaa 	bl	800bec4 <trace>
		return NULL;
 800a370:	2300      	movs	r3, #0
 800a372:	e005      	b.n	800a380 <sml_get_proc_parameter_request_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_get_proc_parameter_request));
 800a374:	2214      	movs	r2, #20
 800a376:	2100      	movs	r1, #0
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f006 f861 	bl	8010440 <memset>
	
	return msg;
 800a37e:	687b      	ldr	r3, [r7, #4]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	08011afc 	.word	0x08011afc

0800a38c <sml_get_proc_parameter_request_parse>:

sml_get_proc_parameter_request *sml_get_proc_parameter_request_parse(sml_buffer *buf)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
	sml_get_proc_parameter_request *msg = NULL;
 800a394:	2300      	movs	r3, #0
 800a396:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <sml_get_proc_parameter_request_parse+0x16>
	{
		return NULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e073      	b.n	800a48a <sml_get_proc_parameter_request_parse+0xfe>
	}

	msg = sml_get_proc_parameter_request_init();
 800a3a2:	f7ff ffd7 	bl	800a354 <sml_get_proc_parameter_request_init>
 800a3a6:	60f8      	str	r0, [r7, #12]
	if (!msg)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d105      	bne.n	800a3ba <sml_get_proc_parameter_request_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a3b4:	611a      	str	r2, [r3, #16]
		return NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e067      	b.n	800a48a <sml_get_proc_parameter_request_parse+0xfe>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f003 fb05 	bl	800d9ca <sml_buf_get_next_type>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b70      	cmp	r3, #112	; 0x70
 800a3c4:	d003      	beq.n	800a3ce <sml_get_proc_parameter_request_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2232      	movs	r2, #50	; 0x32
 800a3ca:	611a      	str	r2, [r3, #16]
		goto error;
 800a3cc:	e059      	b.n	800a482 <sml_get_proc_parameter_request_parse+0xf6>
	}

	if (sml_buf_get_next_length(buf) != 5)
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f003 f9ea 	bl	800d7a8 <sml_buf_get_next_length>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b05      	cmp	r3, #5
 800a3d8:	d003      	beq.n	800a3e2 <sml_get_proc_parameter_request_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2220      	movs	r2, #32
 800a3de:	611a      	str	r2, [r3, #16]
		goto error;
 800a3e0:	e04f      	b.n	800a482 <sml_get_proc_parameter_request_parse+0xf6>
	}

	if (sml_debug_output(buf))
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f003 fb66 	bl	800dab4 <sml_debug_output>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <sml_get_proc_parameter_request_parse+0x68>
    {
		trace("\t\tGET PROC PARAMETER REQUEST\r\n");
 800a3ee:	4829      	ldr	r0, [pc, #164]	; (800a494 <sml_get_proc_parameter_request_parse+0x108>)
 800a3f0:	f001 fd68 	bl	800bec4 <trace>
	}

	msg->server_id = sml_octet_string_parse(buf);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f002 fc71 	bl	800ccdc <sml_octet_string_parse>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f003 fad1 	bl	800d9a8 <sml_buf_has_errors>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d131      	bne.n	800a470 <sml_get_proc_parameter_request_parse+0xe4>

	msg->username = sml_octet_string_parse(buf);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f002 fc65 	bl	800ccdc <sml_octet_string_parse>
 800a412:	4602      	mov	r2, r0
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f003 fac5 	bl	800d9a8 <sml_buf_has_errors>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d127      	bne.n	800a474 <sml_get_proc_parameter_request_parse+0xe8>

	msg->password = sml_octet_string_parse(buf);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f002 fc59 	bl	800ccdc <sml_octet_string_parse>
 800a42a:	4602      	mov	r2, r0
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f003 fab9 	bl	800d9a8 <sml_buf_has_errors>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d11d      	bne.n	800a478 <sml_get_proc_parameter_request_parse+0xec>

	msg->parameter_tree_path = sml_tree_path_parse(buf);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f004 f86f 	bl	800e520 <sml_tree_path_parse>
 800a442:	4602      	mov	r2, r0
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f003 faad 	bl	800d9a8 <sml_buf_has_errors>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d113      	bne.n	800a47c <sml_get_proc_parameter_request_parse+0xf0>

	msg->attribute = sml_octet_string_parse(buf);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f002 fc41 	bl	800ccdc <sml_octet_string_parse>
 800a45a:	4602      	mov	r2, r0
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f003 faa1 	bl	800d9a8 <sml_buf_has_errors>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d109      	bne.n	800a480 <sml_get_proc_parameter_request_parse+0xf4>

	return msg;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	e00c      	b.n	800a48a <sml_get_proc_parameter_request_parse+0xfe>
	if (sml_buf_has_errors(buf)) goto error;
 800a470:	bf00      	nop
 800a472:	e006      	b.n	800a482 <sml_get_proc_parameter_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 800a474:	bf00      	nop
 800a476:	e004      	b.n	800a482 <sml_get_proc_parameter_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 800a478:	bf00      	nop
 800a47a:	e002      	b.n	800a482 <sml_get_proc_parameter_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 800a47c:	bf00      	nop
 800a47e:	e000      	b.n	800a482 <sml_get_proc_parameter_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 800a480:	bf00      	nop

error:
	sml_get_proc_parameter_request_free(msg);
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 f862 	bl	800a54c <sml_get_proc_parameter_request_free>
	return NULL;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	08011b18 	.word	0x08011b18

0800a498 <sml_get_proc_parameter_request_write>:

int sml_get_proc_parameter_request_write(sml_get_proc_parameter_request *msg, sml_buffer *buf)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <sml_get_proc_parameter_request_write+0x16>
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d102      	bne.n	800a4b4 <sml_get_proc_parameter_request_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800a4ae:	f240 33e6 	movw	r3, #998	; 0x3e6
 800a4b2:	e047      	b.n	800a544 <sml_get_proc_parameter_request_write+0xac>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 5);
 800a4b4:	2205      	movs	r2, #5
 800a4b6:	2170      	movs	r1, #112	; 0x70
 800a4b8:	6838      	ldr	r0, [r7, #0]
 800a4ba:	f003 f9d7 	bl	800d86c <sml_buf_set_type_and_length>
 800a4be:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <sml_get_proc_parameter_request_write+0x32>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	e03c      	b.n	800a544 <sml_get_proc_parameter_request_write+0xac>

	rv = sml_octet_string_write(msg->server_id, buf);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f002 fc4f 	bl	800cd74 <sml_octet_string_write>
 800a4d6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <sml_get_proc_parameter_request_write+0x4a>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	e030      	b.n	800a544 <sml_get_proc_parameter_request_write+0xac>

	rv = sml_octet_string_write(msg->username, buf);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	6839      	ldr	r1, [r7, #0]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f002 fc43 	bl	800cd74 <sml_octet_string_write>
 800a4ee:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <sml_get_proc_parameter_request_write+0x62>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	e024      	b.n	800a544 <sml_get_proc_parameter_request_write+0xac>

	rv = sml_octet_string_write(msg->password, buf);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	6839      	ldr	r1, [r7, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f002 fc37 	bl	800cd74 <sml_octet_string_write>
 800a506:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <sml_get_proc_parameter_request_write+0x7a>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	e018      	b.n	800a544 <sml_get_proc_parameter_request_write+0xac>

	rv= sml_tree_path_write(msg->parameter_tree_path, buf);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	4618      	mov	r0, r3
 800a51a:	f004 f86b 	bl	800e5f4 <sml_tree_path_write>
 800a51e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <sml_get_proc_parameter_request_write+0x92>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	e00c      	b.n	800a544 <sml_get_proc_parameter_request_write+0xac>

	rv = sml_octet_string_write(msg->attribute, buf);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	4618      	mov	r0, r3
 800a532:	f002 fc1f 	bl	800cd74 <sml_octet_string_write>
 800a536:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <sml_get_proc_parameter_request_write+0xaa>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	e000      	b.n	800a544 <sml_get_proc_parameter_request_write+0xac>

	return rv;
 800a542:	68fb      	ldr	r3, [r7, #12]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <sml_get_proc_parameter_request_free>:

void sml_get_proc_parameter_request_free(sml_get_proc_parameter_request *msg)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
	if (msg)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d01b      	beq.n	800a592 <sml_get_proc_parameter_request_free+0x46>
    {
		sml_octet_string_free(msg->server_id);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4618      	mov	r0, r3
 800a560:	f002 fc4d 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->username);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	4618      	mov	r0, r3
 800a56a:	f002 fc48 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->password);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	4618      	mov	r0, r3
 800a574:	f002 fc43 	bl	800cdfe <sml_octet_string_free>
		sml_tree_path_free(msg->parameter_tree_path);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f004 f884 	bl	800e68a <sml_tree_path_free>
		sml_octet_string_free(msg->attribute);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	4618      	mov	r0, r3
 800a588:	f002 fc39 	bl	800cdfe <sml_octet_string_free>

		free(msg);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7fe fe29 	bl	80091e4 <vPortFree>
	}
}
 800a592:	bf00      	nop
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <sml_get_proc_parameter_response_init>:
#include <sml/sml_log.h>

// sml_get_proc_parameter_response;

sml_get_proc_parameter_response *sml_get_proc_parameter_response_init(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
	sml_get_proc_parameter_response *msg = (sml_get_proc_parameter_response *)malloc(sizeof(sml_get_proc_parameter_response));
 800a5a2:	200c      	movs	r0, #12
 800a5a4:	f7fe fd5c 	bl	8009060 <pvPortMalloc>
 800a5a8:	6078      	str	r0, [r7, #4]
	if (!msg)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d105      	bne.n	800a5bc <sml_get_proc_parameter_response_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_get_proc_parameter_response));
 800a5b0:	210c      	movs	r1, #12
 800a5b2:	4807      	ldr	r0, [pc, #28]	; (800a5d0 <sml_get_proc_parameter_response_init+0x34>)
 800a5b4:	f001 fc86 	bl	800bec4 <trace>
		return NULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	e005      	b.n	800a5c8 <sml_get_proc_parameter_response_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_get_proc_parameter_response));
 800a5bc:	220c      	movs	r2, #12
 800a5be:	2100      	movs	r1, #0
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f005 ff3d 	bl	8010440 <memset>
	
	return msg;
 800a5c6:	687b      	ldr	r3, [r7, #4]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	08011b38 	.word	0x08011b38

0800a5d4 <sml_get_proc_parameter_response_parse>:

sml_get_proc_parameter_response *sml_get_proc_parameter_response_parse(sml_buffer *buf)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
	sml_get_proc_parameter_response *msg = NULL;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <sml_get_proc_parameter_response_parse+0x16>
	{
		return NULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	e057      	b.n	800a69a <sml_get_proc_parameter_response_parse+0xc6>
	}

	msg = sml_get_proc_parameter_response_init();
 800a5ea:	f7ff ffd7 	bl	800a59c <sml_get_proc_parameter_response_init>
 800a5ee:	60f8      	str	r0, [r7, #12]
	if (!msg)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d105      	bne.n	800a602 <sml_get_proc_parameter_response_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a5fc:	611a      	str	r2, [r3, #16]
		return NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	e04b      	b.n	800a69a <sml_get_proc_parameter_response_parse+0xc6>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f003 f9e1 	bl	800d9ca <sml_buf_get_next_type>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b70      	cmp	r3, #112	; 0x70
 800a60c:	d003      	beq.n	800a616 <sml_get_proc_parameter_response_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2232      	movs	r2, #50	; 0x32
 800a612:	611a      	str	r2, [r3, #16]
		goto error;
 800a614:	e03d      	b.n	800a692 <sml_get_proc_parameter_response_parse+0xbe>
	}

	if (sml_buf_get_next_length(buf) != 3)
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f003 f8c6 	bl	800d7a8 <sml_buf_get_next_length>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d003      	beq.n	800a62a <sml_get_proc_parameter_response_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2220      	movs	r2, #32
 800a626:	611a      	str	r2, [r3, #16]
		goto error;
 800a628:	e033      	b.n	800a692 <sml_get_proc_parameter_response_parse+0xbe>
	}

	if (sml_debug_output(buf))
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f003 fa42 	bl	800dab4 <sml_debug_output>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <sml_get_proc_parameter_response_parse+0x68>
    {
		trace("\t\tGET PROC PARAMETER RESPONSE\r\n");
 800a636:	481b      	ldr	r0, [pc, #108]	; (800a6a4 <sml_get_proc_parameter_response_parse+0xd0>)
 800a638:	f001 fc44 	bl	800bec4 <trace>
	}

	msg->server_id = sml_octet_string_parse(buf);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f002 fb4d 	bl	800ccdc <sml_octet_string_parse>
 800a642:	4602      	mov	r2, r0
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f003 f9ad 	bl	800d9a8 <sml_buf_has_errors>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d119      	bne.n	800a688 <sml_get_proc_parameter_response_parse+0xb4>

	msg->parameter_tree_path = sml_tree_path_parse(buf);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f003 ff63 	bl	800e520 <sml_tree_path_parse>
 800a65a:	4602      	mov	r2, r0
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f003 f9a1 	bl	800d9a8 <sml_buf_has_errors>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10f      	bne.n	800a68c <sml_get_proc_parameter_response_parse+0xb8>

	msg->parameter_tree = sml_tree_parse(buf);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f004 f88d 	bl	800e78c <sml_tree_parse>
 800a672:	4602      	mov	r2, r0
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f003 f995 	bl	800d9a8 <sml_buf_has_errors>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d105      	bne.n	800a690 <sml_get_proc_parameter_response_parse+0xbc>

	return msg;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	e008      	b.n	800a69a <sml_get_proc_parameter_response_parse+0xc6>
	if (sml_buf_has_errors(buf)) goto error;
 800a688:	bf00      	nop
 800a68a:	e002      	b.n	800a692 <sml_get_proc_parameter_response_parse+0xbe>
	if (sml_buf_has_errors(buf)) goto error;
 800a68c:	bf00      	nop
 800a68e:	e000      	b.n	800a692 <sml_get_proc_parameter_response_parse+0xbe>
	if (sml_buf_has_errors(buf)) goto error;
 800a690:	bf00      	nop

error:
	sml_get_proc_parameter_response_free(msg);
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 f84a 	bl	800a72c <sml_get_proc_parameter_response_free>
	return NULL;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	08011b54 	.word	0x08011b54

0800a6a8 <sml_get_proc_parameter_response_write>:

int sml_get_proc_parameter_response_write(sml_get_proc_parameter_response *msg, sml_buffer *buf)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <sml_get_proc_parameter_response_write+0x16>
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <sml_get_proc_parameter_response_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800a6be:	f240 33e6 	movw	r3, #998	; 0x3e6
 800a6c2:	e02f      	b.n	800a724 <sml_get_proc_parameter_response_write+0x7c>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 3);
 800a6c4:	2203      	movs	r2, #3
 800a6c6:	2170      	movs	r1, #112	; 0x70
 800a6c8:	6838      	ldr	r0, [r7, #0]
 800a6ca:	f003 f8cf 	bl	800d86c <sml_buf_set_type_and_length>
 800a6ce:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <sml_get_proc_parameter_response_write+0x32>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	e024      	b.n	800a724 <sml_get_proc_parameter_response_write+0x7c>

	rv = sml_octet_string_write(msg->server_id, buf);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f002 fb47 	bl	800cd74 <sml_octet_string_write>
 800a6e6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <sml_get_proc_parameter_response_write+0x4a>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	e018      	b.n	800a724 <sml_get_proc_parameter_response_write+0x7c>

	rv = sml_tree_path_write(msg->parameter_tree_path, buf);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f003 ff7b 	bl	800e5f4 <sml_tree_path_write>
 800a6fe:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <sml_get_proc_parameter_response_write+0x62>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	e00c      	b.n	800a724 <sml_get_proc_parameter_response_write+0x7c>

	rv = sml_tree_write(msg->parameter_tree, buf);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	4618      	mov	r0, r3
 800a712:	f004 f8e5 	bl	800e8e0 <sml_tree_write>
 800a716:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d001      	beq.n	800a722 <sml_get_proc_parameter_response_write+0x7a>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	e000      	b.n	800a724 <sml_get_proc_parameter_response_write+0x7c>

	return rv;
 800a722:	68fb      	ldr	r3, [r7, #12]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <sml_get_proc_parameter_response_free>:

void sml_get_proc_parameter_response_free(sml_get_proc_parameter_response *msg)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
	if (msg)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d011      	beq.n	800a75e <sml_get_proc_parameter_response_free+0x32>
    {
		sml_octet_string_free(msg->server_id);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4618      	mov	r0, r3
 800a740:	f002 fb5d 	bl	800cdfe <sml_octet_string_free>
		sml_tree_path_free(msg->parameter_tree_path);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	4618      	mov	r0, r3
 800a74a:	f003 ff9e 	bl	800e68a <sml_tree_path_free>
		sml_tree_free(msg->parameter_tree);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	4618      	mov	r0, r3
 800a754:	f004 f93a 	bl	800e9cc <sml_tree_free>

		free(msg);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7fe fd43 	bl	80091e4 <vPortFree>
	}
}
 800a75e:	bf00      	nop
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
	...

0800a768 <sml_get_profile_list_response_init>:
#include <sml/sml_log.h>

// sml_get_profile_list_response;

sml_get_profile_list_response *sml_get_profile_list_response_init(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
	sml_get_profile_list_response *msg = (sml_get_profile_list_response *)malloc(sizeof(sml_get_profile_list_response));
 800a76e:	2024      	movs	r0, #36	; 0x24
 800a770:	f7fe fc76 	bl	8009060 <pvPortMalloc>
 800a774:	6078      	str	r0, [r7, #4]
	if (!msg)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d105      	bne.n	800a788 <sml_get_profile_list_response_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_get_profile_list_response));
 800a77c:	2124      	movs	r1, #36	; 0x24
 800a77e:	4807      	ldr	r0, [pc, #28]	; (800a79c <sml_get_profile_list_response_init+0x34>)
 800a780:	f001 fba0 	bl	800bec4 <trace>
		return NULL;
 800a784:	2300      	movs	r3, #0
 800a786:	e005      	b.n	800a794 <sml_get_profile_list_response_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_get_profile_list_response));
 800a788:	2224      	movs	r2, #36	; 0x24
 800a78a:	2100      	movs	r1, #0
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f005 fe57 	bl	8010440 <memset>
	
	return msg;
 800a792:	687b      	ldr	r3, [r7, #4]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	08011b74 	.word	0x08011b74

0800a7a0 <sml_get_profile_list_response_parse>:

sml_get_profile_list_response *sml_get_profile_list_response_parse(sml_buffer *buf)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
	sml_get_profile_list_response *msg = NULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <sml_get_profile_list_response_parse+0x16>
	{
		return NULL;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e0b1      	b.n	800a91a <sml_get_profile_list_response_parse+0x17a>
	}

	msg = sml_get_profile_list_response_init();
 800a7b6:	f7ff ffd7 	bl	800a768 <sml_get_profile_list_response_init>
 800a7ba:	60f8      	str	r0, [r7, #12]
	if (!msg)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d105      	bne.n	800a7ce <sml_get_profile_list_response_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a7c8:	611a      	str	r2, [r3, #16]
		return NULL;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	e0a5      	b.n	800a91a <sml_get_profile_list_response_parse+0x17a>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f003 f8fb 	bl	800d9ca <sml_buf_get_next_type>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b70      	cmp	r3, #112	; 0x70
 800a7d8:	d003      	beq.n	800a7e2 <sml_get_profile_list_response_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2232      	movs	r2, #50	; 0x32
 800a7de:	611a      	str	r2, [r3, #16]
		goto error;
 800a7e0:	e097      	b.n	800a912 <sml_get_profile_list_response_parse+0x172>
	}

	if (sml_buf_get_next_length(buf) != 9)
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f002 ffe0 	bl	800d7a8 <sml_buf_get_next_length>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b09      	cmp	r3, #9
 800a7ec:	d003      	beq.n	800a7f6 <sml_get_profile_list_response_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	611a      	str	r2, [r3, #16]
		goto error;
 800a7f4:	e08d      	b.n	800a912 <sml_get_profile_list_response_parse+0x172>
	}

	if (sml_debug_output(buf))
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f003 f95c 	bl	800dab4 <sml_debug_output>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <sml_get_profile_list_response_parse+0x68>
    {
		trace("\t\tGET PROFILE LIST RESPONSE\r\n");
 800a802:	4848      	ldr	r0, [pc, #288]	; (800a924 <sml_get_profile_list_response_parse+0x184>)
 800a804:	f001 fb5e 	bl	800bec4 <trace>
	}

	msg->server_id = sml_octet_string_parse(buf);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f002 fa67 	bl	800ccdc <sml_octet_string_parse>
 800a80e:	4602      	mov	r2, r0
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f003 f8c7 	bl	800d9a8 <sml_buf_has_errors>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d167      	bne.n	800a8f0 <sml_get_profile_list_response_parse+0x150>

	msg->act_time = sml_time_parse(buf);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f003 fb37 	bl	800de94 <sml_time_parse>
 800a826:	4602      	mov	r2, r0
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f003 f8bb 	bl	800d9a8 <sml_buf_has_errors>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d15d      	bne.n	800a8f4 <sml_get_profile_list_response_parse+0x154>

	msg->reg_period = sml_u32_parse(buf);
 800a838:	2204      	movs	r2, #4
 800a83a:	2160      	movs	r1, #96	; 0x60
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f002 f85b 	bl	800c8f8 <sml_number_parse>
 800a842:	4602      	mov	r2, r0
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f003 f8ad 	bl	800d9a8 <sml_buf_has_errors>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d151      	bne.n	800a8f8 <sml_get_profile_list_response_parse+0x158>

	msg->parameter_tree_path = sml_tree_path_parse(buf);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f003 fe63 	bl	800e520 <sml_tree_path_parse>
 800a85a:	4602      	mov	r2, r0
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f003 f8a1 	bl	800d9a8 <sml_buf_has_errors>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d147      	bne.n	800a8fc <sml_get_profile_list_response_parse+0x15c>

	msg->val_time = sml_time_parse(buf);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f003 fb11 	bl	800de94 <sml_time_parse>
 800a872:	4602      	mov	r2, r0
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f003 f895 	bl	800d9a8 <sml_buf_has_errors>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d13d      	bne.n	800a900 <sml_get_profile_list_response_parse+0x160>

	msg->status = sml_u64_parse(buf);
 800a884:	2208      	movs	r2, #8
 800a886:	2160      	movs	r1, #96	; 0x60
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f002 f835 	bl	800c8f8 <sml_number_parse>
 800a88e:	4602      	mov	r2, r0
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	615a      	str	r2, [r3, #20]
	if (sml_buf_has_errors(buf)) goto error;
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f003 f887 	bl	800d9a8 <sml_buf_has_errors>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d131      	bne.n	800a904 <sml_get_profile_list_response_parse+0x164>

	msg->period_list = sml_sequence_parse(buf, (void *(*)(sml_buffer *)) &sml_period_entry_parse, (void (*)(void *)) &sml_period_entry_free);
 800a8a0:	4a21      	ldr	r2, [pc, #132]	; (800a928 <sml_get_profile_list_response_parse+0x188>)
 800a8a2:	4922      	ldr	r1, [pc, #136]	; (800a92c <sml_get_profile_list_response_parse+0x18c>)
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 ffcb 	bl	800b840 <sml_sequence_parse>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	619a      	str	r2, [r3, #24]
	if (sml_buf_has_errors(buf)) goto error;
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f003 f879 	bl	800d9a8 <sml_buf_has_errors>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d125      	bne.n	800a908 <sml_get_profile_list_response_parse+0x168>

	msg->rawdata = sml_octet_string_parse(buf);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f002 fa0d 	bl	800ccdc <sml_octet_string_parse>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	61da      	str	r2, [r3, #28]
	if (sml_buf_has_errors(buf)) goto error;
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f003 f86d 	bl	800d9a8 <sml_buf_has_errors>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d11b      	bne.n	800a90c <sml_get_profile_list_response_parse+0x16c>

	msg->period_signature = sml_signature_parse(buf);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f002 fa01 	bl	800ccdc <sml_octet_string_parse>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	621a      	str	r2, [r3, #32]
	if (sml_buf_has_errors(buf)) goto error;
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f003 f861 	bl	800d9a8 <sml_buf_has_errors>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d111      	bne.n	800a910 <sml_get_profile_list_response_parse+0x170>

	return msg;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	e014      	b.n	800a91a <sml_get_profile_list_response_parse+0x17a>
	if (sml_buf_has_errors(buf)) goto error;
 800a8f0:	bf00      	nop
 800a8f2:	e00e      	b.n	800a912 <sml_get_profile_list_response_parse+0x172>
	if (sml_buf_has_errors(buf)) goto error;
 800a8f4:	bf00      	nop
 800a8f6:	e00c      	b.n	800a912 <sml_get_profile_list_response_parse+0x172>
	if (sml_buf_has_errors(buf)) goto error;
 800a8f8:	bf00      	nop
 800a8fa:	e00a      	b.n	800a912 <sml_get_profile_list_response_parse+0x172>
	if (sml_buf_has_errors(buf)) goto error;
 800a8fc:	bf00      	nop
 800a8fe:	e008      	b.n	800a912 <sml_get_profile_list_response_parse+0x172>
	if (sml_buf_has_errors(buf)) goto error;
 800a900:	bf00      	nop
 800a902:	e006      	b.n	800a912 <sml_get_profile_list_response_parse+0x172>
	if (sml_buf_has_errors(buf)) goto error;
 800a904:	bf00      	nop
 800a906:	e004      	b.n	800a912 <sml_get_profile_list_response_parse+0x172>
	if (sml_buf_has_errors(buf)) goto error;
 800a908:	bf00      	nop
 800a90a:	e002      	b.n	800a912 <sml_get_profile_list_response_parse+0x172>
	if (sml_buf_has_errors(buf)) goto error;
 800a90c:	bf00      	nop
 800a90e:	e000      	b.n	800a912 <sml_get_profile_list_response_parse+0x172>
	if (sml_buf_has_errors(buf)) goto error;
 800a910:	bf00      	nop

error:
	sml_get_profile_list_response_free(msg);
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f000 f89c 	bl	800aa50 <sml_get_profile_list_response_free>
	return NULL;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	08011b90 	.word	0x08011b90
 800a928:	0800f731 	.word	0x0800f731
 800a92c:	0800f549 	.word	0x0800f549

0800a930 <sml_get_profile_list_response_write>:

int sml_get_profile_list_response_write(sml_get_profile_list_response *msg, sml_buffer *buf)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <sml_get_profile_list_response_write+0x16>
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d102      	bne.n	800a94c <sml_get_profile_list_response_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800a946:	f240 33e6 	movw	r3, #998	; 0x3e6
 800a94a:	e07a      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 9);
 800a94c:	2209      	movs	r2, #9
 800a94e:	2170      	movs	r1, #112	; 0x70
 800a950:	6838      	ldr	r0, [r7, #0]
 800a952:	f002 ff8b 	bl	800d86c <sml_buf_set_type_and_length>
 800a956:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <sml_get_profile_list_response_write+0x32>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	e06f      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>

	rv = sml_octet_string_write(msg->server_id, buf);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	4618      	mov	r0, r3
 800a96a:	f002 fa03 	bl	800cd74 <sml_octet_string_write>
 800a96e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <sml_get_profile_list_response_write+0x4a>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	e063      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>

	rv = sml_time_write(msg->act_time, buf);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	4618      	mov	r0, r3
 800a982:	f003 fb1d 	bl	800dfc0 <sml_time_write>
 800a986:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <sml_get_profile_list_response_write+0x62>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	e057      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>

	rv = sml_u32_write(msg->reg_period, buf);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6898      	ldr	r0, [r3, #8]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2204      	movs	r2, #4
 800a99a:	2160      	movs	r1, #96	; 0x60
 800a99c:	f002 f84e 	bl	800ca3c <sml_number_write>
 800a9a0:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <sml_get_profile_list_response_write+0x7c>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	e04a      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>

	rv = sml_tree_path_write(msg->parameter_tree_path, buf);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	6839      	ldr	r1, [r7, #0]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f003 fe1e 	bl	800e5f4 <sml_tree_path_write>
 800a9b8:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <sml_get_profile_list_response_write+0x94>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	e03e      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>

	rv = sml_time_write(msg->val_time, buf);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f003 faf8 	bl	800dfc0 <sml_time_write>
 800a9d0:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <sml_get_profile_list_response_write+0xac>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	e032      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>

	rv = sml_u64_write(msg->status, buf);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6958      	ldr	r0, [r3, #20]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2208      	movs	r2, #8
 800a9e4:	2160      	movs	r1, #96	; 0x60
 800a9e6:	f002 f829 	bl	800ca3c <sml_number_write>
 800a9ea:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <sml_get_profile_list_response_write+0xc6>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	e025      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>

	rv = sml_sequence_write(msg->period_list, buf, (int (*)(void *, sml_buffer *)) &sml_period_entry_write);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	4a14      	ldr	r2, [pc, #80]	; (800aa4c <sml_get_profile_list_response_write+0x11c>)
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 ff88 	bl	800b914 <sml_sequence_write>
 800aa04:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <sml_get_profile_list_response_write+0xe0>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	e018      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>

	rv = sml_octet_string_write(msg->rawdata, buf);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	6839      	ldr	r1, [r7, #0]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f002 f9ac 	bl	800cd74 <sml_octet_string_write>
 800aa1c:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <sml_get_profile_list_response_write+0xf8>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	e00c      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>

	rv = sml_signature_write(msg->period_signature, buf);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f002 f9a0 	bl	800cd74 <sml_octet_string_write>
 800aa34:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <sml_get_profile_list_response_write+0x110>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	e000      	b.n	800aa42 <sml_get_profile_list_response_write+0x112>

	return rv;
 800aa40:	68fb      	ldr	r3, [r7, #12]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	0800f66d 	.word	0x0800f66d

0800aa50 <sml_get_profile_list_response_free>:

void sml_get_profile_list_response_free(sml_get_profile_list_response *msg)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	if (msg)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d02f      	beq.n	800aabe <sml_get_profile_list_response_free+0x6e>
    {
		sml_octet_string_free(msg->server_id);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f002 f9cb 	bl	800cdfe <sml_octet_string_free>
		sml_time_free(msg->act_time);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f003 faf3 	bl	800e058 <sml_time_free>
		sml_number_free(msg->reg_period);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f002 f88d 	bl	800cb96 <sml_number_free>
		sml_tree_path_free(msg->parameter_tree_path);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f003 fe02 	bl	800e68a <sml_tree_path_free>
		sml_time_free(msg->val_time);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f003 fae4 	bl	800e058 <sml_time_free>
		sml_number_free(msg->status);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f002 f87e 	bl	800cb96 <sml_number_free>
		sml_sequence_free(msg->period_list);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 ff7a 	bl	800b998 <sml_sequence_free>
		sml_octet_string_free(msg->rawdata);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f002 f9a8 	bl	800cdfe <sml_octet_string_free>
		sml_signature_free(msg->period_signature);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f002 f9a3 	bl	800cdfe <sml_octet_string_free>

		free(msg);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7fe fb93 	bl	80091e4 <vPortFree>
	}
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <sml_get_profile_pack_request_init>:
#include <sml/sml_log.h>

// sml_get_profile_pack_request;

sml_get_profile_pack_request *sml_get_profile_pack_request_init(void)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
	sml_get_profile_pack_request *msg = (sml_get_profile_pack_request *)malloc(sizeof(sml_get_profile_pack_request));
 800aace:	2024      	movs	r0, #36	; 0x24
 800aad0:	f7fe fac6 	bl	8009060 <pvPortMalloc>
 800aad4:	6078      	str	r0, [r7, #4]
	if (!msg)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d105      	bne.n	800aae8 <sml_get_profile_pack_request_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_get_profile_pack_request));
 800aadc:	2124      	movs	r1, #36	; 0x24
 800aade:	4807      	ldr	r0, [pc, #28]	; (800aafc <sml_get_profile_pack_request_init+0x34>)
 800aae0:	f001 f9f0 	bl	800bec4 <trace>
		return NULL;
 800aae4:	2300      	movs	r3, #0
 800aae6:	e005      	b.n	800aaf4 <sml_get_profile_pack_request_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_get_profile_pack_request));
 800aae8:	2224      	movs	r2, #36	; 0x24
 800aaea:	2100      	movs	r1, #0
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f005 fca7 	bl	8010440 <memset>
	
	return msg;
 800aaf2:	687b      	ldr	r3, [r7, #4]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	08011bb0 	.word	0x08011bb0

0800ab00 <sml_get_profile_pack_request_parse>:

sml_get_profile_pack_request *sml_get_profile_pack_request_parse(sml_buffer *buf)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	sml_get_profile_pack_request *msg = NULL;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	617b      	str	r3, [r7, #20]

	if (!buf)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <sml_get_profile_pack_request_parse+0x16>
	{
		return NULL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	e0f7      	b.n	800ad06 <sml_get_profile_pack_request_parse+0x206>
	}

	msg = sml_get_profile_pack_request_init();
 800ab16:	f7ff ffd7 	bl	800aac8 <sml_get_profile_pack_request_init>
 800ab1a:	6178      	str	r0, [r7, #20]
	if (!msg)
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d105      	bne.n	800ab2e <sml_get_profile_pack_request_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ab28:	611a      	str	r2, [r3, #16]
		return NULL;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	e0eb      	b.n	800ad06 <sml_get_profile_pack_request_parse+0x206>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f002 ff4b 	bl	800d9ca <sml_buf_get_next_type>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b70      	cmp	r3, #112	; 0x70
 800ab38:	d003      	beq.n	800ab42 <sml_get_profile_pack_request_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2232      	movs	r2, #50	; 0x32
 800ab3e:	611a      	str	r2, [r3, #16]
		goto error;
 800ab40:	e0dd      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
	}

	if (sml_buf_get_next_length(buf) != 9)
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f002 fe30 	bl	800d7a8 <sml_buf_get_next_length>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b09      	cmp	r3, #9
 800ab4c:	d003      	beq.n	800ab56 <sml_get_profile_pack_request_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2220      	movs	r2, #32
 800ab52:	611a      	str	r2, [r3, #16]
		goto error;
 800ab54:	e0d3      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
	}

	if (sml_debug_output(buf))
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f002 ffac 	bl	800dab4 <sml_debug_output>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d002      	beq.n	800ab68 <sml_get_profile_pack_request_parse+0x68>
    {
		trace("\t\tGET PROFILE PACK REQUEST\r\n");
 800ab62:	486b      	ldr	r0, [pc, #428]	; (800ad10 <sml_get_profile_pack_request_parse+0x210>)
 800ab64:	f001 f9ae 	bl	800bec4 <trace>
	}

	msg->server_id = sml_octet_string_parse(buf);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f002 f8b7 	bl	800ccdc <sml_octet_string_parse>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f002 ff17 	bl	800d9a8 <sml_buf_has_errors>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f040 80ad 	bne.w	800acdc <sml_get_profile_pack_request_parse+0x1dc>

	msg->username = sml_octet_string_parse(buf);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f002 f8aa 	bl	800ccdc <sml_octet_string_parse>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f002 ff0a 	bl	800d9a8 <sml_buf_has_errors>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f040 80a2 	bne.w	800ace0 <sml_get_profile_pack_request_parse+0x1e0>

	msg->password = sml_octet_string_parse(buf);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f002 f89d 	bl	800ccdc <sml_octet_string_parse>
 800aba2:	4602      	mov	r2, r0
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f002 fefd 	bl	800d9a8 <sml_buf_has_errors>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f040 8097 	bne.w	800ace4 <sml_get_profile_pack_request_parse+0x1e4>

	msg->with_rawdata = sml_boolean_parse(buf);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7fe fda4 	bl	8009704 <sml_boolean_parse>
 800abbc:	4602      	mov	r2, r0
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f002 fef0 	bl	800d9a8 <sml_buf_has_errors>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f040 808c 	bne.w	800ace8 <sml_get_profile_pack_request_parse+0x1e8>

	msg->begin_time = sml_time_parse(buf);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f003 f95f 	bl	800de94 <sml_time_parse>
 800abd6:	4602      	mov	r2, r0
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f002 fee3 	bl	800d9a8 <sml_buf_has_errors>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f040 8081 	bne.w	800acec <sml_get_profile_pack_request_parse+0x1ec>

	msg->end_time = sml_time_parse(buf);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f003 f952 	bl	800de94 <sml_time_parse>
 800abf0:	4602      	mov	r2, r0
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	615a      	str	r2, [r3, #20]
	if (sml_buf_has_errors(buf)) goto error;
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f002 fed6 	bl	800d9a8 <sml_buf_has_errors>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d176      	bne.n	800acf0 <sml_get_profile_pack_request_parse+0x1f0>

	msg->parameter_tree_path = sml_tree_path_parse(buf);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f003 fc8c 	bl	800e520 <sml_tree_path_parse>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	619a      	str	r2, [r3, #24]
	if (sml_buf_has_errors(buf)) goto error;
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f002 feca 	bl	800d9a8 <sml_buf_has_errors>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d16c      	bne.n	800acf4 <sml_get_profile_pack_request_parse+0x1f4>

	if (!sml_buf_optional_is_skipped(buf))
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f002 ff35 	bl	800da8a <sml_buf_optional_is_skipped>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d14c      	bne.n	800acc0 <sml_get_profile_pack_request_parse+0x1c0>
    {
        int i, len = sml_buf_get_next_length(buf);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f002 fdbe 	bl	800d7a8 <sml_buf_get_next_length>
 800ac2c:	6138      	str	r0, [r7, #16]
		sml_obj_req_entry_list *last = 0, *n = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61bb      	str	r3, [r7, #24]
 800ac32:	2300      	movs	r3, #0
 800ac34:	60fb      	str	r3, [r7, #12]
        
        if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f002 fec7 	bl	800d9ca <sml_buf_get_next_type>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b70      	cmp	r3, #112	; 0x70
 800ac40:	d003      	beq.n	800ac4a <sml_get_profile_pack_request_parse+0x14a>
        {
			buf->error = SML_TYPE_LIST_EXPECTED;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2232      	movs	r2, #50	; 0x32
 800ac46:	611a      	str	r2, [r3, #16]
			goto error;
 800ac48:	e059      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
		}

		for (i = len; i > 0; i--)
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	61fb      	str	r3, [r7, #28]
 800ac4e:	e034      	b.n	800acba <sml_get_profile_pack_request_parse+0x1ba>
        {
			n = (sml_obj_req_entry_list *)malloc(sizeof(sml_obj_req_entry_list));
 800ac50:	2008      	movs	r0, #8
 800ac52:	f7fe fa05 	bl	8009060 <pvPortMalloc>
 800ac56:	60f8      	str	r0, [r7, #12]
			if (!n)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d109      	bne.n	800ac72 <sml_get_profile_pack_request_parse+0x172>
            {
				trace("ERROR: malloc %ld bytes\n", sizeof(sml_obj_req_entry_list));
 800ac5e:	2108      	movs	r1, #8
 800ac60:	482c      	ldr	r0, [pc, #176]	; (800ad14 <sml_get_profile_pack_request_parse+0x214>)
 800ac62:	f001 f92f 	bl	800bec4 <trace>
				buf->error = SML_MALLOC_ERROR;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ac6c:	611a      	str	r2, [r3, #16]
				return NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e049      	b.n	800ad06 <sml_get_profile_pack_request_parse+0x206>
			}

			memset(n, 0, sizeof(sml_obj_req_entry_list));
 800ac72:	2208      	movs	r2, #8
 800ac74:	2100      	movs	r1, #0
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f005 fbe2 	bl	8010440 <memset>
			n->object_list_entry = sml_obj_req_entry_parse(buf);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f002 f82d 	bl	800ccdc <sml_octet_string_parse>
 800ac82:	4602      	mov	r2, r0
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	601a      	str	r2, [r3, #0]
			if (sml_buf_has_errors(buf)) goto error;
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f002 fe8d 	bl	800d9a8 <sml_buf_has_errors>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d131      	bne.n	800acf8 <sml_get_profile_pack_request_parse+0x1f8>

			if (msg->object_list == 0)
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	69db      	ldr	r3, [r3, #28]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d106      	bne.n	800acaa <sml_get_profile_pack_request_parse+0x1aa>
            {
				msg->object_list = n;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	61da      	str	r2, [r3, #28]
				last = msg->object_list;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	61bb      	str	r3, [r7, #24]
 800aca8:	e004      	b.n	800acb4 <sml_get_profile_pack_request_parse+0x1b4>
			}
			else
            {
				last->next = n;
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	605a      	str	r2, [r3, #4]
				last = n;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	61bb      	str	r3, [r7, #24]
		for (i = len; i > 0; i--)
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	61fb      	str	r3, [r7, #28]
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	dcc7      	bgt.n	800ac50 <sml_get_profile_pack_request_parse+0x150>
			}
		}
	}

	msg->das_details = sml_tree_parse(buf);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f003 fd63 	bl	800e78c <sml_tree_parse>
 800acc6:	4602      	mov	r2, r0
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	621a      	str	r2, [r3, #32]
	if (sml_buf_has_errors(buf)) goto error;
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f002 fe6b 	bl	800d9a8 <sml_buf_has_errors>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d111      	bne.n	800acfc <sml_get_profile_pack_request_parse+0x1fc>

	return msg;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	e014      	b.n	800ad06 <sml_get_profile_pack_request_parse+0x206>
	if (sml_buf_has_errors(buf)) goto error;
 800acdc:	bf00      	nop
 800acde:	e00e      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
	if (sml_buf_has_errors(buf)) goto error;
 800ace0:	bf00      	nop
 800ace2:	e00c      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
	if (sml_buf_has_errors(buf)) goto error;
 800ace4:	bf00      	nop
 800ace6:	e00a      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
	if (sml_buf_has_errors(buf)) goto error;
 800ace8:	bf00      	nop
 800acea:	e008      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
	if (sml_buf_has_errors(buf)) goto error;
 800acec:	bf00      	nop
 800acee:	e006      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
	if (sml_buf_has_errors(buf)) goto error;
 800acf0:	bf00      	nop
 800acf2:	e004      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
	if (sml_buf_has_errors(buf)) goto error;
 800acf4:	bf00      	nop
 800acf6:	e002      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
			if (sml_buf_has_errors(buf)) goto error;
 800acf8:	bf00      	nop
 800acfa:	e000      	b.n	800acfe <sml_get_profile_pack_request_parse+0x1fe>
	if (sml_buf_has_errors(buf)) goto error;
 800acfc:	bf00      	nop

error:
	sml_get_profile_pack_request_free(msg);
 800acfe:	6978      	ldr	r0, [r7, #20]
 800ad00:	f000 f8d7 	bl	800aeb2 <sml_get_profile_pack_request_free>
	return NULL;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3720      	adds	r7, #32
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	08011bcc 	.word	0x08011bcc
 800ad14:	08011bb0 	.word	0x08011bb0

0800ad18 <sml_get_profile_pack_request_write>:

int sml_get_profile_pack_request_write(sml_get_profile_pack_request *msg, sml_buffer *buf)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <sml_get_profile_pack_request_write+0x16>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d102      	bne.n	800ad34 <sml_get_profile_pack_request_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800ad2e:	f240 33e6 	movw	r3, #998	; 0x3e6
 800ad32:	e0ba      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 9);
 800ad34:	2209      	movs	r2, #9
 800ad36:	2170      	movs	r1, #112	; 0x70
 800ad38:	6838      	ldr	r0, [r7, #0]
 800ad3a:	f002 fd97 	bl	800d86c <sml_buf_set_type_and_length>
 800ad3e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <sml_get_profile_pack_request_write+0x32>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	e0af      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>

	rv = sml_octet_string_write(msg->server_id, buf);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f002 f80f 	bl	800cd74 <sml_octet_string_write>
 800ad56:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <sml_get_profile_pack_request_write+0x4a>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	e0a3      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>

	rv = sml_octet_string_write(msg->username, buf);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f002 f803 	bl	800cd74 <sml_octet_string_write>
 800ad6e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <sml_get_profile_pack_request_write+0x62>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	e097      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>

	rv = sml_octet_string_write(msg->password, buf);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	4618      	mov	r0, r3
 800ad82:	f001 fff7 	bl	800cd74 <sml_octet_string_write>
 800ad86:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <sml_get_profile_pack_request_write+0x7a>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	e08b      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>

	rv = sml_boolean_write(msg->with_rawdata, buf);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fe fd0f 	bl	80097bc <sml_boolean_write>
 800ad9e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <sml_get_profile_pack_request_write+0x92>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	e07f      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>

	rv = sml_time_write(msg->begin_time, buf);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f003 f905 	bl	800dfc0 <sml_time_write>
 800adb6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <sml_get_profile_pack_request_write+0xaa>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	e073      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>

	rv = sml_time_write(msg->end_time, buf);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	4618      	mov	r0, r3
 800adca:	f003 f8f9 	bl	800dfc0 <sml_time_write>
 800adce:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d001      	beq.n	800adda <sml_get_profile_pack_request_write+0xc2>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	e067      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>

	rv = sml_tree_path_write(msg->parameter_tree_path, buf);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f003 fc07 	bl	800e5f4 <sml_tree_path_write>
 800ade6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <sml_get_profile_pack_request_write+0xda>
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	e05b      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>

	if (msg->object_list)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d041      	beq.n	800ae7e <sml_get_profile_pack_request_write+0x166>
    {
		int len = 1;
 800adfa:	2301      	movs	r3, #1
 800adfc:	617b      	str	r3, [r7, #20]
		sml_obj_req_entry_list *l = msg->object_list;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	69db      	ldr	r3, [r3, #28]
 800ae02:	613b      	str	r3, [r7, #16]
		for (l = msg->object_list; l->next; l = l->next)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	69db      	ldr	r3, [r3, #28]
 800ae08:	613b      	str	r3, [r7, #16]
 800ae0a:	e005      	b.n	800ae18 <sml_get_profile_pack_request_write+0x100>
        {
			len++;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	617b      	str	r3, [r7, #20]
		for (l = msg->object_list; l->next; l = l->next)
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	613b      	str	r3, [r7, #16]
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1f5      	bne.n	800ae0c <sml_get_profile_pack_request_write+0xf4>
		}
		rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, len);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	461a      	mov	r2, r3
 800ae24:	2170      	movs	r1, #112	; 0x70
 800ae26:	6838      	ldr	r0, [r7, #0]
 800ae28:	f002 fd20 	bl	800d86c <sml_buf_set_type_and_length>
 800ae2c:	60f8      	str	r0, [r7, #12]
		if (rv != SML_OK) return rv;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <sml_get_profile_pack_request_write+0x120>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	e038      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>

		for (l = msg->object_list; l->next; l = l->next)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	613b      	str	r3, [r7, #16]
 800ae3e:	e00e      	b.n	800ae5e <sml_get_profile_pack_request_write+0x146>
        {
			rv = sml_obj_req_entry_write(l->object_list_entry, buf);
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f001 ff94 	bl	800cd74 <sml_octet_string_write>
 800ae4c:	60f8      	str	r0, [r7, #12]
			if (rv != SML_OK) return rv;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d001      	beq.n	800ae58 <sml_get_profile_pack_request_write+0x140>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	e028      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>
		for (l = msg->object_list; l->next; l = l->next)
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	613b      	str	r3, [r7, #16]
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1ec      	bne.n	800ae40 <sml_get_profile_pack_request_write+0x128>
		}
		rv = sml_obj_req_entry_write(l->object_list_entry, buf);
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f001 ff81 	bl	800cd74 <sml_octet_string_write>
 800ae72:	60f8      	str	r0, [r7, #12]
		if (rv != SML_OK) return rv;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <sml_get_profile_pack_request_write+0x178>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	e015      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>
	}
	else
    {
		rv = sml_buf_optional_write(buf);
 800ae7e:	6838      	ldr	r0, [r7, #0]
 800ae80:	f002 fde6 	bl	800da50 <sml_buf_optional_write>
 800ae84:	60f8      	str	r0, [r7, #12]
		if (rv != SML_OK) return rv;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <sml_get_profile_pack_request_write+0x178>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	e00c      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>
	}

	rv = sml_tree_write(msg->das_details, buf);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f003 fd22 	bl	800e8e0 <sml_tree_write>
 800ae9c:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <sml_get_profile_pack_request_write+0x190>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	e000      	b.n	800aeaa <sml_get_profile_pack_request_write+0x192>

	return rv;
 800aea8:	68fb      	ldr	r3, [r7, #12]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <sml_get_profile_pack_request_free>:

void sml_get_profile_pack_request_free(sml_get_profile_pack_request *msg)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
	 if (msg)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d043      	beq.n	800af48 <sml_get_profile_pack_request_free+0x96>
     {
		sml_octet_string_free(msg->server_id);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 ff9a 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->username);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	4618      	mov	r0, r3
 800aed0:	f001 ff95 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->password);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 ff90 	bl	800cdfe <sml_octet_string_free>
		sml_boolean_free(msg->with_rawdata);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe fca6 	bl	8009834 <sml_boolean_free>
		sml_time_free(msg->begin_time);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f003 f8b3 	bl	800e058 <sml_time_free>
		sml_time_free(msg->end_time);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f003 f8ae 	bl	800e058 <sml_time_free>
		sml_tree_path_free(msg->parameter_tree_path);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	4618      	mov	r0, r3
 800af02:	f003 fbc2 	bl	800e68a <sml_tree_path_free>

		if (msg->object_list)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	69db      	ldr	r3, [r3, #28]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d014      	beq.n	800af38 <sml_get_profile_pack_request_free+0x86>
        {
			sml_obj_req_entry_list *n = 0, *d = msg->object_list;
 800af0e:	2300      	movs	r3, #0
 800af10:	60bb      	str	r3, [r7, #8]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	60fb      	str	r3, [r7, #12]
			do
            {
				n = d->next;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	60bb      	str	r3, [r7, #8]
				sml_obj_req_entry_free(d->object_list_entry);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4618      	mov	r0, r3
 800af24:	f001 ff6b 	bl	800cdfe <sml_octet_string_free>
				free(d);
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f7fe f95b 	bl	80091e4 <vPortFree>
				d = n;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	60fb      	str	r3, [r7, #12]
			} while (d);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1ef      	bne.n	800af18 <sml_get_profile_pack_request_free+0x66>
		}
		
		sml_tree_free(msg->das_details);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f003 fd45 	bl	800e9cc <sml_tree_free>
		free(msg);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7fe f94e 	bl	80091e4 <vPortFree>
	}
}
 800af48:	bf00      	nop
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <sml_get_profile_pack_response_init>:
#include <sml/sml_log.h>

// sml_get_profile_pack_response;

sml_get_profile_pack_response *sml_get_profile_pack_response_init(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
	sml_get_profile_pack_response *msg = (sml_get_profile_pack_response *)malloc(sizeof(sml_get_profile_pack_response));
 800af56:	2020      	movs	r0, #32
 800af58:	f7fe f882 	bl	8009060 <pvPortMalloc>
 800af5c:	6078      	str	r0, [r7, #4]
	if (!msg)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d105      	bne.n	800af70 <sml_get_profile_pack_response_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_get_profile_pack_response));
 800af64:	2120      	movs	r1, #32
 800af66:	4807      	ldr	r0, [pc, #28]	; (800af84 <sml_get_profile_pack_response_init+0x34>)
 800af68:	f000 ffac 	bl	800bec4 <trace>
		return NULL;
 800af6c:	2300      	movs	r3, #0
 800af6e:	e005      	b.n	800af7c <sml_get_profile_pack_response_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_get_profile_pack_response));
 800af70:	2220      	movs	r2, #32
 800af72:	2100      	movs	r1, #0
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f005 fa63 	bl	8010440 <memset>
	
	return msg;
 800af7a:	687b      	ldr	r3, [r7, #4]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	08011bec 	.word	0x08011bec

0800af88 <sml_get_profile_pack_response_parse>:

sml_get_profile_pack_response *sml_get_profile_pack_response_parse(sml_buffer *buf)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
	sml_get_profile_pack_response *msg = NULL;
 800af90:	2300      	movs	r3, #0
 800af92:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <sml_get_profile_pack_response_parse+0x16>
	{
		return NULL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	e0a3      	b.n	800b0e6 <sml_get_profile_pack_response_parse+0x15e>
	}

	msg = sml_get_profile_pack_response_init();
 800af9e:	f7ff ffd7 	bl	800af50 <sml_get_profile_pack_response_init>
 800afa2:	60f8      	str	r0, [r7, #12]
	if (!msg)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d105      	bne.n	800afb6 <sml_get_profile_pack_response_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f240 32e7 	movw	r2, #999	; 0x3e7
 800afb0:	611a      	str	r2, [r3, #16]
		return NULL;
 800afb2:	2300      	movs	r3, #0
 800afb4:	e097      	b.n	800b0e6 <sml_get_profile_pack_response_parse+0x15e>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST) 
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f002 fd07 	bl	800d9ca <sml_buf_get_next_type>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b70      	cmp	r3, #112	; 0x70
 800afc0:	d003      	beq.n	800afca <sml_get_profile_pack_response_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2232      	movs	r2, #50	; 0x32
 800afc6:	611a      	str	r2, [r3, #16]
		goto error;
 800afc8:	e089      	b.n	800b0de <sml_get_profile_pack_response_parse+0x156>
	}

	if (sml_buf_get_next_length(buf) != 8)
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f002 fbec 	bl	800d7a8 <sml_buf_get_next_length>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b08      	cmp	r3, #8
 800afd4:	d003      	beq.n	800afde <sml_get_profile_pack_response_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2220      	movs	r2, #32
 800afda:	611a      	str	r2, [r3, #16]
		goto error;
 800afdc:	e07f      	b.n	800b0de <sml_get_profile_pack_response_parse+0x156>
	}

	if (sml_debug_output(buf))
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f002 fd68 	bl	800dab4 <sml_debug_output>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <sml_get_profile_pack_response_parse+0x68>
    {
		trace("\t\tGET PROFILE PACK RESPONSE\r\n");
 800afea:	4841      	ldr	r0, [pc, #260]	; (800b0f0 <sml_get_profile_pack_response_parse+0x168>)
 800afec:	f000 ff6a 	bl	800bec4 <trace>
	}

	msg->server_id = sml_octet_string_parse(buf);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f001 fe73 	bl	800ccdc <sml_octet_string_parse>
 800aff6:	4602      	mov	r2, r0
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f002 fcd3 	bl	800d9a8 <sml_buf_has_errors>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d15b      	bne.n	800b0c0 <sml_get_profile_pack_response_parse+0x138>

	msg->act_time = sml_time_parse(buf);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f002 ff43 	bl	800de94 <sml_time_parse>
 800b00e:	4602      	mov	r2, r0
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f002 fcc7 	bl	800d9a8 <sml_buf_has_errors>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d151      	bne.n	800b0c4 <sml_get_profile_pack_response_parse+0x13c>

	msg->reg_period = sml_u32_parse(buf);
 800b020:	2204      	movs	r2, #4
 800b022:	2160      	movs	r1, #96	; 0x60
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f001 fc67 	bl	800c8f8 <sml_number_parse>
 800b02a:	4602      	mov	r2, r0
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f002 fcb9 	bl	800d9a8 <sml_buf_has_errors>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d145      	bne.n	800b0c8 <sml_get_profile_pack_response_parse+0x140>

	msg->parameter_tree_path = sml_tree_path_parse(buf);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f003 fa6f 	bl	800e520 <sml_tree_path_parse>
 800b042:	4602      	mov	r2, r0
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f002 fcad 	bl	800d9a8 <sml_buf_has_errors>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d13b      	bne.n	800b0cc <sml_get_profile_pack_response_parse+0x144>

	msg->header_list = sml_sequence_parse(buf, (void *(*)(sml_buffer *)) &sml_prof_obj_header_entry_parse, (void (*)(void *)) &sml_prof_obj_header_entry_free);
 800b054:	4a27      	ldr	r2, [pc, #156]	; (800b0f4 <sml_get_profile_pack_response_parse+0x16c>)
 800b056:	4928      	ldr	r1, [pc, #160]	; (800b0f8 <sml_get_profile_pack_response_parse+0x170>)
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fbf1 	bl	800b840 <sml_sequence_parse>
 800b05e:	4602      	mov	r2, r0
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f002 fc9f 	bl	800d9a8 <sml_buf_has_errors>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d12f      	bne.n	800b0d0 <sml_get_profile_pack_response_parse+0x148>

	msg->period_list = sml_sequence_parse(buf, (void *(*)(sml_buffer *)) &sml_prof_obj_period_entry_parse, (void (*)(void *)) &sml_prof_obj_period_entry_free);
 800b070:	4a22      	ldr	r2, [pc, #136]	; (800b0fc <sml_get_profile_pack_response_parse+0x174>)
 800b072:	4923      	ldr	r1, [pc, #140]	; (800b100 <sml_get_profile_pack_response_parse+0x178>)
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fbe3 	bl	800b840 <sml_sequence_parse>
 800b07a:	4602      	mov	r2, r0
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	615a      	str	r2, [r3, #20]
	if (sml_buf_has_errors(buf)) goto error;
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f002 fc91 	bl	800d9a8 <sml_buf_has_errors>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d123      	bne.n	800b0d4 <sml_get_profile_pack_response_parse+0x14c>

	msg->rawdata = sml_octet_string_parse(buf);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f001 fe25 	bl	800ccdc <sml_octet_string_parse>
 800b092:	4602      	mov	r2, r0
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	619a      	str	r2, [r3, #24]
	if (sml_buf_has_errors(buf)) goto error;
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f002 fc85 	bl	800d9a8 <sml_buf_has_errors>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d119      	bne.n	800b0d8 <sml_get_profile_pack_response_parse+0x150>

	msg->profile_signature = sml_signature_parse(buf);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 fe19 	bl	800ccdc <sml_octet_string_parse>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	61da      	str	r2, [r3, #28]
	if (sml_buf_has_errors(buf)) goto error;
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f002 fc79 	bl	800d9a8 <sml_buf_has_errors>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10f      	bne.n	800b0dc <sml_get_profile_pack_response_parse+0x154>

	return msg;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	e012      	b.n	800b0e6 <sml_get_profile_pack_response_parse+0x15e>
	if (sml_buf_has_errors(buf)) goto error;
 800b0c0:	bf00      	nop
 800b0c2:	e00c      	b.n	800b0de <sml_get_profile_pack_response_parse+0x156>
	if (sml_buf_has_errors(buf)) goto error;
 800b0c4:	bf00      	nop
 800b0c6:	e00a      	b.n	800b0de <sml_get_profile_pack_response_parse+0x156>
	if (sml_buf_has_errors(buf)) goto error;
 800b0c8:	bf00      	nop
 800b0ca:	e008      	b.n	800b0de <sml_get_profile_pack_response_parse+0x156>
	if (sml_buf_has_errors(buf)) goto error;
 800b0cc:	bf00      	nop
 800b0ce:	e006      	b.n	800b0de <sml_get_profile_pack_response_parse+0x156>
	if (sml_buf_has_errors(buf)) goto error;
 800b0d0:	bf00      	nop
 800b0d2:	e004      	b.n	800b0de <sml_get_profile_pack_response_parse+0x156>
	if (sml_buf_has_errors(buf)) goto error;
 800b0d4:	bf00      	nop
 800b0d6:	e002      	b.n	800b0de <sml_get_profile_pack_response_parse+0x156>
	if (sml_buf_has_errors(buf)) goto error;
 800b0d8:	bf00      	nop
 800b0da:	e000      	b.n	800b0de <sml_get_profile_pack_response_parse+0x156>
	if (sml_buf_has_errors(buf)) goto error;
 800b0dc:	bf00      	nop

error:
	sml_get_profile_pack_response_free(msg);
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f000 f896 	bl	800b210 <sml_get_profile_pack_response_free>
	return NULL;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	08011c08 	.word	0x08011c08
 800b0f4:	0800b419 	.word	0x0800b419
 800b0f8:	0800b2b5 	.word	0x0800b2b5
 800b0fc:	0800b631 	.word	0x0800b631
 800b100:	0800b48d 	.word	0x0800b48d

0800b104 <sml_get_profile_pack_response_write>:

int sml_get_profile_pack_response_write(sml_get_profile_pack_response *msg, sml_buffer *buf)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <sml_get_profile_pack_response_write+0x16>
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d102      	bne.n	800b120 <sml_get_profile_pack_response_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800b11a:	f240 33e6 	movw	r3, #998	; 0x3e6
 800b11e:	e06e      	b.n	800b1fe <sml_get_profile_pack_response_write+0xfa>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 8);
 800b120:	2208      	movs	r2, #8
 800b122:	2170      	movs	r1, #112	; 0x70
 800b124:	6838      	ldr	r0, [r7, #0]
 800b126:	f002 fba1 	bl	800d86c <sml_buf_set_type_and_length>
 800b12a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <sml_get_profile_pack_response_write+0x32>
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	e063      	b.n	800b1fe <sml_get_profile_pack_response_write+0xfa>

	rv = sml_octet_string_write(msg->server_id, buf);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f001 fe19 	bl	800cd74 <sml_octet_string_write>
 800b142:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <sml_get_profile_pack_response_write+0x4a>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	e057      	b.n	800b1fe <sml_get_profile_pack_response_write+0xfa>

	rv = sml_time_write(msg->act_time, buf);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	f002 ff33 	bl	800dfc0 <sml_time_write>
 800b15a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d001      	beq.n	800b166 <sml_get_profile_pack_response_write+0x62>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	e04b      	b.n	800b1fe <sml_get_profile_pack_response_write+0xfa>

	rv = sml_u32_write(msg->reg_period, buf);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6898      	ldr	r0, [r3, #8]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2204      	movs	r2, #4
 800b16e:	2160      	movs	r1, #96	; 0x60
 800b170:	f001 fc64 	bl	800ca3c <sml_number_write>
 800b174:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d001      	beq.n	800b180 <sml_get_profile_pack_response_write+0x7c>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	e03e      	b.n	800b1fe <sml_get_profile_pack_response_write+0xfa>

	rv = sml_tree_path_write(msg->parameter_tree_path, buf);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	4618      	mov	r0, r3
 800b188:	f003 fa34 	bl	800e5f4 <sml_tree_path_write>
 800b18c:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d001      	beq.n	800b198 <sml_get_profile_pack_response_write+0x94>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	e032      	b.n	800b1fe <sml_get_profile_pack_response_write+0xfa>

	rv = sml_sequence_write(msg->header_list, buf, (int (*)(void *, sml_buffer *)) &sml_prof_obj_header_entry_write);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	4a1a      	ldr	r2, [pc, #104]	; (800b208 <sml_get_profile_pack_response_write+0x104>)
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 fbb7 	bl	800b914 <sml_sequence_write>
 800b1a6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <sml_get_profile_pack_response_write+0xae>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	e025      	b.n	800b1fe <sml_get_profile_pack_response_write+0xfa>

	rv = sml_sequence_write(msg->period_list, buf, (int (*)(void *, sml_buffer *)) &sml_prof_obj_period_entry_write);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	695b      	ldr	r3, [r3, #20]
 800b1b6:	4a15      	ldr	r2, [pc, #84]	; (800b20c <sml_get_profile_pack_response_write+0x108>)
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fbaa 	bl	800b914 <sml_sequence_write>
 800b1c0:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <sml_get_profile_pack_response_write+0xc8>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	e018      	b.n	800b1fe <sml_get_profile_pack_response_write+0xfa>

	rv = sml_octet_string_write(msg->rawdata, buf);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f001 fdce 	bl	800cd74 <sml_octet_string_write>
 800b1d8:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <sml_get_profile_pack_response_write+0xe0>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	e00c      	b.n	800b1fe <sml_get_profile_pack_response_write+0xfa>

	rv = sml_signature_write(msg->profile_signature, buf);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f001 fdc2 	bl	800cd74 <sml_octet_string_write>
 800b1f0:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <sml_get_profile_pack_response_write+0xf8>
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	e000      	b.n	800b1fe <sml_get_profile_pack_response_write+0xfa>

	return rv;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	0800b391 	.word	0x0800b391
 800b20c:	0800b58d 	.word	0x0800b58d

0800b210 <sml_get_profile_pack_response_free>:

void sml_get_profile_pack_response_free(sml_get_profile_pack_response *msg)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
	if (msg)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d02a      	beq.n	800b274 <sml_get_profile_pack_response_free+0x64>
    {
		sml_octet_string_free(msg->server_id);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4618      	mov	r0, r3
 800b224:	f001 fdeb 	bl	800cdfe <sml_octet_string_free>
		sml_time_free(msg->act_time);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f002 ff13 	bl	800e058 <sml_time_free>
		sml_number_free(msg->reg_period);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	4618      	mov	r0, r3
 800b238:	f001 fcad 	bl	800cb96 <sml_number_free>
		sml_tree_path_free(msg->parameter_tree_path);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	4618      	mov	r0, r3
 800b242:	f003 fa22 	bl	800e68a <sml_tree_path_free>
		sml_sequence_free(msg->header_list);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 fba4 	bl	800b998 <sml_sequence_free>
		sml_sequence_free(msg->period_list);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	4618      	mov	r0, r3
 800b256:	f000 fb9f 	bl	800b998 <sml_sequence_free>
		sml_octet_string_free(msg->rawdata);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	4618      	mov	r0, r3
 800b260:	f001 fdcd 	bl	800cdfe <sml_octet_string_free>
		sml_signature_free(msg->profile_signature);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	4618      	mov	r0, r3
 800b26a:	f001 fdc8 	bl	800cdfe <sml_octet_string_free>

		free(msg);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7fd ffb8 	bl	80091e4 <vPortFree>
	}
}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <sml_prof_obj_header_entry_init>:


// sml_prof_obj_header_entry;

sml_prof_obj_header_entry *sml_prof_obj_header_entry_init(void)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
	sml_prof_obj_header_entry *entry = (sml_prof_obj_header_entry *)malloc(sizeof(sml_prof_obj_header_entry));
 800b282:	200c      	movs	r0, #12
 800b284:	f7fd feec 	bl	8009060 <pvPortMalloc>
 800b288:	6078      	str	r0, [r7, #4]
	if (!entry)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d105      	bne.n	800b29c <sml_prof_obj_header_entry_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_prof_obj_header_entry));
 800b290:	210c      	movs	r1, #12
 800b292:	4807      	ldr	r0, [pc, #28]	; (800b2b0 <sml_prof_obj_header_entry_init+0x34>)
 800b294:	f000 fe16 	bl	800bec4 <trace>
		return NULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	e005      	b.n	800b2a8 <sml_prof_obj_header_entry_init+0x2c>
	}
	memset(entry, 0, sizeof(sml_prof_obj_header_entry));
 800b29c:	220c      	movs	r2, #12
 800b29e:	2100      	movs	r1, #0
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f005 f8cd 	bl	8010440 <memset>
	
	return entry;
 800b2a6:	687b      	ldr	r3, [r7, #4]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	08011bec 	.word	0x08011bec

0800b2b4 <sml_prof_obj_header_entry_parse>:

sml_prof_obj_header_entry *sml_prof_obj_header_entry_parse(sml_buffer *buf)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
	sml_prof_obj_header_entry *entry = NULL;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d101      	bne.n	800b2ca <sml_prof_obj_header_entry_parse+0x16>
	{
		return NULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e05b      	b.n	800b382 <sml_prof_obj_header_entry_parse+0xce>
	}

	entry = sml_prof_obj_header_entry_init();
 800b2ca:	f7ff ffd7 	bl	800b27c <sml_prof_obj_header_entry_init>
 800b2ce:	60f8      	str	r0, [r7, #12]
	if (!entry)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d105      	bne.n	800b2e2 <sml_prof_obj_header_entry_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b2dc:	611a      	str	r2, [r3, #16]
		return NULL;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	e04f      	b.n	800b382 <sml_prof_obj_header_entry_parse+0xce>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f002 fb71 	bl	800d9ca <sml_buf_get_next_type>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b70      	cmp	r3, #112	; 0x70
 800b2ec:	d003      	beq.n	800b2f6 <sml_prof_obj_header_entry_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2232      	movs	r2, #50	; 0x32
 800b2f2:	611a      	str	r2, [r3, #16]
		goto error;
 800b2f4:	e041      	b.n	800b37a <sml_prof_obj_header_entry_parse+0xc6>
	}

	if (sml_buf_get_next_length(buf) != 3)
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f002 fa56 	bl	800d7a8 <sml_buf_get_next_length>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d003      	beq.n	800b30a <sml_prof_obj_header_entry_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2220      	movs	r2, #32
 800b306:	611a      	str	r2, [r3, #16]
		goto error;
 800b308:	e037      	b.n	800b37a <sml_prof_obj_header_entry_parse+0xc6>
	}

	if (sml_debug_output(buf))
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f002 fbd2 	bl	800dab4 <sml_debug_output>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d002      	beq.n	800b31c <sml_prof_obj_header_entry_parse+0x68>
    {
		trace("\t\tPROF OBJ HEADER ENTRY\r\n");
 800b316:	481d      	ldr	r0, [pc, #116]	; (800b38c <sml_prof_obj_header_entry_parse+0xd8>)
 800b318:	f000 fdd4 	bl	800bec4 <trace>
	}

	entry->obj_name = sml_octet_string_parse(buf);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f001 fcdd 	bl	800ccdc <sml_octet_string_parse>
 800b322:	4602      	mov	r2, r0
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f002 fb3d 	bl	800d9a8 <sml_buf_has_errors>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d11d      	bne.n	800b370 <sml_prof_obj_header_entry_parse+0xbc>
	entry->unit = sml_unit_parse(buf);
 800b334:	2201      	movs	r2, #1
 800b336:	2160      	movs	r1, #96	; 0x60
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f001 fadd 	bl	800c8f8 <sml_number_parse>
 800b33e:	4602      	mov	r2, r0
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f002 fb2f 	bl	800d9a8 <sml_buf_has_errors>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d111      	bne.n	800b374 <sml_prof_obj_header_entry_parse+0xc0>
	entry->scaler = sml_i8_parse(buf);
 800b350:	2201      	movs	r2, #1
 800b352:	2150      	movs	r1, #80	; 0x50
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 facf 	bl	800c8f8 <sml_number_parse>
 800b35a:	4602      	mov	r2, r0
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f002 fb21 	bl	800d9a8 <sml_buf_has_errors>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d105      	bne.n	800b378 <sml_prof_obj_header_entry_parse+0xc4>

	return entry;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	e008      	b.n	800b382 <sml_prof_obj_header_entry_parse+0xce>
	if (sml_buf_has_errors(buf)) goto error;
 800b370:	bf00      	nop
 800b372:	e002      	b.n	800b37a <sml_prof_obj_header_entry_parse+0xc6>
	if (sml_buf_has_errors(buf)) goto error;
 800b374:	bf00      	nop
 800b376:	e000      	b.n	800b37a <sml_prof_obj_header_entry_parse+0xc6>
	if (sml_buf_has_errors(buf)) goto error;
 800b378:	bf00      	nop
error:
	sml_prof_obj_header_entry_free(entry);
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 f84c 	bl	800b418 <sml_prof_obj_header_entry_free>
	return NULL;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	08011c28 	.word	0x08011c28

0800b390 <sml_prof_obj_header_entry_write>:

int sml_prof_obj_header_entry_write(sml_prof_obj_header_entry *entry, sml_buffer *buf)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
	int rv;

	if (!entry || !buf)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <sml_prof_obj_header_entry_write+0x16>
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d102      	bne.n	800b3ac <sml_prof_obj_header_entry_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800b3a6:	f240 33e6 	movw	r3, #998	; 0x3e6
 800b3aa:	e031      	b.n	800b410 <sml_prof_obj_header_entry_write+0x80>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 3);
 800b3ac:	2203      	movs	r2, #3
 800b3ae:	2170      	movs	r1, #112	; 0x70
 800b3b0:	6838      	ldr	r0, [r7, #0]
 800b3b2:	f002 fa5b 	bl	800d86c <sml_buf_set_type_and_length>
 800b3b6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <sml_prof_obj_header_entry_write+0x32>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	e026      	b.n	800b410 <sml_prof_obj_header_entry_write+0x80>

	rv = sml_octet_string_write(entry->obj_name, buf);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f001 fcd3 	bl	800cd74 <sml_octet_string_write>
 800b3ce:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <sml_prof_obj_header_entry_write+0x4a>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	e01a      	b.n	800b410 <sml_prof_obj_header_entry_write+0x80>

	rv = sml_unit_write(entry->unit, buf);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6858      	ldr	r0, [r3, #4]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	2160      	movs	r1, #96	; 0x60
 800b3e4:	f001 fb2a 	bl	800ca3c <sml_number_write>
 800b3e8:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <sml_prof_obj_header_entry_write+0x64>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	e00d      	b.n	800b410 <sml_prof_obj_header_entry_write+0x80>

	rv = sml_i8_write(entry->scaler, buf);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6898      	ldr	r0, [r3, #8]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	2150      	movs	r1, #80	; 0x50
 800b3fe:	f001 fb1d 	bl	800ca3c <sml_number_write>
 800b402:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <sml_prof_obj_header_entry_write+0x7e>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	e000      	b.n	800b410 <sml_prof_obj_header_entry_write+0x80>

	return rv;
 800b40e:	68fb      	ldr	r3, [r7, #12]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <sml_prof_obj_header_entry_free>:

void sml_prof_obj_header_entry_free(sml_prof_obj_header_entry *entry)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
	if (entry)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d011      	beq.n	800b44a <sml_prof_obj_header_entry_free+0x32>
    {
		sml_octet_string_free(entry->obj_name);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f001 fce7 	bl	800cdfe <sml_octet_string_free>
		sml_unit_free(entry->unit);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	4618      	mov	r0, r3
 800b436:	f001 fbae 	bl	800cb96 <sml_number_free>
		sml_number_free(entry->scaler);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	4618      	mov	r0, r3
 800b440:	f001 fba9 	bl	800cb96 <sml_number_free>

		free(entry);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7fd fecd 	bl	80091e4 <vPortFree>
	}
}
 800b44a:	bf00      	nop
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
	...

0800b454 <sml_prof_obj_period_entry_init>:


// sml_prof_obj_period_entry;

sml_prof_obj_period_entry *sml_prof_obj_period_entry_init(void)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
	sml_prof_obj_period_entry *entry = (sml_prof_obj_period_entry *)malloc(sizeof(sml_prof_obj_period_entry));
 800b45a:	2010      	movs	r0, #16
 800b45c:	f7fd fe00 	bl	8009060 <pvPortMalloc>
 800b460:	6078      	str	r0, [r7, #4]
	if (!entry)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d105      	bne.n	800b474 <sml_prof_obj_period_entry_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_prof_obj_period_entry));
 800b468:	2110      	movs	r1, #16
 800b46a:	4807      	ldr	r0, [pc, #28]	; (800b488 <sml_prof_obj_period_entry_init+0x34>)
 800b46c:	f000 fd2a 	bl	800bec4 <trace>
		return NULL;
 800b470:	2300      	movs	r3, #0
 800b472:	e005      	b.n	800b480 <sml_prof_obj_period_entry_init+0x2c>
	}
	memset(entry, 0, sizeof(sml_prof_obj_period_entry));
 800b474:	2210      	movs	r2, #16
 800b476:	2100      	movs	r1, #0
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f004 ffe1 	bl	8010440 <memset>
	
	return entry;
 800b47e:	687b      	ldr	r3, [r7, #4]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	08011bec 	.word	0x08011bec

0800b48c <sml_prof_obj_period_entry_parse>:

sml_prof_obj_period_entry *sml_prof_obj_period_entry_parse(sml_buffer *buf)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
	sml_prof_obj_period_entry *entry = NULL;
 800b494:	2300      	movs	r3, #0
 800b496:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d101      	bne.n	800b4a2 <sml_prof_obj_period_entry_parse+0x16>
	{
		return NULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e069      	b.n	800b576 <sml_prof_obj_period_entry_parse+0xea>
	}

	entry = sml_prof_obj_period_entry_init();
 800b4a2:	f7ff ffd7 	bl	800b454 <sml_prof_obj_period_entry_init>
 800b4a6:	60f8      	str	r0, [r7, #12]
	if (!entry)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d105      	bne.n	800b4ba <sml_prof_obj_period_entry_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b4b4:	611a      	str	r2, [r3, #16]
		return NULL;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	e05d      	b.n	800b576 <sml_prof_obj_period_entry_parse+0xea>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f002 fa85 	bl	800d9ca <sml_buf_get_next_type>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b70      	cmp	r3, #112	; 0x70
 800b4c4:	d003      	beq.n	800b4ce <sml_prof_obj_period_entry_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2232      	movs	r2, #50	; 0x32
 800b4ca:	611a      	str	r2, [r3, #16]
		goto error;
 800b4cc:	e04f      	b.n	800b56e <sml_prof_obj_period_entry_parse+0xe2>
	}

	if (sml_buf_get_next_length(buf) != 4)
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f002 f96a 	bl	800d7a8 <sml_buf_get_next_length>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b04      	cmp	r3, #4
 800b4d8:	d003      	beq.n	800b4e2 <sml_prof_obj_period_entry_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2220      	movs	r2, #32
 800b4de:	611a      	str	r2, [r3, #16]
		goto error;
 800b4e0:	e045      	b.n	800b56e <sml_prof_obj_period_entry_parse+0xe2>
	}

	if (sml_debug_output(buf))
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f002 fae6 	bl	800dab4 <sml_debug_output>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d002      	beq.n	800b4f4 <sml_prof_obj_period_entry_parse+0x68>
    {
		trace("\t\tPROF OBJ PERIOD ENTRY\r\n");
 800b4ee:	4824      	ldr	r0, [pc, #144]	; (800b580 <sml_prof_obj_period_entry_parse+0xf4>)
 800b4f0:	f000 fce8 	bl	800bec4 <trace>
	}

	entry->val_time = sml_time_parse(buf);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f002 fccd 	bl	800de94 <sml_time_parse>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f002 fa51 	bl	800d9a8 <sml_buf_has_errors>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d129      	bne.n	800b560 <sml_prof_obj_period_entry_parse+0xd4>
	entry->status = sml_u64_parse(buf);
 800b50c:	2208      	movs	r2, #8
 800b50e:	2160      	movs	r1, #96	; 0x60
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f001 f9f1 	bl	800c8f8 <sml_number_parse>
 800b516:	4602      	mov	r2, r0
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f002 fa43 	bl	800d9a8 <sml_buf_has_errors>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d11d      	bne.n	800b564 <sml_prof_obj_period_entry_parse+0xd8>
	entry->value_list = sml_sequence_parse(buf, (void *(*)(sml_buffer *)) &sml_value_entry_parse, (void (*)(void *)) &sml_value_entry_free);
 800b528:	4a16      	ldr	r2, [pc, #88]	; (800b584 <sml_prof_obj_period_entry_parse+0xf8>)
 800b52a:	4917      	ldr	r1, [pc, #92]	; (800b588 <sml_prof_obj_period_entry_parse+0xfc>)
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f987 	bl	800b840 <sml_sequence_parse>
 800b532:	4602      	mov	r2, r0
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f002 fa35 	bl	800d9a8 <sml_buf_has_errors>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d111      	bne.n	800b568 <sml_prof_obj_period_entry_parse+0xdc>
	entry->period_signature = sml_signature_parse(buf);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 fbc9 	bl	800ccdc <sml_octet_string_parse>
 800b54a:	4602      	mov	r2, r0
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f002 fa29 	bl	800d9a8 <sml_buf_has_errors>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d107      	bne.n	800b56c <sml_prof_obj_period_entry_parse+0xe0>

	return entry;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	e00a      	b.n	800b576 <sml_prof_obj_period_entry_parse+0xea>
	if (sml_buf_has_errors(buf)) goto error;
 800b560:	bf00      	nop
 800b562:	e004      	b.n	800b56e <sml_prof_obj_period_entry_parse+0xe2>
	if (sml_buf_has_errors(buf)) goto error;
 800b564:	bf00      	nop
 800b566:	e002      	b.n	800b56e <sml_prof_obj_period_entry_parse+0xe2>
	if (sml_buf_has_errors(buf)) goto error;
 800b568:	bf00      	nop
 800b56a:	e000      	b.n	800b56e <sml_prof_obj_period_entry_parse+0xe2>
	if (sml_buf_has_errors(buf)) goto error;
 800b56c:	bf00      	nop

error:
	sml_prof_obj_period_entry_free(entry);
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 f85e 	bl	800b630 <sml_prof_obj_period_entry_free>
	return NULL;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	08011c44 	.word	0x08011c44
 800b584:	0800b7d1 	.word	0x0800b7d1
 800b588:	0800b6ad 	.word	0x0800b6ad

0800b58c <sml_prof_obj_period_entry_write>:

int sml_prof_obj_period_entry_write(sml_prof_obj_period_entry *entry, sml_buffer *buf)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
	int rv;

	if (!entry || !buf)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <sml_prof_obj_period_entry_write+0x16>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d102      	bne.n	800b5a8 <sml_prof_obj_period_entry_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800b5a2:	f240 33e6 	movw	r3, #998	; 0x3e6
 800b5a6:	e03d      	b.n	800b624 <sml_prof_obj_period_entry_write+0x98>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 4);
 800b5a8:	2204      	movs	r2, #4
 800b5aa:	2170      	movs	r1, #112	; 0x70
 800b5ac:	6838      	ldr	r0, [r7, #0]
 800b5ae:	f002 f95d 	bl	800d86c <sml_buf_set_type_and_length>
 800b5b2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <sml_prof_obj_period_entry_write+0x32>
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	e032      	b.n	800b624 <sml_prof_obj_period_entry_write+0x98>

	rv = sml_time_write(entry->val_time, buf);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f002 fcfb 	bl	800dfc0 <sml_time_write>
 800b5ca:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <sml_prof_obj_period_entry_write+0x4a>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	e026      	b.n	800b624 <sml_prof_obj_period_entry_write+0x98>

	rv = sml_u64_write(entry->status, buf);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6858      	ldr	r0, [r3, #4]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2208      	movs	r2, #8
 800b5de:	2160      	movs	r1, #96	; 0x60
 800b5e0:	f001 fa2c 	bl	800ca3c <sml_number_write>
 800b5e4:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d001      	beq.n	800b5f0 <sml_prof_obj_period_entry_write+0x64>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	e019      	b.n	800b624 <sml_prof_obj_period_entry_write+0x98>

	rv = sml_sequence_write(entry->value_list, buf, (int (*)(void *, sml_buffer *)) &sml_value_entry_write);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	4a0d      	ldr	r2, [pc, #52]	; (800b62c <sml_prof_obj_period_entry_write+0xa0>)
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 f98b 	bl	800b914 <sml_sequence_write>
 800b5fe:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <sml_prof_obj_period_entry_write+0x7e>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	e00c      	b.n	800b624 <sml_prof_obj_period_entry_write+0x98>

	rv = sml_signature_write(entry->period_signature, buf);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	6839      	ldr	r1, [r7, #0]
 800b610:	4618      	mov	r0, r3
 800b612:	f001 fbaf 	bl	800cd74 <sml_octet_string_write>
 800b616:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <sml_prof_obj_period_entry_write+0x96>
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	e000      	b.n	800b624 <sml_prof_obj_period_entry_write+0x98>

	return rv;
 800b622:	68fb      	ldr	r3, [r7, #12]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	0800b765 	.word	0x0800b765

0800b630 <sml_prof_obj_period_entry_free>:

void sml_prof_obj_period_entry_free(sml_prof_obj_period_entry *entry)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	if (entry)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d016      	beq.n	800b66c <sml_prof_obj_period_entry_free+0x3c>
    {
		sml_time_free(entry->val_time);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4618      	mov	r0, r3
 800b644:	f002 fd08 	bl	800e058 <sml_time_free>
		sml_number_free(entry->status);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f001 faa2 	bl	800cb96 <sml_number_free>
		sml_sequence_free(entry->value_list);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	4618      	mov	r0, r3
 800b658:	f000 f99e 	bl	800b998 <sml_sequence_free>
		sml_signature_free(entry->period_signature);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	4618      	mov	r0, r3
 800b662:	f001 fbcc 	bl	800cdfe <sml_octet_string_free>

		free(entry);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7fd fdbc 	bl	80091e4 <vPortFree>
	}
}
 800b66c:	bf00      	nop
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <sml_value_entry_init>:


// sml_value_entry;

sml_value_entry *sml_value_entry_init(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
	sml_value_entry *entry = (sml_value_entry *)malloc(sizeof(sml_value_entry));
 800b67a:	2008      	movs	r0, #8
 800b67c:	f7fd fcf0 	bl	8009060 <pvPortMalloc>
 800b680:	6078      	str	r0, [r7, #4]
	if (!entry)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d105      	bne.n	800b694 <sml_value_entry_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_value_entry));
 800b688:	2108      	movs	r1, #8
 800b68a:	4807      	ldr	r0, [pc, #28]	; (800b6a8 <sml_value_entry_init+0x34>)
 800b68c:	f000 fc1a 	bl	800bec4 <trace>
		return NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	e005      	b.n	800b6a0 <sml_value_entry_init+0x2c>
	}
	memset(entry, 0, sizeof(sml_value_entry));
 800b694:	2208      	movs	r2, #8
 800b696:	2100      	movs	r1, #0
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f004 fed1 	bl	8010440 <memset>
	
	return entry;
 800b69e:	687b      	ldr	r3, [r7, #4]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	08011bec 	.word	0x08011bec

0800b6ac <sml_value_entry_parse>:

sml_value_entry *sml_value_entry_parse(sml_buffer *buf)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	sml_value_entry *entry = NULL;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <sml_value_entry_parse+0x16>
	{
		return NULL;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e049      	b.n	800b756 <sml_value_entry_parse+0xaa>
	}

	entry = sml_value_entry_init();
 800b6c2:	f7ff ffd7 	bl	800b674 <sml_value_entry_init>
 800b6c6:	60f8      	str	r0, [r7, #12]
	if (!entry)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d105      	bne.n	800b6da <sml_value_entry_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b6d4:	611a      	str	r2, [r3, #16]
		return NULL;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e03d      	b.n	800b756 <sml_value_entry_parse+0xaa>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f002 f975 	bl	800d9ca <sml_buf_get_next_type>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b70      	cmp	r3, #112	; 0x70
 800b6e4:	d003      	beq.n	800b6ee <sml_value_entry_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2232      	movs	r2, #50	; 0x32
 800b6ea:	611a      	str	r2, [r3, #16]
		goto error;
 800b6ec:	e02f      	b.n	800b74e <sml_value_entry_parse+0xa2>
	}

	if (sml_buf_get_next_length(buf) != 2)
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f002 f85a 	bl	800d7a8 <sml_buf_get_next_length>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d003      	beq.n	800b702 <sml_value_entry_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	611a      	str	r2, [r3, #16]
		goto error;
 800b700:	e025      	b.n	800b74e <sml_value_entry_parse+0xa2>
	}

	if (sml_debug_output(buf))
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f002 f9d6 	bl	800dab4 <sml_debug_output>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d002      	beq.n	800b714 <sml_value_entry_parse+0x68>
    {
		trace("\t\tVALUE ENTRY\r\n");
 800b70e:	4814      	ldr	r0, [pc, #80]	; (800b760 <sml_value_entry_parse+0xb4>)
 800b710:	f000 fbd8 	bl	800bec4 <trace>
	}

	entry->value = sml_value_parse(buf);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f004 fd39 	bl	801018c <sml_value_parse>
 800b71a:	4602      	mov	r2, r0
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f002 f941 	bl	800d9a8 <sml_buf_has_errors>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10d      	bne.n	800b748 <sml_value_entry_parse+0x9c>
	entry->value_signature = sml_signature_parse(buf);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f001 fad5 	bl	800ccdc <sml_octet_string_parse>
 800b732:	4602      	mov	r2, r0
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f002 f935 	bl	800d9a8 <sml_buf_has_errors>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d103      	bne.n	800b74c <sml_value_entry_parse+0xa0>

	return entry;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	e006      	b.n	800b756 <sml_value_entry_parse+0xaa>
	if (sml_buf_has_errors(buf)) goto error;
 800b748:	bf00      	nop
 800b74a:	e000      	b.n	800b74e <sml_value_entry_parse+0xa2>
	if (sml_buf_has_errors(buf)) goto error;
 800b74c:	bf00      	nop

error:
	sml_value_entry_free(entry);
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f000 f83e 	bl	800b7d0 <sml_value_entry_free>
	return NULL;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	08011c60 	.word	0x08011c60

0800b764 <sml_value_entry_write>:

int sml_value_entry_write(sml_value_entry *entry, sml_buffer *buf)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
	int rv;

	if (!entry || !buf)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d002      	beq.n	800b77a <sml_value_entry_write+0x16>
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d102      	bne.n	800b780 <sml_value_entry_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800b77a:	f240 33e6 	movw	r3, #998	; 0x3e6
 800b77e:	e023      	b.n	800b7c8 <sml_value_entry_write+0x64>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 2);
 800b780:	2202      	movs	r2, #2
 800b782:	2170      	movs	r1, #112	; 0x70
 800b784:	6838      	ldr	r0, [r7, #0]
 800b786:	f002 f871 	bl	800d86c <sml_buf_set_type_and_length>
 800b78a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <sml_value_entry_write+0x32>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	e018      	b.n	800b7c8 <sml_value_entry_write+0x64>

	rv = sml_value_write(entry->value, buf);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f004 fd87 	bl	80102b0 <sml_value_write>
 800b7a2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d001      	beq.n	800b7ae <sml_value_entry_write+0x4a>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	e00c      	b.n	800b7c8 <sml_value_entry_write+0x64>

	rv = sml_signature_write(entry->value_signature, buf);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f001 fadd 	bl	800cd74 <sml_octet_string_write>
 800b7ba:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <sml_value_entry_write+0x62>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	e000      	b.n	800b7c8 <sml_value_entry_write+0x64>

	return rv;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <sml_value_entry_free>:

void sml_value_entry_free(sml_value_entry *entry)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
	if (entry)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00c      	beq.n	800b7f8 <sml_value_entry_free+0x28>
    {
		sml_value_free(entry->value);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f004 fdb9 	bl	801035a <sml_value_free>
		sml_signature_free(entry->value_signature);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f001 fb06 	bl	800cdfe <sml_octet_string_free>

		free(entry);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7fd fcf6 	bl	80091e4 <vPortFree>
	}
}
 800b7f8:	bf00      	nop
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <sml_sequence_init>:
#include <sml/sml_log.h>

// sml_sequence;

sml_sequence *sml_sequence_init(void (*elem_free) (void *elem))
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
	sml_sequence *seq = (sml_sequence *)malloc(sizeof(sml_sequence));
 800b808:	200c      	movs	r0, #12
 800b80a:	f7fd fc29 	bl	8009060 <pvPortMalloc>
 800b80e:	60f8      	str	r0, [r7, #12]
	if (!seq)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d105      	bne.n	800b822 <sml_sequence_init+0x22>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_sequence));
 800b816:	210c      	movs	r1, #12
 800b818:	4808      	ldr	r0, [pc, #32]	; (800b83c <sml_sequence_init+0x3c>)
 800b81a:	f000 fb53 	bl	800bec4 <trace>
		return NULL;
 800b81e:	2300      	movs	r3, #0
 800b820:	e008      	b.n	800b834 <sml_sequence_init+0x34>
	}
	memset(seq, 0, sizeof(sml_sequence));
 800b822:	220c      	movs	r2, #12
 800b824:	2100      	movs	r1, #0
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f004 fe0a 	bl	8010440 <memset>
	seq->elem_free = elem_free;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	609a      	str	r2, [r3, #8]
	
	return seq;
 800b832:	68fb      	ldr	r3, [r7, #12]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	08011c70 	.word	0x08011c70

0800b840 <sml_sequence_parse>:

sml_sequence *sml_sequence_parse(sml_buffer *buf, void *(*elem_parse) (sml_buffer *buf), void (*elem_free) (void *elem))
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b08a      	sub	sp, #40	; 0x28
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
	if (!buf || !elem_parse || !elem_free)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d005      	beq.n	800b85e <sml_sequence_parse+0x1e>
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <sml_sequence_parse+0x1e>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <sml_sequence_parse+0x22>
	{
		return NULL;
 800b85e:	2300      	movs	r3, #0
 800b860:	e052      	b.n	800b908 <sml_sequence_parse+0xc8>
	}

    sml_sequence *seq = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	623b      	str	r3, [r7, #32]
	int i, len = sml_buf_get_next_length(buf);
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f001 ff9e 	bl	800d7a8 <sml_buf_get_next_length>
 800b86c:	61f8      	str	r0, [r7, #28]

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f002 f8ab 	bl	800d9ca <sml_buf_get_next_type>
 800b874:	4603      	mov	r3, r0
 800b876:	2b70      	cmp	r3, #112	; 0x70
 800b878:	d004      	beq.n	800b884 <sml_sequence_parse+0x44>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2232      	movs	r2, #50	; 0x32
 800b87e:	611a      	str	r2, [r3, #16]
		return NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	e041      	b.n	800b908 <sml_sequence_parse+0xc8>
	}

	if (sml_debug_output(buf))
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f002 f915 	bl	800dab4 <sml_debug_output>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <sml_sequence_parse+0x56>
    {
		trace("\t\tSEQUENCE\r\n");
 800b890:	481f      	ldr	r0, [pc, #124]	; (800b910 <sml_sequence_parse+0xd0>)
 800b892:	f000 fb17 	bl	800bec4 <trace>
	}

	seq = sml_sequence_init(elem_free);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff ffb2 	bl	800b800 <sml_sequence_init>
 800b89c:	6238      	str	r0, [r7, #32]
	if (!seq)
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d105      	bne.n	800b8b0 <sml_sequence_parse+0x70>
    {
		buf->error = SML_MALLOC_ERROR;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b8aa:	611a      	str	r2, [r3, #16]
		return NULL;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	e02b      	b.n	800b908 <sml_sequence_parse+0xc8>
	}

	for (i = 0; i < len; i++)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8b4:	e01d      	b.n	800b8f2 <sml_sequence_parse+0xb2>
    {
        void *p = NULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	61bb      	str	r3, [r7, #24]
        int rv;

		p = elem_parse(buf);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	4798      	blx	r3
 800b8c0:	61b8      	str	r0, [r7, #24]
		if (sml_buf_has_errors(buf)) goto error;
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f002 f870 	bl	800d9a8 <sml_buf_has_errors>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d117      	bne.n	800b8fe <sml_sequence_parse+0xbe>
		rv = sml_sequence_add(seq, p);
 800b8ce:	69b9      	ldr	r1, [r7, #24]
 800b8d0:	6a38      	ldr	r0, [r7, #32]
 800b8d2:	f000 f88d 	bl	800b9f0 <sml_sequence_add>
 800b8d6:	6178      	str	r0, [r7, #20]
		if (rv == SML_MALLOC_ERROR)
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d104      	bne.n	800b8ec <sml_sequence_parse+0xac>
		{
			buf->error = SML_MALLOC_ERROR;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b8e8:	611a      	str	r2, [r3, #16]
			goto error;
 800b8ea:	e009      	b.n	800b900 <sml_sequence_parse+0xc0>
	for (i = 0; i < len; i++)
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	dbdd      	blt.n	800b8b6 <sml_sequence_parse+0x76>
		}
	}

	return seq;
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	e004      	b.n	800b908 <sml_sequence_parse+0xc8>
		if (sml_buf_has_errors(buf)) goto error;
 800b8fe:	bf00      	nop

error:
	sml_sequence_free(seq);
 800b900:	6a38      	ldr	r0, [r7, #32]
 800b902:	f000 f849 	bl	800b998 <sml_sequence_free>
	return NULL;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3728      	adds	r7, #40	; 0x28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	08011c8c 	.word	0x08011c8c

0800b914 <sml_sequence_write>:

int sml_sequence_write(sml_sequence *seq, sml_buffer *buf, int (*elem_write) (void *elem, sml_buffer *buf))
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
    int i;
	int rv;

	if (!buf)
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d102      	bne.n	800b92c <sml_sequence_write+0x18>
	{
		return SML_PARAMETER_ERROR;
 800b926:	f240 33e6 	movw	r3, #998	; 0x3e6
 800b92a:	e031      	b.n	800b990 <sml_sequence_write+0x7c>
	}

    if (seq == 0)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d105      	bne.n	800b93e <sml_sequence_write+0x2a>
    {
		rv = sml_buf_optional_write(buf);
 800b932:	68b8      	ldr	r0, [r7, #8]
 800b934:	f002 f88c 	bl	800da50 <sml_buf_optional_write>
 800b938:	6138      	str	r0, [r7, #16]
		return rv;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	e028      	b.n	800b990 <sml_sequence_write+0x7c>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, seq->elems_len);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	461a      	mov	r2, r3
 800b944:	2170      	movs	r1, #112	; 0x70
 800b946:	68b8      	ldr	r0, [r7, #8]
 800b948:	f001 ff90 	bl	800d86c <sml_buf_set_type_and_length>
 800b94c:	6138      	str	r0, [r7, #16]
	if (rv != SML_OK) return rv;
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <sml_sequence_write+0x44>
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	e01b      	b.n	800b990 <sml_sequence_write+0x7c>

	for (i = 0; i < seq->elems_len; i++)
 800b958:	2300      	movs	r3, #0
 800b95a:	617b      	str	r3, [r7, #20]
 800b95c:	e012      	b.n	800b984 <sml_sequence_write+0x70>
    {
		rv = elem_write((seq->elems)[i], buf);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4413      	add	r3, r2
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68b9      	ldr	r1, [r7, #8]
 800b96e:	4610      	mov	r0, r2
 800b970:	4798      	blx	r3
 800b972:	6138      	str	r0, [r7, #16]
		if (rv != SML_OK) return rv;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <sml_sequence_write+0x6a>
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	e008      	b.n	800b990 <sml_sequence_write+0x7c>
	for (i = 0; i < seq->elems_len; i++)
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	3301      	adds	r3, #1
 800b982:	617b      	str	r3, [r7, #20]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	dbe7      	blt.n	800b95e <sml_sequence_write+0x4a>
	}

	return rv;
 800b98e:	693b      	ldr	r3, [r7, #16]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3718      	adds	r7, #24
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <sml_sequence_free>:

void sml_sequence_free(sml_sequence *seq)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
	if (seq)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d020      	beq.n	800b9e8 <sml_sequence_free+0x50>
    {
		int i;
		for (i = 0; i < seq->elems_len; i++)
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	60fb      	str	r3, [r7, #12]
 800b9aa:	e00c      	b.n	800b9c6 <sml_sequence_free+0x2e>
        {
			seq->elem_free((seq->elems)[i]);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	6811      	ldr	r1, [r2, #0]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	0092      	lsls	r2, r2, #2
 800b9b8:	440a      	add	r2, r1
 800b9ba:	6812      	ldr	r2, [r2, #0]
 800b9bc:	4610      	mov	r0, r2
 800b9be:	4798      	blx	r3
		for (i = 0; i < seq->elems_len; i++)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	dbed      	blt.n	800b9ac <sml_sequence_free+0x14>
		}
		
		if (seq->elems != 0)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d004      	beq.n	800b9e2 <sml_sequence_free+0x4a>
        {
			free(seq->elems);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fd fc01 	bl	80091e4 <vPortFree>
		}
		
		free(seq);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7fd fbfe 	bl	80091e4 <vPortFree>
	}
}
 800b9e8:	bf00      	nop
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <sml_sequence_add>:

int sml_sequence_add(sml_sequence *seq, void *new_entry)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
	int rv = SML_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60fb      	str	r3, [r7, #12]

	if (!seq || !new_entry)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <sml_sequence_add+0x1a>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d102      	bne.n	800ba10 <sml_sequence_add+0x20>
	{
		return SML_PARAMETER_ERROR;
 800ba0a:	f240 33e6 	movw	r3, #998	; 0x3e6
 800ba0e:	e02a      	b.n	800ba66 <sml_sequence_add+0x76>
	}

	seq->elems_len++;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	1c5a      	adds	r2, r3, #1
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	605a      	str	r2, [r3, #4]
	seq->elems = (void **)realloc(seq->elems, sizeof(void *) * seq->elems_len);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	4619      	mov	r1, r3
 800ba26:	4610      	mov	r0, r2
 800ba28:	f7fd fc34 	bl	8009294 <pvPortRealloc>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	601a      	str	r2, [r3, #0]
	if (!seq->elems)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d109      	bne.n	800ba4e <sml_sequence_add+0x5e>
    {
		trace("ERROR: realloc %ld bytes\n", sizeof(void *) * seq->elems_len);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4619      	mov	r1, r3
 800ba42:	480b      	ldr	r0, [pc, #44]	; (800ba70 <sml_sequence_add+0x80>)
 800ba44:	f000 fa3e 	bl	800bec4 <trace>
		return SML_MALLOC_ERROR;
 800ba48:	f240 33e7 	movw	r3, #999	; 0x3e7
 800ba4c:	e00b      	b.n	800ba66 <sml_sequence_add+0x76>
	}

	seq->elems[seq->elems_len - 1] = new_entry;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	683a      	ldr	r2, [r7, #0]
 800ba62:	601a      	str	r2, [r3, #0]

	return rv;
 800ba64:	68fb      	ldr	r3, [r7, #12]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	08011c9c 	.word	0x08011c9c

0800ba74 <sml_list_init>:


// sml_list;

sml_list *sml_list_init(void)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
	sml_list *l = (sml_list *)malloc(sizeof(sml_list));
 800ba7a:	2020      	movs	r0, #32
 800ba7c:	f7fd faf0 	bl	8009060 <pvPortMalloc>
 800ba80:	6078      	str	r0, [r7, #4]
	if (!l)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d105      	bne.n	800ba94 <sml_list_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_list));
 800ba88:	2120      	movs	r1, #32
 800ba8a:	4807      	ldr	r0, [pc, #28]	; (800baa8 <sml_list_init+0x34>)
 800ba8c:	f000 fa1a 	bl	800bec4 <trace>
		return NULL;
 800ba90:	2300      	movs	r3, #0
 800ba92:	e005      	b.n	800baa0 <sml_list_init+0x2c>
	}
	memset(l, 0, sizeof(sml_list));
 800ba94:	2220      	movs	r2, #32
 800ba96:	2100      	movs	r1, #0
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f004 fcd1 	bl	8010440 <memset>
	
	return l;
 800ba9e:	687b      	ldr	r3, [r7, #4]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	08011c70 	.word	0x08011c70

0800baac <sml_list_entry_parse>:
{
	list->next = new_entry;
}

sml_list *sml_list_entry_parse(sml_buffer *buf)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
    sml_list *l = NULL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d101      	bne.n	800bac2 <sml_list_entry_parse+0x16>
	{
		return NULL;
 800babe:	2300      	movs	r3, #0
 800bac0:	e092      	b.n	800bbe8 <sml_list_entry_parse+0x13c>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f001 ff81 	bl	800d9ca <sml_buf_get_next_type>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b70      	cmp	r3, #112	; 0x70
 800bacc:	d004      	beq.n	800bad8 <sml_list_entry_parse+0x2c>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2232      	movs	r2, #50	; 0x32
 800bad2:	611a      	str	r2, [r3, #16]
		return NULL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	e087      	b.n	800bbe8 <sml_list_entry_parse+0x13c>
	}

	if (sml_buf_get_next_length(buf) != 7)
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f001 fe65 	bl	800d7a8 <sml_buf_get_next_length>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b07      	cmp	r3, #7
 800bae2:	d004      	beq.n	800baee <sml_list_entry_parse+0x42>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2220      	movs	r2, #32
 800bae8:	611a      	str	r2, [r3, #16]
		return NULL;
 800baea:	2300      	movs	r3, #0
 800baec:	e07c      	b.n	800bbe8 <sml_list_entry_parse+0x13c>
	}

	if (sml_debug_output(buf))
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f001 ffe0 	bl	800dab4 <sml_debug_output>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d002      	beq.n	800bb00 <sml_list_entry_parse+0x54>
    {
		trace("\t\tLIST ENTRY\r\n");
 800bafa:	483d      	ldr	r0, [pc, #244]	; (800bbf0 <sml_list_entry_parse+0x144>)
 800bafc:	f000 f9e2 	bl	800bec4 <trace>
	}

	l = sml_list_init();
 800bb00:	f7ff ffb8 	bl	800ba74 <sml_list_init>
 800bb04:	60f8      	str	r0, [r7, #12]
	if (!l)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d105      	bne.n	800bb18 <sml_list_entry_parse+0x6c>
    {
		buf->error = SML_MALLOC_ERROR;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bb12:	611a      	str	r2, [r3, #16]
		return NULL;
 800bb14:	2300      	movs	r3, #0
 800bb16:	e067      	b.n	800bbe8 <sml_list_entry_parse+0x13c>
	}

	l->obj_name = sml_octet_string_parse(buf);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f001 f8df 	bl	800ccdc <sml_octet_string_parse>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f001 ff3f 	bl	800d9a8 <sml_buf_has_errors>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d14d      	bne.n	800bbcc <sml_list_entry_parse+0x120>

	l->status = sml_status_parse(buf);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f001 ffe9 	bl	800db08 <sml_status_parse>
 800bb36:	4602      	mov	r2, r0
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f001 ff33 	bl	800d9a8 <sml_buf_has_errors>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d143      	bne.n	800bbd0 <sml_list_entry_parse+0x124>

	l->val_time = sml_time_parse(buf);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f002 f9a3 	bl	800de94 <sml_time_parse>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f001 ff27 	bl	800d9a8 <sml_buf_has_errors>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d139      	bne.n	800bbd4 <sml_list_entry_parse+0x128>

	l->unit = sml_u8_parse(buf);
 800bb60:	2201      	movs	r2, #1
 800bb62:	2160      	movs	r1, #96	; 0x60
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fec7 	bl	800c8f8 <sml_number_parse>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f001 ff19 	bl	800d9a8 <sml_buf_has_errors>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d12d      	bne.n	800bbd8 <sml_list_entry_parse+0x12c>

	l->scaler = sml_i8_parse(buf);
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	2150      	movs	r1, #80	; 0x50
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 feb9 	bl	800c8f8 <sml_number_parse>
 800bb86:	4602      	mov	r2, r0
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f001 ff0b 	bl	800d9a8 <sml_buf_has_errors>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d121      	bne.n	800bbdc <sml_list_entry_parse+0x130>

	l->value = sml_value_parse(buf);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f004 faf7 	bl	801018c <sml_value_parse>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	615a      	str	r2, [r3, #20]
	if (sml_buf_has_errors(buf)) goto error;
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f001 feff 	bl	800d9a8 <sml_buf_has_errors>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d117      	bne.n	800bbe0 <sml_list_entry_parse+0x134>

	l->value_signature = sml_octet_string_parse(buf);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f001 f893 	bl	800ccdc <sml_octet_string_parse>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	619a      	str	r2, [r3, #24]
	if (sml_buf_has_errors(buf)) goto error;
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f001 fef3 	bl	800d9a8 <sml_buf_has_errors>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10d      	bne.n	800bbe4 <sml_list_entry_parse+0x138>

	return l;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	e00d      	b.n	800bbe8 <sml_list_entry_parse+0x13c>
	if (sml_buf_has_errors(buf)) goto error;
 800bbcc:	bf00      	nop
 800bbce:	e00a      	b.n	800bbe6 <sml_list_entry_parse+0x13a>
	if (sml_buf_has_errors(buf)) goto error;
 800bbd0:	bf00      	nop
 800bbd2:	e008      	b.n	800bbe6 <sml_list_entry_parse+0x13a>
	if (sml_buf_has_errors(buf)) goto error;
 800bbd4:	bf00      	nop
 800bbd6:	e006      	b.n	800bbe6 <sml_list_entry_parse+0x13a>
	if (sml_buf_has_errors(buf)) goto error;
 800bbd8:	bf00      	nop
 800bbda:	e004      	b.n	800bbe6 <sml_list_entry_parse+0x13a>
	if (sml_buf_has_errors(buf)) goto error;
 800bbdc:	bf00      	nop
 800bbde:	e002      	b.n	800bbe6 <sml_list_entry_parse+0x13a>
	if (sml_buf_has_errors(buf)) goto error;
 800bbe0:	bf00      	nop
 800bbe2:	e000      	b.n	800bbe6 <sml_list_entry_parse+0x13a>
	if (sml_buf_has_errors(buf)) goto error;
 800bbe4:	bf00      	nop

// This function doesn't free the allocated memory in error cases,
// this is done in sml_list_parse.
error:
	return NULL;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	08011cb8 	.word	0x08011cb8

0800bbf4 <sml_list_parse>:

sml_list *sml_list_parse(sml_buffer *buf)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
    sml_list *first = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	617b      	str	r3, [r7, #20]
	sml_list *last = 0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	613b      	str	r3, [r7, #16]
	int elems;

	if (!buf)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d101      	bne.n	800bc0e <sml_list_parse+0x1a>
	{
		return NULL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e050      	b.n	800bcb0 <sml_list_parse+0xbc>
	}

	if (sml_buf_optional_is_skipped(buf))
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f001 ff3b 	bl	800da8a <sml_buf_optional_is_skipped>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <sml_list_parse+0x2a>
    {
		return NULL;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e048      	b.n	800bcb0 <sml_list_parse+0xbc>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f001 fed3 	bl	800d9ca <sml_buf_get_next_type>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b70      	cmp	r3, #112	; 0x70
 800bc28:	d004      	beq.n	800bc34 <sml_list_parse+0x40>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2232      	movs	r2, #50	; 0x32
 800bc2e:	611a      	str	r2, [r3, #16]
		return NULL;
 800bc30:	2300      	movs	r3, #0
 800bc32:	e03d      	b.n	800bcb0 <sml_list_parse+0xbc>
	}

	if (sml_debug_output(buf))
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f001 ff3d 	bl	800dab4 <sml_debug_output>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <sml_list_parse+0x52>
    {
		trace("\t\tLIST\r\n");
 800bc40:	481d      	ldr	r0, [pc, #116]	; (800bcb8 <sml_list_parse+0xc4>)
 800bc42:	f000 f93f 	bl	800bec4 <trace>
	}

	elems = sml_buf_get_next_length(buf);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f001 fdae 	bl	800d7a8 <sml_buf_get_next_length>
 800bc4c:	60f8      	str	r0, [r7, #12]

	if (elems > 0)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	dd21      	ble.n	800bc98 <sml_list_parse+0xa4>
    {
		first = sml_list_entry_parse(buf);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7ff ff29 	bl	800baac <sml_list_entry_parse>
 800bc5a:	6178      	str	r0, [r7, #20]
		if (sml_buf_has_errors(buf)) goto error;
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f001 fea3 	bl	800d9a8 <sml_buf_has_errors>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d11c      	bne.n	800bca2 <sml_list_parse+0xae>
		last = first;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	613b      	str	r3, [r7, #16]
		elems--;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	60fb      	str	r3, [r7, #12]
	}

	while(elems > 0)
 800bc72:	e011      	b.n	800bc98 <sml_list_parse+0xa4>
    {
		last->next = sml_list_entry_parse(buf);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7ff ff19 	bl	800baac <sml_list_entry_parse>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	61da      	str	r2, [r3, #28]
		if (sml_buf_has_errors(buf)) goto error;
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f001 fe91 	bl	800d9a8 <sml_buf_has_errors>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10c      	bne.n	800bca6 <sml_list_parse+0xb2>
		last = last->next;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	69db      	ldr	r3, [r3, #28]
 800bc90:	613b      	str	r3, [r7, #16]
		elems--;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	60fb      	str	r3, [r7, #12]
	while(elems > 0)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	dcea      	bgt.n	800bc74 <sml_list_parse+0x80>
	}

	return first;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	e006      	b.n	800bcb0 <sml_list_parse+0xbc>
		if (sml_buf_has_errors(buf)) goto error;
 800bca2:	bf00      	nop
 800bca4:	e000      	b.n	800bca8 <sml_list_parse+0xb4>
		if (sml_buf_has_errors(buf)) goto error;
 800bca6:	bf00      	nop

error:
	sml_list_free(first);
 800bca8:	6978      	ldr	r0, [r7, #20]
 800bcaa:	f000 f8ec 	bl	800be86 <sml_list_free>
	return NULL;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3718      	adds	r7, #24
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	08011cc8 	.word	0x08011cc8

0800bcbc <sml_list_entry_write>:


int sml_list_entry_write(sml_list *list, sml_buffer *buf)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
	int rv;

	if (!list || !buf)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <sml_list_entry_write+0x16>
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d102      	bne.n	800bcd8 <sml_list_entry_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800bcd2:	f240 33e6 	movw	r3, #998	; 0x3e6
 800bcd6:	e05c      	b.n	800bd92 <sml_list_entry_write+0xd6>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 7);
 800bcd8:	2207      	movs	r2, #7
 800bcda:	2170      	movs	r1, #112	; 0x70
 800bcdc:	6838      	ldr	r0, [r7, #0]
 800bcde:	f001 fdc5 	bl	800d86c <sml_buf_set_type_and_length>
 800bce2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <sml_list_entry_write+0x32>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	e051      	b.n	800bd92 <sml_list_entry_write+0xd6>

	rv = sml_octet_string_write(list->obj_name, buf);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f001 f83d 	bl	800cd74 <sml_octet_string_write>
 800bcfa:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <sml_list_entry_write+0x4a>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	e045      	b.n	800bd92 <sml_list_entry_write+0xd6>

	rv = sml_status_write(list->status, buf);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	6839      	ldr	r1, [r7, #0]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f001 ff6d 	bl	800dbec <sml_status_write>
 800bd12:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <sml_list_entry_write+0x62>
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	e039      	b.n	800bd92 <sml_list_entry_write+0xd6>

	rv = sml_time_write(list->val_time, buf);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f002 f94b 	bl	800dfc0 <sml_time_write>
 800bd2a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d001      	beq.n	800bd36 <sml_list_entry_write+0x7a>
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	e02d      	b.n	800bd92 <sml_list_entry_write+0xd6>

	rv = sml_u8_write(list->unit, buf);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68d8      	ldr	r0, [r3, #12]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	2160      	movs	r1, #96	; 0x60
 800bd40:	f000 fe7c 	bl	800ca3c <sml_number_write>
 800bd44:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <sml_list_entry_write+0x94>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	e020      	b.n	800bd92 <sml_list_entry_write+0xd6>

	rv = sml_i8_write(list->scaler, buf);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6918      	ldr	r0, [r3, #16]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	2201      	movs	r2, #1
 800bd58:	2150      	movs	r1, #80	; 0x50
 800bd5a:	f000 fe6f 	bl	800ca3c <sml_number_write>
 800bd5e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d001      	beq.n	800bd6a <sml_list_entry_write+0xae>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	e013      	b.n	800bd92 <sml_list_entry_write+0xd6>

	rv = sml_value_write(list->value, buf);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	6839      	ldr	r1, [r7, #0]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f004 fa9d 	bl	80102b0 <sml_value_write>
 800bd76:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <sml_list_entry_write+0xc6>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	e007      	b.n	800bd92 <sml_list_entry_write+0xd6>

	rv = sml_octet_string_write(list->value_signature, buf);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fff3 	bl	800cd74 <sml_octet_string_write>
 800bd8e:	60f8      	str	r0, [r7, #12]

	return rv;
 800bd90:	68fb      	ldr	r3, [r7, #12]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <sml_list_write>:

int sml_list_write(sml_list *list, sml_buffer *buf)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b086      	sub	sp, #24
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	6039      	str	r1, [r7, #0]
    sml_list *i = list;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	617b      	str	r3, [r7, #20]
	int len = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	613b      	str	r3, [r7, #16]
	int rv;

	if (!buf)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d102      	bne.n	800bdb8 <sml_list_write+0x1e>
	{
		return SML_PARAMETER_ERROR;
 800bdb2:	f240 33e6 	movw	r3, #998	; 0x3e6
 800bdb6:	e031      	b.n	800be1c <sml_list_write+0x82>
	}

    if (list == 0)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10b      	bne.n	800bdd6 <sml_list_write+0x3c>
    {
		rv = sml_buf_optional_write(buf);
 800bdbe:	6838      	ldr	r0, [r7, #0]
 800bdc0:	f001 fe46 	bl	800da50 <sml_buf_optional_write>
 800bdc4:	60f8      	str	r0, [r7, #12]
		return rv;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	e028      	b.n	800be1c <sml_list_write+0x82>
	}

	while(i)
    {
		i = i->next;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	69db      	ldr	r3, [r3, #28]
 800bdce:	617b      	str	r3, [r7, #20]
		len++;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	613b      	str	r3, [r7, #16]
	while(i)
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1f6      	bne.n	800bdca <sml_list_write+0x30>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, len);
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	461a      	mov	r2, r3
 800bde0:	2170      	movs	r1, #112	; 0x70
 800bde2:	6838      	ldr	r0, [r7, #0]
 800bde4:	f001 fd42 	bl	800d86c <sml_buf_set_type_and_length>
 800bde8:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d001      	beq.n	800bdf4 <sml_list_write+0x5a>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	e013      	b.n	800be1c <sml_list_write+0x82>

	i = list;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	617b      	str	r3, [r7, #20]
	while(i)
 800bdf8:	e00c      	b.n	800be14 <sml_list_write+0x7a>
    {
		rv = sml_list_entry_write(i, buf);
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6978      	ldr	r0, [r7, #20]
 800bdfe:	f7ff ff5d 	bl	800bcbc <sml_list_entry_write>
 800be02:	60f8      	str	r0, [r7, #12]
		if (rv != SML_OK) return rv;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <sml_list_write+0x74>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	e006      	b.n	800be1c <sml_list_write+0x82>

		i = i->next;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	69db      	ldr	r3, [r3, #28]
 800be12:	617b      	str	r3, [r7, #20]
	while(i)
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1ef      	bne.n	800bdfa <sml_list_write+0x60>
	}

	return rv;
 800be1a:	68fb      	ldr	r3, [r7, #12]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <sml_list_entry_free>:

void sml_list_entry_free(sml_list *list)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
	if (list)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d025      	beq.n	800be7e <sml_list_entry_free+0x5a>
    {
		sml_octet_string_free(list->obj_name);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4618      	mov	r0, r3
 800be38:	f000 ffe1 	bl	800cdfe <sml_octet_string_free>
		sml_status_free(list->status);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	f001 ff02 	bl	800dc4a <sml_status_free>
		sml_time_free(list->val_time);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f002 f904 	bl	800e058 <sml_time_free>
		sml_number_free(list->unit);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	4618      	mov	r0, r3
 800be56:	f000 fe9e 	bl	800cb96 <sml_number_free>
		sml_number_free(list->scaler);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 fe99 	bl	800cb96 <sml_number_free>
		sml_value_free(list->value);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	695b      	ldr	r3, [r3, #20]
 800be68:	4618      	mov	r0, r3
 800be6a:	f004 fa76 	bl	801035a <sml_value_free>
		sml_octet_string_free(list->value_signature);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	4618      	mov	r0, r3
 800be74:	f000 ffc3 	bl	800cdfe <sml_octet_string_free>
		
		free(list);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7fd f9b3 	bl	80091e4 <vPortFree>
	}
}
 800be7e:	bf00      	nop
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <sml_list_free>:

void sml_list_free(sml_list *list)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
	if (list)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d013      	beq.n	800bebc <sml_list_free+0x36>
    {
		sml_list *f = list;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	60fb      	str	r3, [r7, #12]
		sml_list *n = list->next;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	69db      	ldr	r3, [r3, #28]
 800be9c:	60bb      	str	r3, [r7, #8]

		while(f)
 800be9e:	e00a      	b.n	800beb6 <sml_list_free+0x30>
        {
			sml_list_entry_free(f);
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f7ff ffbf 	bl	800be24 <sml_list_entry_free>
			f = n;
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	60fb      	str	r3, [r7, #12]
			if (f)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d002      	beq.n	800beb6 <sml_list_free+0x30>
            {
				n = f->next;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	60bb      	str	r3, [r7, #8]
		while(f)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1f1      	bne.n	800bea0 <sml_list_free+0x1a>
			}
		}
	}
}
 800bebc:	bf00      	nop
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <trace>:
	trace_type	= trace_t;
	trace_cb	= function_trace_cb;
}

void trace(const char *format, ...)
{
 800bec4:	b40f      	push	{r0, r1, r2, r3}
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b082      	sub	sp, #8
 800beca:	af00      	add	r7, sp, #0
	va_list arguments;

	if (!format)
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d01d      	beq.n	800bf0e <trace+0x4a>
		return;

	/* Initializing arguments to store all values after format */
	va_start(arguments, format);
 800bed2:	f107 0314 	add.w	r3, r7, #20
 800bed6:	607b      	str	r3, [r7, #4]

	if ((trace_type == SML_TRACE_CB) && trace_cb)
 800bed8:	4b10      	ldr	r3, [pc, #64]	; (800bf1c <trace+0x58>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b02      	cmp	r3, #2
 800bede:	d109      	bne.n	800bef4 <trace+0x30>
 800bee0:	4b0f      	ldr	r3, [pc, #60]	; (800bf20 <trace+0x5c>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <trace+0x30>
	{
		trace_cb(format, arguments);
 800bee8:	4b0d      	ldr	r3, [pc, #52]	; (800bf20 <trace+0x5c>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6879      	ldr	r1, [r7, #4]
 800beee:	6938      	ldr	r0, [r7, #16]
 800bef0:	4798      	blx	r3
 800bef2:	e00d      	b.n	800bf10 <trace+0x4c>
	}
	else if (trace_type == SML_TRACE_PRINTF)
 800bef4:	4b09      	ldr	r3, [pc, #36]	; (800bf1c <trace+0x58>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d109      	bne.n	800bf10 <trace+0x4c>
	{
		vfprintf(stderr, format, arguments);
 800befc:	4b09      	ldr	r3, [pc, #36]	; (800bf24 <trace+0x60>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	6939      	ldr	r1, [r7, #16]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f004 fbe2 	bl	80106d0 <vfiprintf>
 800bf0c:	e000      	b.n	800bf10 <trace+0x4c>
		return;
 800bf0e:	bf00      	nop
	}

	// Cleans up the list
	va_end(arguments);
}
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf18:	b004      	add	sp, #16
 800bf1a:	4770      	bx	lr
 800bf1c:	20021834 	.word	0x20021834
 800bf20:	20021830 	.word	0x20021830
 800bf24:	2000029c 	.word	0x2000029c

0800bf28 <sml_message_init>:
#include <sml/sml_log.h>

// sml_message;

sml_message *sml_message_init(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
	sml_message *msg = (sml_message *)malloc(sizeof(sml_message));
 800bf2e:	2014      	movs	r0, #20
 800bf30:	f7fd f896 	bl	8009060 <pvPortMalloc>
 800bf34:	6078      	str	r0, [r7, #4]
	if (!msg)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d105      	bne.n	800bf48 <sml_message_init+0x20>
    {
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_message));
 800bf3c:	2114      	movs	r1, #20
 800bf3e:	480a      	ldr	r0, [pc, #40]	; (800bf68 <sml_message_init+0x40>)
 800bf40:	f7ff ffc0 	bl	800bec4 <trace>
		return NULL;
 800bf44:	2300      	movs	r3, #0
 800bf46:	e00a      	b.n	800bf5e <sml_message_init+0x36>
	}

	memset(msg, 0, sizeof(sml_message));
 800bf48:	2214      	movs	r2, #20
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f004 fa77 	bl	8010440 <memset>
	msg->transaction_id = sml_octet_string_generate_uuid();
 800bf52:	f000 ff6b 	bl	800ce2c <sml_octet_string_generate_uuid>
 800bf56:	4602      	mov	r2, r0
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	601a      	str	r2, [r3, #0]

	return msg;
 800bf5c:	687b      	ldr	r3, [r7, #4]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	08011cd4 	.word	0x08011cd4

0800bf6c <sml_message_parse>:

sml_message *sml_message_parse(sml_buffer *buf)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
	u16 crc;
	int startCursor;

	if (!buf)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d101      	bne.n	800bf7e <sml_message_parse+0x12>
	{
		return NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	e0a6      	b.n	800c0cc <sml_message_parse+0x160>
	}

	startCursor = buf->cursor;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	617b      	str	r3, [r7, #20]

	sml_message *msg = sml_message_init();
 800bf84:	f7ff ffd0 	bl	800bf28 <sml_message_init>
 800bf88:	6138      	str	r0, [r7, #16]
	if (!msg)
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d105      	bne.n	800bf9c <sml_message_parse+0x30>
    {
		buf->error = SML_MALLOC_ERROR;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bf96:	611a      	str	r2, [r3, #16]
		return NULL;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	e097      	b.n	800c0cc <sml_message_parse+0x160>
	}

	sml_octet_string_free(msg->transaction_id);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f000 ff2c 	bl	800cdfe <sml_octet_string_free>
	memset(msg, 0, sizeof(sml_message));
 800bfa6:	2214      	movs	r2, #20
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	6938      	ldr	r0, [r7, #16]
 800bfac:	f004 fa48 	bl	8010440 <memset>

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f001 fd0a 	bl	800d9ca <sml_buf_get_next_type>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b70      	cmp	r3, #112	; 0x70
 800bfba:	d003      	beq.n	800bfc4 <sml_message_parse+0x58>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2232      	movs	r2, #50	; 0x32
 800bfc0:	611a      	str	r2, [r3, #16]
		goto error;
 800bfc2:	e07f      	b.n	800c0c4 <sml_message_parse+0x158>
	}

	if (sml_buf_get_next_length(buf) != 6)
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f001 fbef 	bl	800d7a8 <sml_buf_get_next_length>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b06      	cmp	r3, #6
 800bfce:	d003      	beq.n	800bfd8 <sml_message_parse+0x6c>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2220      	movs	r2, #32
 800bfd4:	611a      	str	r2, [r3, #16]
		goto error;
 800bfd6:	e075      	b.n	800c0c4 <sml_message_parse+0x158>
	}

	if (sml_debug_output(buf))
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 fd6b 	bl	800dab4 <sml_debug_output>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <sml_message_parse+0x7e>
    {
		trace("\t\tMESSAGE\r\n");
 800bfe4:	483b      	ldr	r0, [pc, #236]	; (800c0d4 <sml_message_parse+0x168>)
 800bfe6:	f7ff ff6d 	bl	800bec4 <trace>
	}

	msg->transaction_id = sml_octet_string_parse(buf);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fe76 	bl	800ccdc <sml_octet_string_parse>
 800bff0:	4602      	mov	r2, r0
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f001 fcd6 	bl	800d9a8 <sml_buf_has_errors>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d157      	bne.n	800c0b2 <sml_message_parse+0x146>

	msg->group_id = sml_u8_parse(buf);
 800c002:	2201      	movs	r2, #1
 800c004:	2160      	movs	r1, #96	; 0x60
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fc76 	bl	800c8f8 <sml_number_parse>
 800c00c:	4602      	mov	r2, r0
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f001 fcc8 	bl	800d9a8 <sml_buf_has_errors>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d14b      	bne.n	800c0b6 <sml_message_parse+0x14a>

	msg->abort_on_error = sml_u8_parse(buf);
 800c01e:	2201      	movs	r2, #1
 800c020:	2160      	movs	r1, #96	; 0x60
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fc68 	bl	800c8f8 <sml_number_parse>
 800c028:	4602      	mov	r2, r0
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f001 fcba 	bl	800d9a8 <sml_buf_has_errors>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d13f      	bne.n	800c0ba <sml_message_parse+0x14e>

	msg->message_body = sml_message_body_parse(buf);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f954 	bl	800c2e8 <sml_message_body_parse>
 800c040:	4602      	mov	r2, r0
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f001 fcae 	bl	800d9a8 <sml_buf_has_errors>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d135      	bne.n	800c0be <sml_message_parse+0x152>

	crc = sml_crc16_calculate(buf->buffer + startCursor, buf->cursor - startCursor);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	18d0      	adds	r0, r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689a      	ldr	r2, [r3, #8]
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	4619      	mov	r1, r3
 800c064:	f7fd fd3c 	bl	8009ae0 <sml_crc16_calculate>
 800c068:	4603      	mov	r3, r0
 800c06a:	81fb      	strh	r3, [r7, #14]

	msg->crc = sml_u16_parse(buf);
 800c06c:	2202      	movs	r2, #2
 800c06e:	2160      	movs	r1, #96	; 0x60
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fc41 	bl	800c8f8 <sml_number_parse>
 800c076:	4602      	mov	r2, r0
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f001 fc93 	bl	800d9a8 <sml_buf_has_errors>
 800c082:	4603      	mov	r3, r0
 800c084:	2b00      	cmp	r3, #0
 800c086:	d11c      	bne.n	800c0c2 <sml_message_parse+0x156>

	if (crc != *msg->crc)
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	691b      	ldr	r3, [r3, #16]
 800c08c:	881b      	ldrh	r3, [r3, #0]
 800c08e:	89fa      	ldrh	r2, [r7, #14]
 800c090:	429a      	cmp	r2, r3
 800c092:	d002      	beq.n	800c09a <sml_message_parse+0x12e>
    {
	    buf->error = SML_MESSAGE_CRC_ERROR;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	22c8      	movs	r2, #200	; 0xc8
 800c098:	611a      	str	r2, [r3, #16]
	}

	if (sml_buf_get_current_byte(buf) == SML_MESSAGE_END)
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f001 fca8 	bl	800d9f0 <sml_buf_get_current_byte>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d103      	bne.n	800c0ae <sml_message_parse+0x142>
    {
		sml_buf_update_bytes_read(buf, 1);
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f001 fcc0 	bl	800da2e <sml_buf_update_bytes_read>
	}
	
	return msg;
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	e00c      	b.n	800c0cc <sml_message_parse+0x160>
	if (sml_buf_has_errors(buf)) goto error;
 800c0b2:	bf00      	nop
 800c0b4:	e006      	b.n	800c0c4 <sml_message_parse+0x158>
	if (sml_buf_has_errors(buf)) goto error;
 800c0b6:	bf00      	nop
 800c0b8:	e004      	b.n	800c0c4 <sml_message_parse+0x158>
	if (sml_buf_has_errors(buf)) goto error;
 800c0ba:	bf00      	nop
 800c0bc:	e002      	b.n	800c0c4 <sml_message_parse+0x158>
	if (sml_buf_has_errors(buf)) goto error;
 800c0be:	bf00      	nop
 800c0c0:	e000      	b.n	800c0c4 <sml_message_parse+0x158>
	if (sml_buf_has_errors(buf)) goto error;
 800c0c2:	bf00      	nop

error:
	sml_message_free(msg);
 800c0c4:	6938      	ldr	r0, [r7, #16]
 800c0c6:	f000 f8ab 	bl	800c220 <sml_message_free>
	return NULL;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3718      	adds	r7, #24
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	08011cf0 	.word	0x08011cf0

0800c0d8 <sml_message_write>:

int sml_message_write(sml_message *msg, sml_buffer *buf)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
	int startCursor;
	u16 crc;
	int rv;

	if (!msg || !buf)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <sml_message_write+0x16>
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d102      	bne.n	800c0f4 <sml_message_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800c0ee:	f240 33e6 	movw	r3, #998	; 0x3e6
 800c0f2:	e091      	b.n	800c218 <sml_message_write+0x140>
	}

	startCursor = buf->cursor;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	613b      	str	r3, [r7, #16]

	buf = sml_buffer_resize(buf, SML_BUFFER_DEFAULT_LENGTH);
 800c0fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0fe:	6838      	ldr	r0, [r7, #0]
 800c100:	f001 fae6 	bl	800d6d0 <sml_buffer_resize>
 800c104:	6038      	str	r0, [r7, #0]
	if (!buf)
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d102      	bne.n	800c112 <sml_message_write+0x3a>
	{
		return SML_MALLOC_ERROR;
 800c10c:	f240 33e7 	movw	r3, #999	; 0x3e7
 800c110:	e082      	b.n	800c218 <sml_message_write+0x140>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 6);
 800c112:	2206      	movs	r2, #6
 800c114:	2170      	movs	r1, #112	; 0x70
 800c116:	6838      	ldr	r0, [r7, #0]
 800c118:	f001 fba8 	bl	800d86c <sml_buf_set_type_and_length>
 800c11c:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <sml_message_write+0x50>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	e077      	b.n	800c218 <sml_message_write+0x140>

	rv = sml_octet_string_write(msg->transaction_id, buf);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 fe20 	bl	800cd74 <sml_octet_string_write>
 800c134:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <sml_message_write+0x68>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	e06b      	b.n	800c218 <sml_message_write+0x140>

	rv = sml_u8_write(msg->group_id, buf);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6858      	ldr	r0, [r3, #4]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	2201      	movs	r2, #1
 800c148:	2160      	movs	r1, #96	; 0x60
 800c14a:	f000 fc77 	bl	800ca3c <sml_number_write>
 800c14e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <sml_message_write+0x82>
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	e05e      	b.n	800c218 <sml_message_write+0x140>

	rv = sml_u8_write(msg->abort_on_error, buf);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6898      	ldr	r0, [r3, #8]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	2201      	movs	r2, #1
 800c162:	2160      	movs	r1, #96	; 0x60
 800c164:	f000 fc6a 	bl	800ca3c <sml_number_write>
 800c168:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d001      	beq.n	800c174 <sml_message_write+0x9c>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	e051      	b.n	800c218 <sml_message_write+0x140>

	rv = sml_message_body_write(msg->message_body, buf);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f000 f9c4 	bl	800c508 <sml_message_body_write>
 800c180:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d001      	beq.n	800c18c <sml_message_write+0xb4>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	e045      	b.n	800c218 <sml_message_write+0x140>

	if (msg->crc)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d004      	beq.n	800c19e <sml_message_write+0xc6>
    {
		sml_number_free(msg->crc);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 fcfc 	bl	800cb96 <sml_number_free>
	}

	crc = sml_crc16_calculate(&(buf->buffer[startCursor]), buf->cursor - startCursor);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	18d0      	adds	r0, r2, r3
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	689a      	ldr	r2, [r3, #8]
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	f7fd fc96 	bl	8009ae0 <sml_crc16_calculate>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	82fb      	strh	r3, [r7, #22]
	if (buf->flags & SML_FLAGS_CRC_WITH_MASK)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d005      	beq.n	800c1d0 <sml_message_write+0xf8>
	{
		crc = crc ^ 0x4553;
 800c1c4:	8afb      	ldrh	r3, [r7, #22]
 800c1c6:	f483 438a 	eor.w	r3, r3, #17664	; 0x4500
 800c1ca:	f083 0353 	eor.w	r3, r3, #83	; 0x53
 800c1ce:	82fb      	strh	r3, [r7, #22]
	}

	msg->crc = sml_u16_init(crc);
 800c1d0:	8af8      	ldrh	r0, [r7, #22]
 800c1d2:	f04f 0100 	mov.w	r1, #0
 800c1d6:	2302      	movs	r3, #2
 800c1d8:	2260      	movs	r2, #96	; 0x60
 800c1da:	f000 fb53 	bl	800c884 <sml_number_init>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	611a      	str	r2, [r3, #16]
	rv = sml_u16_write(msg->crc, buf);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6918      	ldr	r0, [r3, #16]
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	2160      	movs	r1, #96	; 0x60
 800c1ee:	f000 fc25 	bl	800ca3c <sml_number_write>
 800c1f2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d001      	beq.n	800c1fe <sml_message_write+0x126>
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	e00c      	b.n	800c218 <sml_message_write+0x140>

	// end of message
	buf->buffer[buf->cursor] = 0x0;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	4413      	add	r3, r2
 800c208:	2200      	movs	r2, #0
 800c20a:	701a      	strb	r2, [r3, #0]
	buf->cursor++;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	1c5a      	adds	r2, r3, #1
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	609a      	str	r2, [r3, #8]

	return rv;
 800c216:	68fb      	ldr	r3, [r7, #12]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3718      	adds	r7, #24
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <sml_message_free>:

void sml_message_free(sml_message *msg)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
	if (msg)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d01b      	beq.n	800c266 <sml_message_free+0x46>
    {
		sml_octet_string_free(msg->transaction_id);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4618      	mov	r0, r3
 800c234:	f000 fde3 	bl	800cdfe <sml_octet_string_free>
		sml_number_free(msg->group_id);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 fcaa 	bl	800cb96 <sml_number_free>
		sml_number_free(msg->abort_on_error);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	4618      	mov	r0, r3
 800c248:	f000 fca5 	bl	800cb96 <sml_number_free>
		sml_message_body_free(msg->message_body);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	4618      	mov	r0, r3
 800c252:	f000 fa5b 	bl	800c70c <sml_message_body_free>
		sml_number_free(msg->crc);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 fc9b 	bl	800cb96 <sml_number_free>
		free(msg);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7fc ffbf 	bl	80091e4 <vPortFree>
	}
}
 800c266:	bf00      	nop
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
	...

0800c270 <sml_message_body_init>:

// sml_message_body;

sml_message_body *sml_message_body_init()
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
	sml_message_body *message_body = (sml_message_body *)malloc(sizeof(sml_message_body));
 800c276:	2008      	movs	r0, #8
 800c278:	f7fc fef2 	bl	8009060 <pvPortMalloc>
 800c27c:	6078      	str	r0, [r7, #4]
	if (!message_body)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d105      	bne.n	800c290 <sml_message_body_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_message_body));
 800c284:	2108      	movs	r1, #8
 800c286:	4807      	ldr	r0, [pc, #28]	; (800c2a4 <sml_message_body_init+0x34>)
 800c288:	f7ff fe1c 	bl	800bec4 <trace>
		return NULL;
 800c28c:	2300      	movs	r3, #0
 800c28e:	e005      	b.n	800c29c <sml_message_body_init+0x2c>
	}
	memset(message_body, 0, sizeof(sml_message_body));
 800c290:	2208      	movs	r2, #8
 800c292:	2100      	movs	r1, #0
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f004 f8d3 	bl	8010440 <memset>

	return message_body;
 800c29a:	687b      	ldr	r3, [r7, #4]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	08011cd4 	.word	0x08011cd4

0800c2a8 <sml_message_body_init2>:

sml_message_body *sml_message_body_init2(u32 tag, void *data)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
	sml_message_body *message_body = sml_message_body_init();
 800c2b2:	f7ff ffdd 	bl	800c270 <sml_message_body_init>
 800c2b6:	60f8      	str	r0, [r7, #12]
	if (!message_body)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <sml_message_body_init2+0x1a>
    {
		return NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e00e      	b.n	800c2e0 <sml_message_body_init2+0x38>
	}
	message_body->tag = sml_u32_init(tag);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f04f 0100 	mov.w	r1, #0
 800c2ca:	2304      	movs	r3, #4
 800c2cc:	2260      	movs	r2, #96	; 0x60
 800c2ce:	f000 fad9 	bl	800c884 <sml_number_init>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	601a      	str	r2, [r3, #0]
	message_body->d.data = data;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	683a      	ldr	r2, [r7, #0]
 800c2dc:	605a      	str	r2, [r3, #4]

	return message_body;
 800c2de:	68fb      	ldr	r3, [r7, #12]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <sml_message_body_parse>:

sml_message_body *sml_message_body_parse(sml_buffer *buf)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
	sml_message_body *msg_body = NULL;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d101      	bne.n	800c2fe <sml_message_body_parse+0x16>
	{
		return NULL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e0fb      	b.n	800c4f6 <sml_message_body_parse+0x20e>
	}

	msg_body = sml_message_body_init();
 800c2fe:	f7ff ffb7 	bl	800c270 <sml_message_body_init>
 800c302:	60f8      	str	r0, [r7, #12]
	if (!msg_body)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d105      	bne.n	800c316 <sml_message_body_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c310:	611a      	str	r2, [r3, #16]
		return NULL;
 800c312:	2300      	movs	r3, #0
 800c314:	e0ef      	b.n	800c4f6 <sml_message_body_parse+0x20e>
	}

	memset(msg_body, 0, sizeof(sml_message_body));
 800c316:	2208      	movs	r2, #8
 800c318:	2100      	movs	r1, #0
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f004 f890 	bl	8010440 <memset>

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f001 fb52 	bl	800d9ca <sml_buf_get_next_type>
 800c326:	4603      	mov	r3, r0
 800c328:	2b70      	cmp	r3, #112	; 0x70
 800c32a:	d003      	beq.n	800c334 <sml_message_body_parse+0x4c>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2232      	movs	r2, #50	; 0x32
 800c330:	611a      	str	r2, [r3, #16]
		goto error;
 800c332:	e0dc      	b.n	800c4ee <sml_message_body_parse+0x206>
	}

	if (sml_buf_get_next_length(buf) != 2)
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f001 fa37 	bl	800d7a8 <sml_buf_get_next_length>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d003      	beq.n	800c348 <sml_message_body_parse+0x60>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2220      	movs	r2, #32
 800c344:	611a      	str	r2, [r3, #16]
		goto error;
 800c346:	e0d2      	b.n	800c4ee <sml_message_body_parse+0x206>
	}

	msg_body->tag = sml_u32_parse(buf);
 800c348:	2204      	movs	r2, #4
 800c34a:	2160      	movs	r1, #96	; 0x60
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fad3 	bl	800c8f8 <sml_number_parse>
 800c352:	4602      	mov	r2, r0
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f001 fb25 	bl	800d9a8 <sml_buf_has_errors>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	f040 80c3 	bne.w	800c4ec <sml_message_body_parse+0x204>

	if (sml_debug_output(buf))
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f001 fba4 	bl	800dab4 <sml_debug_output>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d006      	beq.n	800c380 <sml_message_body_parse+0x98>
    {
		trace("\t\tMESSAGE BODY\t%i\r\n", *(msg_body->tag));
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4619      	mov	r1, r3
 800c37a:	4861      	ldr	r0, [pc, #388]	; (800c500 <sml_message_body_parse+0x218>)
 800c37c:	f7ff fda2 	bl	800bec4 <trace>
	}

	switch (*(msg_body->tag))
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c38a:	d064      	beq.n	800c456 <sml_message_body_parse+0x16e>
 800c38c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c390:	d819      	bhi.n	800c3c6 <sml_message_body_parse+0xde>
 800c392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c396:	d042      	beq.n	800c41e <sml_message_body_parse+0x136>
 800c398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c39c:	d807      	bhi.n	800c3ae <sml_message_body_parse+0xc6>
 800c39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3a2:	d02e      	beq.n	800c402 <sml_message_body_parse+0x11a>
 800c3a4:	f240 1201 	movw	r2, #257	; 0x101
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d031      	beq.n	800c410 <sml_message_body_parse+0x128>
 800c3ac:	e08b      	b.n	800c4c6 <sml_message_body_parse+0x1de>
 800c3ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3b2:	d042      	beq.n	800c43a <sml_message_body_parse+0x152>
 800c3b4:	f240 3201 	movw	r2, #769	; 0x301
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d045      	beq.n	800c448 <sml_message_body_parse+0x160>
 800c3bc:	f240 2201 	movw	r2, #513	; 0x201
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d033      	beq.n	800c42c <sml_message_body_parse+0x144>
 800c3c4:	e07f      	b.n	800c4c6 <sml_message_body_parse+0x1de>
 800c3c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c3ca:	d060      	beq.n	800c48e <sml_message_body_parse+0x1a6>
 800c3cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c3d0:	d80b      	bhi.n	800c3ea <sml_message_body_parse+0x102>
 800c3d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c3d6:	d04c      	beq.n	800c472 <sml_message_body_parse+0x18a>
 800c3d8:	f240 5201 	movw	r2, #1281	; 0x501
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d04f      	beq.n	800c480 <sml_message_body_parse+0x198>
 800c3e0:	f240 4201 	movw	r2, #1025	; 0x401
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d03d      	beq.n	800c464 <sml_message_body_parse+0x17c>
 800c3e8:	e06d      	b.n	800c4c6 <sml_message_body_parse+0x1de>
 800c3ea:	f240 7201 	movw	r2, #1793	; 0x701
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d05b      	beq.n	800c4aa <sml_message_body_parse+0x1c2>
 800c3f2:	f64f 7201 	movw	r2, #65281	; 0xff01
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d05e      	beq.n	800c4b8 <sml_message_body_parse+0x1d0>
 800c3fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c3fe:	d04d      	beq.n	800c49c <sml_message_body_parse+0x1b4>
 800c400:	e061      	b.n	800c4c6 <sml_message_body_parse+0x1de>
    {
		case SML_MESSAGE_OPEN_REQUEST:
			msg_body->d.open_request = sml_open_request_parse(buf);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fd6e 	bl	800cee4 <sml_open_request_parse>
 800c408:	4602      	mov	r2, r0
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	605a      	str	r2, [r3, #4]
			break;
 800c40e:	e06b      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_OPEN_RESPONSE:
			msg_body->d.open_response = sml_open_response_parse(buf);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fecb 	bl	800d1ac <sml_open_response_parse>
 800c416:	4602      	mov	r2, r0
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	605a      	str	r2, [r3, #4]
			break;
 800c41c:	e064      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_CLOSE_REQUEST:
			msg_body->d.close_request = sml_close_request_parse(buf);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7fd fa32 	bl	8009888 <sml_close_request_parse>
 800c424:	4602      	mov	r2, r0
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	605a      	str	r2, [r3, #4]
			break;
 800c42a:	e05d      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_CLOSE_RESPONSE:
			msg_body->d.close_response = sml_close_response_parse(buf);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7fd facb 	bl	80099c8 <sml_close_response_parse>
 800c432:	4602      	mov	r2, r0
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	605a      	str	r2, [r3, #4]
			break;
 800c438:	e056      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_GET_PROFILE_PACK_REQUEST:
			msg_body->d.get_profile_pack_request = sml_get_profile_pack_request_parse(buf);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7fe fb60 	bl	800ab00 <sml_get_profile_pack_request_parse>
 800c440:	4602      	mov	r2, r0
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	605a      	str	r2, [r3, #4]
			break;
 800c446:	e04f      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_GET_PROFILE_PACK_RESPONSE:
			msg_body->d.get_profile_pack_response = sml_get_profile_pack_response_parse(buf);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7fe fd9d 	bl	800af88 <sml_get_profile_pack_response_parse>
 800c44e:	4602      	mov	r2, r0
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	605a      	str	r2, [r3, #4]
			break;
 800c454:	e048      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_GET_PROFILE_LIST_REQUEST:
			msg_body->d.get_profile_list_request = sml_get_profile_list_request_parse(buf);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7fe fb52 	bl	800ab00 <sml_get_profile_pack_request_parse>
 800c45c:	4602      	mov	r2, r0
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	605a      	str	r2, [r3, #4]
			break;
 800c462:	e041      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_GET_PROFILE_LIST_RESPONSE:
			msg_body->d.get_profile_list_response = sml_get_profile_list_response_parse(buf);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7fe f99b 	bl	800a7a0 <sml_get_profile_list_response_parse>
 800c46a:	4602      	mov	r2, r0
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	605a      	str	r2, [r3, #4]
			break;
 800c470:	e03a      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_GET_PROC_PARAMETER_REQUEST:
			msg_body->d.get_proc_parameter_request = sml_get_proc_parameter_request_parse(buf);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7fd ff8a 	bl	800a38c <sml_get_proc_parameter_request_parse>
 800c478:	4602      	mov	r2, r0
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	605a      	str	r2, [r3, #4]
			break;
 800c47e:	e033      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_GET_PROC_PARAMETER_RESPONSE:
			msg_body->d.get_proc_parameter_response = sml_get_proc_parameter_response_parse(buf);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7fe f8a7 	bl	800a5d4 <sml_get_proc_parameter_response_parse>
 800c486:	4602      	mov	r2, r0
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	605a      	str	r2, [r3, #4]
			break;
 800c48c:	e02c      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_SET_PROC_PARAMETER_REQUEST:
			msg_body->d.set_proc_parameter_request = sml_set_proc_parameter_request_parse(buf);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 ffd2 	bl	800d438 <sml_set_proc_parameter_request_parse>
 800c494:	4602      	mov	r2, r0
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	605a      	str	r2, [r3, #4]
			break;
 800c49a:	e025      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_GET_LIST_REQUEST:
			msg_body->d.get_list_request = sml_get_list_request_parse(buf);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7fd fcef 	bl	8009e80 <sml_get_list_request_parse>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	605a      	str	r2, [r3, #4]
			break;
 800c4a8:	e01e      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_GET_LIST_RESPONSE:
			msg_body->d.get_list_response = sml_get_list_response_parse(buf);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7fd fe0c 	bl	800a0c8 <sml_get_list_response_parse>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	605a      	str	r2, [r3, #4]
			break;
 800c4b6:	e017      	b.n	800c4e8 <sml_message_body_parse+0x200>
		case SML_MESSAGE_ATTENTION_RESPONSE:
			msg_body->d.attention_response = sml_attention_response_parse(buf);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7fd f81f 	bl	80094fc <sml_attention_response_parse>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	605a      	str	r2, [r3, #4]
			break;
 800c4c4:	e010      	b.n	800c4e8 <sml_message_body_parse+0x200>
		default:
			buf->error = SML_MESSAGE_TAG_MISMATCH;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	226b      	movs	r2, #107	; 0x6b
 800c4ca:	611a      	str	r2, [r3, #16]
			if (sml_debug_output(buf))
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f001 faf1 	bl	800dab4 <sml_debug_output>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d006      	beq.n	800c4e6 <sml_message_body_parse+0x1fe>
            {
				trace("error: message type %04X not yet implemented\n", *(msg_body->tag));
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	4808      	ldr	r0, [pc, #32]	; (800c504 <sml_message_body_parse+0x21c>)
 800c4e2:	f7ff fcef 	bl	800bec4 <trace>
			}
			break;
 800c4e6:	bf00      	nop
	}

	return msg_body;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	e004      	b.n	800c4f6 <sml_message_body_parse+0x20e>
	if (sml_buf_has_errors(buf)) goto error;
 800c4ec:	bf00      	nop

error:
	free(msg_body);
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f7fc fe78 	bl	80091e4 <vPortFree>
	return NULL;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	08011cfc 	.word	0x08011cfc
 800c504:	08011d10 	.word	0x08011d10

0800c508 <sml_message_body_write>:

int sml_message_body_write(sml_message_body *message_body, sml_buffer *buf)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
	int rv;

	if (!message_body || !buf)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <sml_message_body_write+0x16>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d102      	bne.n	800c524 <sml_message_body_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800c51e:	f240 33e6 	movw	r3, #998	; 0x3e6
 800c522:	e0ed      	b.n	800c700 <sml_message_body_write+0x1f8>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 2);
 800c524:	2202      	movs	r2, #2
 800c526:	2170      	movs	r1, #112	; 0x70
 800c528:	6838      	ldr	r0, [r7, #0]
 800c52a:	f001 f99f 	bl	800d86c <sml_buf_set_type_and_length>
 800c52e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <sml_message_body_write+0x32>
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	e0e2      	b.n	800c700 <sml_message_body_write+0x1f8>

	if (buf->flags & SML_FLAGS_WRITE_CHOICE_COMPACT)
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	f003 0301 	and.w	r3, r3, #1
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00c      	beq.n	800c560 <sml_message_body_write+0x58>
    {
		rv = sml_u16_write(message_body->tag, buf);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2202      	movs	r2, #2
 800c54e:	2160      	movs	r1, #96	; 0x60
 800c550:	f000 fa74 	bl	800ca3c <sml_number_write>
 800c554:	60f8      	str	r0, [r7, #12]
		if (rv != SML_OK) return rv;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00e      	beq.n	800c57a <sml_message_body_write+0x72>
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	e0cf      	b.n	800c700 <sml_message_body_write+0x1f8>
	}
	else
    {
		rv = sml_u32_write(message_body->tag, buf);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6818      	ldr	r0, [r3, #0]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2204      	movs	r2, #4
 800c568:	2160      	movs	r1, #96	; 0x60
 800c56a:	f000 fa67 	bl	800ca3c <sml_number_write>
 800c56e:	60f8      	str	r0, [r7, #12]
		if (rv != SML_OK) return rv;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d001      	beq.n	800c57a <sml_message_body_write+0x72>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	e0c2      	b.n	800c700 <sml_message_body_write+0x1f8>
	}

	switch (*(message_body->tag))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c584:	d06a      	beq.n	800c65c <sml_message_body_write+0x154>
 800c586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c58a:	d819      	bhi.n	800c5c0 <sml_message_body_write+0xb8>
 800c58c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c590:	d044      	beq.n	800c61c <sml_message_body_write+0x114>
 800c592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c596:	d807      	bhi.n	800c5a8 <sml_message_body_write+0xa0>
 800c598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59c:	d02e      	beq.n	800c5fc <sml_message_body_write+0xf4>
 800c59e:	f240 1201 	movw	r2, #257	; 0x101
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d032      	beq.n	800c60c <sml_message_body_write+0x104>
 800c5a6:	e099      	b.n	800c6dc <sml_message_body_write+0x1d4>
 800c5a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5ac:	d046      	beq.n	800c63c <sml_message_body_write+0x134>
 800c5ae:	f240 3201 	movw	r2, #769	; 0x301
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d04a      	beq.n	800c64c <sml_message_body_write+0x144>
 800c5b6:	f240 2201 	movw	r2, #513	; 0x201
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d036      	beq.n	800c62c <sml_message_body_write+0x124>
 800c5be:	e08d      	b.n	800c6dc <sml_message_body_write+0x1d4>
 800c5c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c5c4:	d06a      	beq.n	800c69c <sml_message_body_write+0x194>
 800c5c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c5ca:	d80b      	bhi.n	800c5e4 <sml_message_body_write+0xdc>
 800c5cc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c5d0:	d054      	beq.n	800c67c <sml_message_body_write+0x174>
 800c5d2:	f240 5201 	movw	r2, #1281	; 0x501
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d058      	beq.n	800c68c <sml_message_body_write+0x184>
 800c5da:	f240 4201 	movw	r2, #1025	; 0x401
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d044      	beq.n	800c66c <sml_message_body_write+0x164>
 800c5e2:	e07b      	b.n	800c6dc <sml_message_body_write+0x1d4>
 800c5e4:	f240 7201 	movw	r2, #1793	; 0x701
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d067      	beq.n	800c6bc <sml_message_body_write+0x1b4>
 800c5ec:	f64f 7201 	movw	r2, #65281	; 0xff01
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d06b      	beq.n	800c6cc <sml_message_body_write+0x1c4>
 800c5f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c5f8:	d058      	beq.n	800c6ac <sml_message_body_write+0x1a4>
 800c5fa:	e06f      	b.n	800c6dc <sml_message_body_write+0x1d4>
    {
		case SML_MESSAGE_OPEN_REQUEST:
			rv = sml_open_request_write(message_body->d.open_request, buf);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fd12 	bl	800d02c <sml_open_request_write>
 800c608:	60f8      	str	r0, [r7, #12]
			break;
 800c60a:	e078      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_OPEN_RESPONSE:
			rv = sml_open_response_write(message_body->d.open_response, buf);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	4618      	mov	r0, r3
 800c614:	f000 fe60 	bl	800d2d8 <sml_open_response_write>
 800c618:	60f8      	str	r0, [r7, #12]
			break;
 800c61a:	e070      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_CLOSE_REQUEST:
			rv = sml_close_request_write(message_body->d.close_request, buf);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	4618      	mov	r0, r3
 800c624:	f7fd f97e 	bl	8009924 <sml_close_request_write>
 800c628:	60f8      	str	r0, [r7, #12]
			break;
 800c62a:	e068      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_CLOSE_RESPONSE:
			rv = sml_close_response_write(message_body->d.close_response, buf);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	4618      	mov	r0, r3
 800c634:	f7fd fa16 	bl	8009a64 <sml_close_response_write>
 800c638:	60f8      	str	r0, [r7, #12]
			break;
 800c63a:	e060      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_GET_PROFILE_PACK_REQUEST:
			rv = sml_get_profile_pack_request_write(message_body->d.get_profile_pack_request, buf);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	6839      	ldr	r1, [r7, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe fb68 	bl	800ad18 <sml_get_profile_pack_request_write>
 800c648:	60f8      	str	r0, [r7, #12]
			break;
 800c64a:	e058      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_GET_PROFILE_PACK_RESPONSE:
			rv = sml_get_profile_pack_response_write(message_body->d.get_profile_pack_response, buf);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	6839      	ldr	r1, [r7, #0]
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fd56 	bl	800b104 <sml_get_profile_pack_response_write>
 800c658:	60f8      	str	r0, [r7, #12]
			break;
 800c65a:	e050      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_GET_PROFILE_LIST_REQUEST:
			rv = sml_get_profile_list_request_write(message_body->d.get_profile_list_request, buf);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	4618      	mov	r0, r3
 800c664:	f7fe fb58 	bl	800ad18 <sml_get_profile_pack_request_write>
 800c668:	60f8      	str	r0, [r7, #12]
			break;
 800c66a:	e048      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_GET_PROFILE_LIST_RESPONSE:
			rv = sml_get_profile_list_response_write(message_body->d.get_profile_list_response, buf);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	6839      	ldr	r1, [r7, #0]
 800c672:	4618      	mov	r0, r3
 800c674:	f7fe f95c 	bl	800a930 <sml_get_profile_list_response_write>
 800c678:	60f8      	str	r0, [r7, #12]
			break;
 800c67a:	e040      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_GET_PROC_PARAMETER_REQUEST:
			rv = sml_get_proc_parameter_request_write(message_body->d.get_proc_parameter_request, buf);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	4618      	mov	r0, r3
 800c684:	f7fd ff08 	bl	800a498 <sml_get_proc_parameter_request_write>
 800c688:	60f8      	str	r0, [r7, #12]
			break;
 800c68a:	e038      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_GET_PROC_PARAMETER_RESPONSE:
			rv = sml_get_proc_parameter_response_write(message_body->d.get_proc_parameter_response, buf);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	4618      	mov	r0, r3
 800c694:	f7fe f808 	bl	800a6a8 <sml_get_proc_parameter_response_write>
 800c698:	60f8      	str	r0, [r7, #12]
			break;
 800c69a:	e030      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_SET_PROC_PARAMETER_REQUEST:
			rv = sml_set_proc_parameter_request_write(message_body->d.set_proc_parameter_request, buf);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 ff4e 	bl	800d544 <sml_set_proc_parameter_request_write>
 800c6a8:	60f8      	str	r0, [r7, #12]
			break;
 800c6aa:	e028      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_GET_LIST_REQUEST:
			rv = sml_get_list_request_write(message_body->d.get_list_request, buf);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fd fc6a 	bl	8009f8c <sml_get_list_request_write>
 800c6b8:	60f8      	str	r0, [r7, #12]
			break;
 800c6ba:	e020      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_GET_LIST_RESPONSE:
			rv = sml_get_list_response_write(message_body->d.get_list_response, buf);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	6839      	ldr	r1, [r7, #0]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fd fda2 	bl	800a20c <sml_get_list_response_write>
 800c6c8:	60f8      	str	r0, [r7, #12]
			break;
 800c6ca:	e018      	b.n	800c6fe <sml_message_body_write+0x1f6>
		case SML_MESSAGE_ATTENTION_RESPONSE:
			rv = sml_attention_response_write(message_body->d.attention_response, buf);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fc ff8a 	bl	80095ec <sml_attention_response_write>
 800c6d8:	60f8      	str	r0, [r7, #12]
			break;
 800c6da:	e010      	b.n	800c6fe <sml_message_body_write+0x1f6>
		default:
			buf->error = SML_MESSAGE_TAG_MISMATCH;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	226b      	movs	r2, #107	; 0x6b
 800c6e0:	611a      	str	r2, [r3, #16]
			if (sml_debug_output(buf))
 800c6e2:	6838      	ldr	r0, [r7, #0]
 800c6e4:	f001 f9e6 	bl	800dab4 <sml_debug_output>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d006      	beq.n	800c6fc <sml_message_body_write+0x1f4>
            {
				trace("error: message type %04X not yet implemented\n", *(message_body->tag));
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	4804      	ldr	r0, [pc, #16]	; (800c708 <sml_message_body_write+0x200>)
 800c6f8:	f7ff fbe4 	bl	800bec4 <trace>
			}
			break;
 800c6fc:	bf00      	nop
	}

	return rv;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	08011d10 	.word	0x08011d10

0800c70c <sml_message_body_free>:

void sml_message_body_free(sml_message_body *message_body)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
	if (message_body)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 80ab 	beq.w	800c872 <sml_message_body_free+0x166>
    {
		if (message_body->tag)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 80a3 	beq.w	800c86c <sml_message_body_free+0x160>
        {
			switch (*(message_body->tag))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c730:	d05e      	beq.n	800c7f0 <sml_message_body_free+0xe4>
 800c732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c736:	d819      	bhi.n	800c76c <sml_message_body_free+0x60>
 800c738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c73c:	d040      	beq.n	800c7c0 <sml_message_body_free+0xb4>
 800c73e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c742:	d807      	bhi.n	800c754 <sml_message_body_free+0x48>
 800c744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c748:	d02e      	beq.n	800c7a8 <sml_message_body_free+0x9c>
 800c74a:	f240 1201 	movw	r2, #257	; 0x101
 800c74e:	4293      	cmp	r3, r2
 800c750:	d030      	beq.n	800c7b4 <sml_message_body_free+0xa8>
 800c752:	e07d      	b.n	800c850 <sml_message_body_free+0x144>
 800c754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c758:	d03e      	beq.n	800c7d8 <sml_message_body_free+0xcc>
 800c75a:	f240 3201 	movw	r2, #769	; 0x301
 800c75e:	4293      	cmp	r3, r2
 800c760:	d040      	beq.n	800c7e4 <sml_message_body_free+0xd8>
 800c762:	f240 2201 	movw	r2, #513	; 0x201
 800c766:	4293      	cmp	r3, r2
 800c768:	d030      	beq.n	800c7cc <sml_message_body_free+0xc0>
 800c76a:	e071      	b.n	800c850 <sml_message_body_free+0x144>
 800c76c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c770:	d056      	beq.n	800c820 <sml_message_body_free+0x114>
 800c772:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c776:	d80b      	bhi.n	800c790 <sml_message_body_free+0x84>
 800c778:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c77c:	d044      	beq.n	800c808 <sml_message_body_free+0xfc>
 800c77e:	f240 5201 	movw	r2, #1281	; 0x501
 800c782:	4293      	cmp	r3, r2
 800c784:	d046      	beq.n	800c814 <sml_message_body_free+0x108>
 800c786:	f240 4201 	movw	r2, #1025	; 0x401
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d036      	beq.n	800c7fc <sml_message_body_free+0xf0>
 800c78e:	e05f      	b.n	800c850 <sml_message_body_free+0x144>
 800c790:	f240 7201 	movw	r2, #1793	; 0x701
 800c794:	4293      	cmp	r3, r2
 800c796:	d04f      	beq.n	800c838 <sml_message_body_free+0x12c>
 800c798:	f64f 7201 	movw	r2, #65281	; 0xff01
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d051      	beq.n	800c844 <sml_message_body_free+0x138>
 800c7a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c7a4:	d042      	beq.n	800c82c <sml_message_body_free+0x120>
 800c7a6:	e053      	b.n	800c850 <sml_message_body_free+0x144>
            {
				case SML_MESSAGE_OPEN_REQUEST:
					sml_open_request_free(message_body->d.open_request);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 fcb0 	bl	800d112 <sml_open_request_free>
					break;
 800c7b2:	e056      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_OPEN_RESPONSE:
					sml_open_response_free(message_body->d.open_response);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f000 fdf4 	bl	800d3a6 <sml_open_response_free>
					break;
 800c7be:	e050      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_CLOSE_REQUEST:
					sml_close_request_free(message_body->d.close_request);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fd f8d0 	bl	800996a <sml_close_request_free>
					break;
 800c7ca:	e04a      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_CLOSE_RESPONSE:
					sml_close_response_free(message_body->d.close_response);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7fd f971 	bl	8009ab8 <sml_close_response_free>
					break;
 800c7d6:	e044      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_GET_PROFILE_PACK_REQUEST:
					sml_get_profile_pack_request_free(message_body->d.get_profile_pack_request);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fe fb68 	bl	800aeb2 <sml_get_profile_pack_request_free>
					break;
 800c7e2:	e03e      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_GET_PROFILE_PACK_RESPONSE:
					sml_get_profile_pack_response_free(message_body->d.get_profile_pack_response);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fe fd11 	bl	800b210 <sml_get_profile_pack_response_free>
					break;
 800c7ee:	e038      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_GET_PROFILE_LIST_REQUEST:
					sml_get_profile_list_request_free(message_body->d.get_profile_list_request);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fe fb5c 	bl	800aeb2 <sml_get_profile_pack_request_free>
					break;
 800c7fa:	e032      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_GET_PROFILE_LIST_RESPONSE:
					sml_get_profile_list_response_free(message_body->d.get_profile_list_response);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	4618      	mov	r0, r3
 800c802:	f7fe f925 	bl	800aa50 <sml_get_profile_list_response_free>
					break;
 800c806:	e02c      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_GET_PROC_PARAMETER_REQUEST:
					sml_get_proc_parameter_request_free(message_body->d.get_proc_parameter_request);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7fd fe9d 	bl	800a54c <sml_get_proc_parameter_request_free>
					break;
 800c812:	e026      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_GET_PROC_PARAMETER_RESPONSE:
					sml_get_proc_parameter_response_free(message_body->d.get_proc_parameter_response);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fd ff87 	bl	800a72c <sml_get_proc_parameter_response_free>
					break;
 800c81e:	e020      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_SET_PROC_PARAMETER_REQUEST:
					sml_set_proc_parameter_request_free(message_body->d.set_proc_parameter_request);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	f000 fee7 	bl	800d5f8 <sml_set_proc_parameter_request_free>
					break;
 800c82a:	e01a      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_GET_LIST_REQUEST:
					sml_get_list_request_free(message_body->d.get_list_request);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	f7fd fc05 	bl	800a040 <sml_get_list_request_free>
					break;
 800c836:	e014      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_GET_LIST_RESPONSE:
					sml_get_list_response_free(message_body->d.get_list_response);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fd fd57 	bl	800a2f0 <sml_get_list_response_free>
					break;
 800c842:	e00e      	b.n	800c862 <sml_message_body_free+0x156>
				case SML_MESSAGE_ATTENTION_RESPONSE:
					sml_attention_response_free(message_body->d.attention_response);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fc ff1d 	bl	8009688 <sml_attention_response_free>
					break;
 800c84e:	e008      	b.n	800c862 <sml_message_body_free+0x156>
				default:
					trace("NYI: %s for message type %04X\n", __FUNCTION__, *(message_body->tag));
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	4908      	ldr	r1, [pc, #32]	; (800c87c <sml_message_body_free+0x170>)
 800c85a:	4809      	ldr	r0, [pc, #36]	; (800c880 <sml_message_body_free+0x174>)
 800c85c:	f7ff fb32 	bl	800bec4 <trace>
					break;
 800c860:	bf00      	nop
			}
			sml_number_free(message_body->tag);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4618      	mov	r0, r3
 800c868:	f000 f995 	bl	800cb96 <sml_number_free>
		}
		free(message_body);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7fc fcb9 	bl	80091e4 <vPortFree>
	}
}
 800c872:	bf00      	nop
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	0801265c 	.word	0x0801265c
 800c880:	08011d40 	.word	0x08011d40

0800c884 <sml_number_init>:
#include <sml/sml_log.h>

// sml_number;

void *sml_number_init(u64 number, unsigned char type, int size)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b086      	sub	sp, #24
 800c888:	af00      	add	r7, sp, #0
 800c88a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800c88e:	603b      	str	r3, [r7, #0]
 800c890:	4613      	mov	r3, r2
 800c892:	71fb      	strb	r3, [r7, #7]
    unsigned char *np = NULL;
 800c894:	2300      	movs	r3, #0
 800c896:	613b      	str	r3, [r7, #16]
	unsigned char* bytes = (unsigned char*)&number;
 800c898:	f107 0308 	add.w	r3, r7, #8
 800c89c:	617b      	str	r3, [r7, #20]

	UNUSED(type);   // avoid warning: unused parameter

	// Swap bytes of big-endian number so that
	// memcpy copies the right part
	if (sml_number_endian() == SML_BIG_ENDIAN)
 800c89e:	f000 f9bf 	bl	800cc20 <sml_number_endian>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d105      	bne.n	800c8b4 <sml_number_init+0x30>
    {
		  bytes += sizeof(u64) - size;
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	f1c3 0308 	rsb	r3, r3, #8
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	617b      	str	r3, [r7, #20]
	}

	np = (unsigned char *)malloc(size);
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fc fbd2 	bl	8009060 <pvPortMalloc>
 800c8bc:	6138      	str	r0, [r7, #16]
	if (!np)
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d105      	bne.n	800c8d0 <sml_number_init+0x4c>
    {
		trace("ERROR: malloc %d bytes\n", size);
 800c8c4:	6839      	ldr	r1, [r7, #0]
 800c8c6:	480b      	ldr	r0, [pc, #44]	; (800c8f4 <sml_number_init+0x70>)
 800c8c8:	f7ff fafc 	bl	800bec4 <trace>
		return NULL;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	e00c      	b.n	800c8ea <sml_number_init+0x66>
	}

	memset(np, 0, size);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	6938      	ldr	r0, [r7, #16]
 800c8d8:	f003 fdb2 	bl	8010440 <memset>
	memcpy(np, bytes, size);
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	6979      	ldr	r1, [r7, #20]
 800c8e2:	6938      	ldr	r0, [r7, #16]
 800c8e4:	f003 fda1 	bl	801042a <memcpy>

	return np;
 800c8e8:	693b      	ldr	r3, [r7, #16]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3718      	adds	r7, #24
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	08011d60 	.word	0x08011d60

0800c8f8 <sml_number_parse>:

void *sml_number_parse(sml_buffer *buf, unsigned char type, int max_size)
{
 800c8f8:	b590      	push	{r4, r7, lr}
 800c8fa:	b08b      	sub	sp, #44	; 0x2c
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	460b      	mov	r3, r1
 800c902:	607a      	str	r2, [r7, #4]
 800c904:	72fb      	strb	r3, [r7, #11]
    int l, i;
	unsigned char b;
	short negative_int = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	847b      	strh	r3, [r7, #34]	; 0x22
    unsigned char *np = NULL;
 800c90a:	2300      	movs	r3, #0
 800c90c:	61fb      	str	r3, [r7, #28]
    int missing_bytes;
 
	if (!buf)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d101      	bne.n	800c918 <sml_number_parse+0x20>
	{
		return NULL;
 800c914:	2300      	movs	r3, #0
 800c916:	e088      	b.n	800ca2a <sml_number_parse+0x132>
	}

    if (sml_buf_optional_is_skipped(buf))
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f001 f8b6 	bl	800da8a <sml_buf_optional_is_skipped>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d001      	beq.n	800c928 <sml_number_parse+0x30>
    {
		return NULL;
 800c924:	2300      	movs	r3, #0
 800c926:	e080      	b.n	800ca2a <sml_number_parse+0x132>
	}

	if (sml_buf_get_next_type(buf) != type)
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f001 f84e 	bl	800d9ca <sml_buf_get_next_type>
 800c92e:	4603      	mov	r3, r0
 800c930:	461a      	mov	r2, r3
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	4293      	cmp	r3, r2
 800c936:	d004      	beq.n	800c942 <sml_number_parse+0x4a>
    {
		buf->error = SML_TYPE_NUMBER_MISMATCH;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	221e      	movs	r2, #30
 800c93c:	611a      	str	r2, [r3, #16]
		return NULL;
 800c93e:	2300      	movs	r3, #0
 800c940:	e073      	b.n	800ca2a <sml_number_parse+0x132>
	}

	l = sml_buf_get_next_length(buf);
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f000 ff30 	bl	800d7a8 <sml_buf_get_next_length>
 800c948:	61b8      	str	r0, [r7, #24]
	if (l < 0 || l > max_size)
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	db03      	blt.n	800c958 <sml_number_parse+0x60>
 800c950:	69ba      	ldr	r2, [r7, #24]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	429a      	cmp	r2, r3
 800c956:	dd04      	ble.n	800c962 <sml_number_parse+0x6a>
    {
		buf->error = SML_TYPE_NUMBER_LENGTH_OUT_OF_RANGE;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	221f      	movs	r2, #31
 800c95c:	611a      	str	r2, [r3, #16]
		return NULL;
 800c95e:	2300      	movs	r3, #0
 800c960:	e063      	b.n	800ca2a <sml_number_parse+0x132>
	}

	np = (unsigned char *)malloc(max_size);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4618      	mov	r0, r3
 800c966:	f7fc fb7b 	bl	8009060 <pvPortMalloc>
 800c96a:	61f8      	str	r0, [r7, #28]
	if (!np)
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d109      	bne.n	800c986 <sml_number_parse+0x8e>
    {
		trace("ERROR: malloc %d bytes\n", max_size);
 800c972:	6879      	ldr	r1, [r7, #4]
 800c974:	482f      	ldr	r0, [pc, #188]	; (800ca34 <sml_number_parse+0x13c>)
 800c976:	f7ff faa5 	bl	800bec4 <trace>
		buf->error = SML_MALLOC_ERROR;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c980:	611a      	str	r2, [r3, #16]
		return NULL;
 800c982:	2300      	movs	r3, #0
 800c984:	e051      	b.n	800ca2a <sml_number_parse+0x132>
	}

	memset(np, 0, max_size);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	461a      	mov	r2, r3
 800c98a:	2100      	movs	r1, #0
 800c98c:	69f8      	ldr	r0, [r7, #28]
 800c98e:	f003 fd57 	bl	8010440 <memset>

	b = sml_buf_get_current_byte(buf);
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f001 f82c 	bl	800d9f0 <sml_buf_get_current_byte>
 800c998:	4603      	mov	r3, r0
 800c99a:	75fb      	strb	r3, [r7, #23]
	if (type == SML_TYPE_INTEGER && (b & 128))
 800c99c:	7afb      	ldrb	r3, [r7, #11]
 800c99e:	2b50      	cmp	r3, #80	; 0x50
 800c9a0:	d105      	bne.n	800c9ae <sml_number_parse+0xb6>
 800c9a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	da01      	bge.n	800c9ae <sml_number_parse+0xb6>
    {
		negative_int = 1;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	missing_bytes = max_size - l;
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	613b      	str	r3, [r7, #16]
	memcpy(&(np[missing_bytes]), sml_buf_get_current_buf(buf), l);
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	69fa      	ldr	r2, [r7, #28]
 800c9ba:	18d4      	adds	r4, r2, r3
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f001 f827 	bl	800da10 <sml_buf_get_current_buf>
 800c9c2:	4601      	mov	r1, r0
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f003 fd2e 	bl	801042a <memcpy>

	if (negative_int)
 800c9ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00e      	beq.n	800c9f4 <sml_number_parse+0xfc>
    {
		for (i = 0; i < missing_bytes; i++)
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	627b      	str	r3, [r7, #36]	; 0x24
 800c9da:	e007      	b.n	800c9ec <sml_number_parse+0xf4>
        {
			np[i] = 0xFF;
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	69fa      	ldr	r2, [r7, #28]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	22ff      	movs	r2, #255	; 0xff
 800c9e4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < missing_bytes; i++)
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	dbf3      	blt.n	800c9dc <sml_number_parse+0xe4>
		}
	}

	if (!(sml_number_endian() == SML_BIG_ENDIAN))
 800c9f4:	f000 f914 	bl	800cc20 <sml_number_endian>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d003      	beq.n	800ca06 <sml_number_parse+0x10e>
    {
		sml_number_byte_swap(np, max_size);
 800c9fe:	6879      	ldr	r1, [r7, #4]
 800ca00:	69f8      	ldr	r0, [r7, #28]
 800ca02:	f000 f8d7 	bl	800cbb4 <sml_number_byte_swap>
	}
	sml_buf_update_bytes_read(buf, l);
 800ca06:	69b9      	ldr	r1, [r7, #24]
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f001 f810 	bl	800da2e <sml_buf_update_bytes_read>

	if (sml_debug_output(buf))
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f001 f850 	bl	800dab4 <sml_debug_output>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d006      	beq.n	800ca28 <sml_number_parse+0x130>
    {
		trace("\t\tNUMBER\t%i\t%i\r\n", l, *np);
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	69b9      	ldr	r1, [r7, #24]
 800ca22:	4805      	ldr	r0, [pc, #20]	; (800ca38 <sml_number_parse+0x140>)
 800ca24:	f7ff fa4e 	bl	800bec4 <trace>
	}

	return np;
 800ca28:	69fb      	ldr	r3, [r7, #28]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	372c      	adds	r7, #44	; 0x2c
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd90      	pop	{r4, r7, pc}
 800ca32:	bf00      	nop
 800ca34:	08011d60 	.word	0x08011d60
 800ca38:	08011d78 	.word	0x08011d78

0800ca3c <sml_number_write>:

int sml_number_write(void *np, unsigned char type, int size, sml_buffer *buf)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b08a      	sub	sp, #40	; 0x28
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	607a      	str	r2, [r7, #4]
 800ca46:	603b      	str	r3, [r7, #0]
 800ca48:	460b      	mov	r3, r1
 800ca4a:	72fb      	strb	r3, [r7, #11]
	int rv;

	if (!buf)
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d102      	bne.n	800ca58 <sml_number_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800ca52:	f240 33e6 	movw	r3, #998	; 0x3e6
 800ca56:	e09a      	b.n	800cb8e <sml_number_write+0x152>
	}

	if (np == 0)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d105      	bne.n	800ca6a <sml_number_write+0x2e>
    {
		rv = sml_buf_optional_write(buf);
 800ca5e:	6838      	ldr	r0, [r7, #0]
 800ca60:	f000 fff6 	bl	800da50 <sml_buf_optional_write>
 800ca64:	6178      	str	r0, [r7, #20]
		return rv;
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	e091      	b.n	800cb8e <sml_number_write+0x152>
	}

	if (	(size > 1) &&
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	dd5b      	ble.n	800cb28 <sml_number_write+0xec>
 800ca70:	7afb      	ldrb	r3, [r7, #11]
 800ca72:	2b60      	cmp	r3, #96	; 0x60
 800ca74:	d105      	bne.n	800ca82 <sml_number_write+0x46>
			(((type == SML_TYPE_UNSIGNED) && (buf->flags & SML_FLAGS_WRITE_NUMBER_UNSIGNED_DENSE)) ||
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	f003 0302 	and.w	r3, r3, #2
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d10e      	bne.n	800caa0 <sml_number_write+0x64>
 800ca82:	7afb      	ldrb	r3, [r7, #11]
 800ca84:	2b50      	cmp	r3, #80	; 0x50
 800ca86:	d14f      	bne.n	800cb28 <sml_number_write+0xec>
			((type == SML_TYPE_INTEGER) && ((buf->flags & SML_FLAGS_WRITE_NUMBER_SIGNED_DENSE) || (buf->flags & SML_FLAGS_WRITE_NUMBER_SIGNED_COMPACT)))))
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	f003 0308 	and.w	r3, r3, #8
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d105      	bne.n	800caa0 <sml_number_write+0x64>
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	f003 0304 	and.w	r3, r3, #4
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d043      	beq.n	800cb28 <sml_number_write+0xec>
    {
		int i, new_size = size;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	623b      	str	r3, [r7, #32]
		unsigned char *bytes = (unsigned char *)np;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < size - 1; i++)
 800caa8:	2300      	movs	r3, #0
 800caaa:	627b      	str	r3, [r7, #36]	; 0x24
 800caac:	e017      	b.n	800cade <sml_number_write+0xa2>
        {
			int pos = i;
 800caae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab0:	61fb      	str	r3, [r7, #28]
			if (!(sml_number_endian() == SML_BIG_ENDIAN))
 800cab2:	f000 f8b5 	bl	800cc20 <sml_number_endian>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d004      	beq.n	800cac6 <sml_number_write+0x8a>
            {
				pos = size - i - 1;
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	3b01      	subs	r3, #1
 800cac4:	61fb      	str	r3, [r7, #28]
			}
			if (bytes[pos] == 0)
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	69ba      	ldr	r2, [r7, #24]
 800caca:	4413      	add	r3, r2
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10b      	bne.n	800caea <sml_number_write+0xae>
            {
				new_size--;
 800cad2:	6a3b      	ldr	r3, [r7, #32]
 800cad4:	3b01      	subs	r3, #1
 800cad6:	623b      	str	r3, [r7, #32]
		for (i = 0; i < size - 1; i++)
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	3301      	adds	r3, #1
 800cadc:	627b      	str	r3, [r7, #36]	; 0x24
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	3b01      	subs	r3, #1
 800cae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cae4:	429a      	cmp	r2, r3
 800cae6:	dbe2      	blt.n	800caae <sml_number_write+0x72>
 800cae8:	e000      	b.n	800caec <sml_number_write+0xb0>
			}
			else
            {
				break;
 800caea:	bf00      	nop
			}
		}
		if (new_size != size)
 800caec:	6a3a      	ldr	r2, [r7, #32]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d019      	beq.n	800cb28 <sml_number_write+0xec>
        {
			if ((type == SML_TYPE_INTEGER) && (buf->flags & SML_FLAGS_WRITE_NUMBER_SIGNED_COMPACT))
 800caf4:	7afb      	ldrb	r3, [r7, #11]
 800caf6:	2b50      	cmp	r3, #80	; 0x50
 800caf8:	d108      	bne.n	800cb0c <sml_number_write+0xd0>
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	f003 0304 	and.w	r3, r3, #4
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d002      	beq.n	800cb0c <sml_number_write+0xd0>
            {
				new_size++;
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	623b      	str	r3, [r7, #32]
			}
			if (sml_number_endian() == SML_BIG_ENDIAN)
 800cb0c:	f000 f888 	bl	800cc20 <sml_number_endian>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d106      	bne.n	800cb24 <sml_number_write+0xe8>
            {
				np = bytes + (size - new_size);
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	6a3b      	ldr	r3, [r7, #32]
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	4413      	add	r3, r2
 800cb22:	60fb      	str	r3, [r7, #12]
			}
			size = new_size;
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	607b      	str	r3, [r7, #4]
		}
	}

	buf = sml_buffer_resize(buf, size + SML_BUFFER_ADDITIONAL_LENGTH);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3380      	adds	r3, #128	; 0x80
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	6838      	ldr	r0, [r7, #0]
 800cb30:	f000 fdce 	bl	800d6d0 <sml_buffer_resize>
 800cb34:	6038      	str	r0, [r7, #0]
	if (!buf)
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d102      	bne.n	800cb42 <sml_number_write+0x106>
	{
		return SML_MALLOC_ERROR;
 800cb3c:	f240 33e7 	movw	r3, #999	; 0x3e7
 800cb40:	e025      	b.n	800cb8e <sml_number_write+0x152>
	}

	rv = sml_buf_set_type_and_length(buf, type, size);
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	7afb      	ldrb	r3, [r7, #11]
 800cb46:	4619      	mov	r1, r3
 800cb48:	6838      	ldr	r0, [r7, #0]
 800cb4a:	f000 fe8f 	bl	800d86c <sml_buf_set_type_and_length>
 800cb4e:	6178      	str	r0, [r7, #20]
	if (rv != SML_OK) return rv;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <sml_number_write+0x11e>
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	e019      	b.n	800cb8e <sml_number_write+0x152>

	memcpy(sml_buf_get_current_buf(buf), np, size);
 800cb5a:	6838      	ldr	r0, [r7, #0]
 800cb5c:	f000 ff58 	bl	800da10 <sml_buf_get_current_buf>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	461a      	mov	r2, r3
 800cb64:	68f9      	ldr	r1, [r7, #12]
 800cb66:	f003 fc60 	bl	801042a <memcpy>

	if (!(sml_number_endian() == SML_BIG_ENDIAN))
 800cb6a:	f000 f859 	bl	800cc20 <sml_number_endian>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d007      	beq.n	800cb84 <sml_number_write+0x148>
    {
		sml_number_byte_swap(sml_buf_get_current_buf(buf), size);
 800cb74:	6838      	ldr	r0, [r7, #0]
 800cb76:	f000 ff4b 	bl	800da10 <sml_buf_get_current_buf>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f000 f818 	bl	800cbb4 <sml_number_byte_swap>
	}

	sml_buf_update_bytes_read(buf, size);
 800cb84:	6879      	ldr	r1, [r7, #4]
 800cb86:	6838      	ldr	r0, [r7, #0]
 800cb88:	f000 ff51 	bl	800da2e <sml_buf_update_bytes_read>

	return rv;
 800cb8c:	697b      	ldr	r3, [r7, #20]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3728      	adds	r7, #40	; 0x28
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <sml_number_free>:

void sml_number_free(void *np)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b082      	sub	sp, #8
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
	if (np)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d002      	beq.n	800cbaa <sml_number_free+0x14>
	{
		free(np);
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7fc fb1d 	bl	80091e4 <vPortFree>
	}
}
 800cbaa:	bf00      	nop
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <sml_number_byte_swap>:

void sml_number_byte_swap(unsigned char *bytes, int bytes_len)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
	int i;

	unsigned char *ob = (unsigned char *)malloc(bytes_len);
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fc fa4d 	bl	8009060 <pvPortMalloc>
 800cbc6:	60b8      	str	r0, [r7, #8]
	if (!ob)
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d104      	bne.n	800cbd8 <sml_number_byte_swap+0x24>
    {
		trace("ERROR: malloc %d bytes\n", bytes_len);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	4812      	ldr	r0, [pc, #72]	; (800cc1c <sml_number_byte_swap+0x68>)
 800cbd2:	f7ff f977 	bl	800bec4 <trace>
		return;
 800cbd6:	e01e      	b.n	800cc16 <sml_number_byte_swap+0x62>
	}

	memcpy(ob, bytes, bytes_len);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	6879      	ldr	r1, [r7, #4]
 800cbde:	68b8      	ldr	r0, [r7, #8]
 800cbe0:	f003 fc23 	bl	801042a <memcpy>
	
	for (i = 0; i < bytes_len; i++)
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	60fb      	str	r3, [r7, #12]
 800cbe8:	e00e      	b.n	800cc08 <sml_number_byte_swap+0x54>
    {
		bytes[i] = ob[bytes_len - (i + 1)];
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3301      	adds	r3, #1
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	441a      	add	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6879      	ldr	r1, [r7, #4]
 800cbfc:	440b      	add	r3, r1
 800cbfe:	7812      	ldrb	r2, [r2, #0]
 800cc00:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < bytes_len; i++)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3301      	adds	r3, #1
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	dbec      	blt.n	800cbea <sml_number_byte_swap+0x36>
	}

	free(ob);
 800cc10:	68b8      	ldr	r0, [r7, #8]
 800cc12:	f7fc fae7 	bl	80091e4 <vPortFree>
}
 800cc16:	3710      	adds	r7, #16
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	08011d60 	.word	0x08011d60

0800cc20 <sml_number_endian>:

int sml_number_endian(void)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
	int i = 1;
 800cc26:	2301      	movs	r3, #1
 800cc28:	603b      	str	r3, [r7, #0]
	char *p = (char *)&i;
 800cc2a:	463b      	mov	r3, r7
 800cc2c:	607b      	str	r3, [r7, #4]

	if (p[0] == 1)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d101      	bne.n	800cc3a <sml_number_endian+0x1a>
		return SML_LITTLE_ENDIAN;
 800cc36:	2300      	movs	r3, #0
 800cc38:	e000      	b.n	800cc3c <sml_number_endian+0x1c>
	else
		return SML_BIG_ENDIAN;
 800cc3a:	2301      	movs	r3, #1
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <sml_octet_string_init>:
uint8_t c2ptoi(char* c);

// octet_string;

octet_string *sml_octet_string_init(unsigned char *str, int length)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
	octet_string *s = (octet_string *)malloc(sizeof(octet_string));
 800cc52:	2008      	movs	r0, #8
 800cc54:	f7fc fa04 	bl	8009060 <pvPortMalloc>
 800cc58:	60f8      	str	r0, [r7, #12]
	if (!s)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d105      	bne.n	800cc6c <sml_octet_string_init+0x24>
    {
		trace("ERROR: malloc %ld bytes\n", sizeof(octet_string));
 800cc60:	2108      	movs	r1, #8
 800cc62:	481c      	ldr	r0, [pc, #112]	; (800ccd4 <sml_octet_string_init+0x8c>)
 800cc64:	f7ff f92e 	bl	800bec4 <trace>
		return NULL;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	e02e      	b.n	800ccca <sml_octet_string_init+0x82>
	}

	memset(s, 0, sizeof(octet_string));
 800cc6c:	2208      	movs	r2, #8
 800cc6e:	2100      	movs	r1, #0
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f003 fbe5 	bl	8010440 <memset>
	if (length > 0)
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	dd25      	ble.n	800ccc8 <sml_octet_string_init+0x80>
    {
		s->str = (unsigned char *)malloc(length + 1);
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fc f9ed 	bl	8009060 <pvPortMalloc>
 800cc86:	4602      	mov	r2, r0
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	601a      	str	r2, [r3, #0]
		if (!s->str)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d107      	bne.n	800cca4 <sml_octet_string_init+0x5c>
        {
			trace("ERROR: malloc %d bytes\n", length + 1);
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	3301      	adds	r3, #1
 800cc98:	4619      	mov	r1, r3
 800cc9a:	480f      	ldr	r0, [pc, #60]	; (800ccd8 <sml_octet_string_init+0x90>)
 800cc9c:	f7ff f912 	bl	800bec4 <trace>
			return NULL;
 800cca0:	2300      	movs	r3, #0
 800cca2:	e012      	b.n	800ccca <sml_octet_string_init+0x82>
		}
        memset(s->str, 0, length + 1);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6818      	ldr	r0, [r3, #0]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	461a      	mov	r2, r3
 800ccae:	2100      	movs	r1, #0
 800ccb0:	f003 fbc6 	bl	8010440 <memset>
		memcpy(s->str, str, length);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	683a      	ldr	r2, [r7, #0]
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f003 fbb4 	bl	801042a <memcpy>
		s->len = length;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	683a      	ldr	r2, [r7, #0]
 800ccc6:	605a      	str	r2, [r3, #4]
	}

	return s;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	08011d8c 	.word	0x08011d8c
 800ccd8:	08011da8 	.word	0x08011da8

0800ccdc <sml_octet_string_parse>:

octet_string *sml_octet_string_parse(sml_buffer *buf)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	int l;
	octet_string *str = NULL;
 800cce4:	2300      	movs	r3, #0
 800cce6:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <sml_octet_string_parse+0x16>
	{
		return NULL;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	e03a      	b.n	800cd68 <sml_octet_string_parse+0x8c>
	}

	if (sml_buf_optional_is_skipped(buf))
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fec9 	bl	800da8a <sml_buf_optional_is_skipped>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <sml_octet_string_parse+0x26>
	{
		return NULL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	e032      	b.n	800cd68 <sml_octet_string_parse+0x8c>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_OCTET_STRING)
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 fe61 	bl	800d9ca <sml_buf_get_next_type>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d004      	beq.n	800cd18 <sml_octet_string_parse+0x3c>
	{
		buf->error = SML_TYPE_OCTET_STRING_EXPECTED;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	220a      	movs	r2, #10
 800cd12:	611a      	str	r2, [r3, #16]
		return NULL;
 800cd14:	2300      	movs	r3, #0
 800cd16:	e027      	b.n	800cd68 <sml_octet_string_parse+0x8c>
	}

	l = sml_buf_get_next_length(buf);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fd45 	bl	800d7a8 <sml_buf_get_next_length>
 800cd1e:	60b8      	str	r0, [r7, #8]
	if (l < 0)
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	da04      	bge.n	800cd30 <sml_octet_string_parse+0x54>
	{
		buf->error = SML_TYPE_OCTET_STRING_LENGTH_OUT_OF_RANGE;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	220b      	movs	r2, #11
 800cd2a:	611a      	str	r2, [r3, #16]
		return NULL;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	e01b      	b.n	800cd68 <sml_octet_string_parse+0x8c>
	}

	str = sml_octet_string_init(sml_buf_get_current_buf(buf), l);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 fe6d 	bl	800da10 <sml_buf_get_current_buf>
 800cd36:	4603      	mov	r3, r0
 800cd38:	68b9      	ldr	r1, [r7, #8]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff ff84 	bl	800cc48 <sml_octet_string_init>
 800cd40:	60f8      	str	r0, [r7, #12]
	sml_buf_update_bytes_read(buf, l);
 800cd42:	68b9      	ldr	r1, [r7, #8]
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 fe72 	bl	800da2e <sml_buf_update_bytes_read>

	if (sml_debug_output(buf))
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 feb2 	bl	800dab4 <sml_debug_output>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d007      	beq.n	800cd66 <sml_octet_string_parse+0x8a>
	{
		trace("\t\tOCTET_STRING\t%i\t%s\r\n", str->len, str->str);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6859      	ldr	r1, [r3, #4]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	4803      	ldr	r0, [pc, #12]	; (800cd70 <sml_octet_string_parse+0x94>)
 800cd62:	f7ff f8af 	bl	800bec4 <trace>
	}

	return str;
 800cd66:	68fb      	ldr	r3, [r7, #12]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	08011dc0 	.word	0x08011dc0

0800cd74 <sml_octet_string_write>:

int sml_octet_string_write(octet_string *str, sml_buffer *buf)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
	int rv;

	if (!buf)
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <sml_octet_string_write+0x16>
	{
		return SML_PARAMETER_ERROR;
 800cd84:	f240 33e6 	movw	r3, #998	; 0x3e6
 800cd88:	e035      	b.n	800cdf6 <sml_octet_string_write+0x82>
	}

	if (str == 0)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d105      	bne.n	800cd9c <sml_octet_string_write+0x28>
	{
		rv = sml_buf_optional_write(buf);
 800cd90:	6838      	ldr	r0, [r7, #0]
 800cd92:	f000 fe5d 	bl	800da50 <sml_buf_optional_write>
 800cd96:	60f8      	str	r0, [r7, #12]
		return rv;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	e02c      	b.n	800cdf6 <sml_octet_string_write+0x82>
	}

	buf = sml_buffer_resize(buf, str->len + SML_BUFFER_ADDITIONAL_LENGTH);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	3380      	adds	r3, #128	; 0x80
 800cda2:	4619      	mov	r1, r3
 800cda4:	6838      	ldr	r0, [r7, #0]
 800cda6:	f000 fc93 	bl	800d6d0 <sml_buffer_resize>
 800cdaa:	6038      	str	r0, [r7, #0]
	if (!buf)
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d102      	bne.n	800cdb8 <sml_octet_string_write+0x44>
	{
		return SML_MALLOC_ERROR;
 800cdb2:	f240 33e7 	movw	r3, #999	; 0x3e7
 800cdb6:	e01e      	b.n	800cdf6 <sml_octet_string_write+0x82>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_OCTET_STRING, (unsigned int)str->len);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	6838      	ldr	r0, [r7, #0]
 800cdc2:	f000 fd53 	bl	800d86c <sml_buf_set_type_and_length>
 800cdc6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d001      	beq.n	800cdd2 <sml_octet_string_write+0x5e>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	e011      	b.n	800cdf6 <sml_octet_string_write+0x82>

	memcpy(sml_buf_get_current_buf(buf), str->str, str->len);
 800cdd2:	6838      	ldr	r0, [r7, #0]
 800cdd4:	f000 fe1c 	bl	800da10 <sml_buf_get_current_buf>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6819      	ldr	r1, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	461a      	mov	r2, r3
 800cde2:	f003 fb22 	bl	801042a <memcpy>
	buf->cursor += str->len;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	6852      	ldr	r2, [r2, #4]
 800cdee:	441a      	add	r2, r3
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	609a      	str	r2, [r3, #8]

	return rv;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <sml_octet_string_free>:

void sml_octet_string_free(octet_string *str)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b082      	sub	sp, #8
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
	if (str)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00b      	beq.n	800ce24 <sml_octet_string_free+0x26>
    {
		if (str->str)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d004      	beq.n	800ce1e <sml_octet_string_free+0x20>
        {
			free(str->str);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fc f9e3 	bl	80091e4 <vPortFree>
		}
		free(str);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7fc f9e0 	bl	80091e4 <vPortFree>
	}
}
 800ce24:	bf00      	nop
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <sml_octet_string_generate_uuid>:

	return o;
}

octet_string *sml_octet_string_generate_uuid(void)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
			uuid[i] = rand() % 0xFF;
		}
	#endif
#else
	int i;
	for(i = 0; i < 16; i++)
 800ce32:	2300      	movs	r3, #0
 800ce34:	617b      	str	r3, [r7, #20]
 800ce36:	e016      	b.n	800ce66 <sml_octet_string_generate_uuid+0x3a>
    {
		uuid[i] = rand() % 0xFF;
 800ce38:	f003 fe58 	bl	8010aec <rand>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	4b1a      	ldr	r3, [pc, #104]	; (800cea8 <sml_octet_string_generate_uuid+0x7c>)
 800ce40:	fb83 1302 	smull	r1, r3, r3, r2
 800ce44:	4413      	add	r3, r2
 800ce46:	11d9      	asrs	r1, r3, #7
 800ce48:	17d3      	asrs	r3, r2, #31
 800ce4a:	1ac9      	subs	r1, r1, r3
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	021b      	lsls	r3, r3, #8
 800ce50:	1a5b      	subs	r3, r3, r1
 800ce52:	1ad1      	subs	r1, r2, r3
 800ce54:	b2c9      	uxtb	r1, r1
 800ce56:	1d3a      	adds	r2, r7, #4
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	460a      	mov	r2, r1
 800ce5e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	3301      	adds	r3, #1
 800ce64:	617b      	str	r3, [r7, #20]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2b0f      	cmp	r3, #15
 800ce6a:	dde5      	ble.n	800ce38 <sml_octet_string_generate_uuid+0xc>
	}
#endif /* __linux__ */
	uuid[6] = (uuid[6] & 0x0F) | 0x40; // set version
 800ce6c:	7abb      	ldrb	r3, [r7, #10]
 800ce6e:	b25b      	sxtb	r3, r3
 800ce70:	f003 030f 	and.w	r3, r3, #15
 800ce74:	b25b      	sxtb	r3, r3
 800ce76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce7a:	b25b      	sxtb	r3, r3
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	72bb      	strb	r3, [r7, #10]
	uuid[8] = (uuid[8] & 0x3F) | 0x80; // set reserved bits
 800ce80:	7b3b      	ldrb	r3, [r7, #12]
 800ce82:	b25b      	sxtb	r3, r3
 800ce84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce88:	b25b      	sxtb	r3, r3
 800ce8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce8e:	b25b      	sxtb	r3, r3
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	733b      	strb	r3, [r7, #12]
#endif /* _NO_UUID_LIB */
	return sml_octet_string_init(uuid, 16);
 800ce94:	1d3b      	adds	r3, r7, #4
 800ce96:	2110      	movs	r1, #16
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff fed5 	bl	800cc48 <sml_octet_string_init>
 800ce9e:	4603      	mov	r3, r0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	80808081 	.word	0x80808081

0800ceac <sml_open_request_init>:
#include <sml/sml_log.h>

// sml_open_request;

sml_open_request *sml_open_request_init(void)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
	sml_open_request *msg = (sml_open_request *)malloc(sizeof(sml_open_request));
 800ceb2:	201c      	movs	r0, #28
 800ceb4:	f7fc f8d4 	bl	8009060 <pvPortMalloc>
 800ceb8:	6078      	str	r0, [r7, #4]
	if (!msg)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d105      	bne.n	800cecc <sml_open_request_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_open_request));
 800cec0:	211c      	movs	r1, #28
 800cec2:	4807      	ldr	r0, [pc, #28]	; (800cee0 <sml_open_request_init+0x34>)
 800cec4:	f7fe fffe 	bl	800bec4 <trace>
		return NULL;
 800cec8:	2300      	movs	r3, #0
 800ceca:	e005      	b.n	800ced8 <sml_open_request_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_open_request));
 800cecc:	221c      	movs	r2, #28
 800cece:	2100      	movs	r1, #0
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f003 fab5 	bl	8010440 <memset>
	
	return msg;
 800ced6:	687b      	ldr	r3, [r7, #4]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	08011dd8 	.word	0x08011dd8

0800cee4 <sml_open_request_parse>:

sml_open_request *sml_open_request_parse(sml_buffer *buf)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
	sml_open_request *msg = NULL;
 800ceec:	2300      	movs	r3, #0
 800ceee:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d101      	bne.n	800cefa <sml_open_request_parse+0x16>
	{
		return NULL;
 800cef6:	2300      	movs	r3, #0
 800cef8:	e091      	b.n	800d01e <sml_open_request_parse+0x13a>
	}

	msg = sml_open_request_init();
 800cefa:	f7ff ffd7 	bl	800ceac <sml_open_request_init>
 800cefe:	60f8      	str	r0, [r7, #12]
	if (!msg)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d105      	bne.n	800cf12 <sml_open_request_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cf0c:	611a      	str	r2, [r3, #16]
		return NULL;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	e085      	b.n	800d01e <sml_open_request_parse+0x13a>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fd59 	bl	800d9ca <sml_buf_get_next_type>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b70      	cmp	r3, #112	; 0x70
 800cf1c:	d003      	beq.n	800cf26 <sml_open_request_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2232      	movs	r2, #50	; 0x32
 800cf22:	611a      	str	r2, [r3, #16]
		goto error;
 800cf24:	e077      	b.n	800d016 <sml_open_request_parse+0x132>
	}

	if (sml_buf_get_next_length(buf) != 7)
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 fc3e 	bl	800d7a8 <sml_buf_get_next_length>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b07      	cmp	r3, #7
 800cf30:	d003      	beq.n	800cf3a <sml_open_request_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2220      	movs	r2, #32
 800cf36:	611a      	str	r2, [r3, #16]
		goto error;
 800cf38:	e06d      	b.n	800d016 <sml_open_request_parse+0x132>
	}

	if (sml_debug_output(buf))
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fdba 	bl	800dab4 <sml_debug_output>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d002      	beq.n	800cf4c <sml_open_request_parse+0x68>
    {
		trace("\t\tOPEN REQUEST\r\n");
 800cf46:	4838      	ldr	r0, [pc, #224]	; (800d028 <sml_open_request_parse+0x144>)
 800cf48:	f7fe ffbc 	bl	800bec4 <trace>
	}

	msg->codepage = sml_octet_string_parse(buf);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7ff fec5 	bl	800ccdc <sml_octet_string_parse>
 800cf52:	4602      	mov	r2, r0
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 fd25 	bl	800d9a8 <sml_buf_has_errors>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d14b      	bne.n	800cffc <sml_open_request_parse+0x118>

	msg->client_id = sml_octet_string_parse(buf);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff feb9 	bl	800ccdc <sml_octet_string_parse>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fd19 	bl	800d9a8 <sml_buf_has_errors>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d141      	bne.n	800d000 <sml_open_request_parse+0x11c>

	msg->req_file_id = sml_octet_string_parse(buf);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff fead 	bl	800ccdc <sml_octet_string_parse>
 800cf82:	4602      	mov	r2, r0
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fd0d 	bl	800d9a8 <sml_buf_has_errors>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d137      	bne.n	800d004 <sml_open_request_parse+0x120>

	msg->server_id = sml_octet_string_parse(buf);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7ff fea1 	bl	800ccdc <sml_octet_string_parse>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fd01 	bl	800d9a8 <sml_buf_has_errors>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d12d      	bne.n	800d008 <sml_open_request_parse+0x124>

	msg->username = sml_octet_string_parse(buf);
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f7ff fe95 	bl	800ccdc <sml_octet_string_parse>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fcf5 	bl	800d9a8 <sml_buf_has_errors>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d123      	bne.n	800d00c <sml_open_request_parse+0x128>

	msg->password = sml_octet_string_parse(buf);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7ff fe89 	bl	800ccdc <sml_octet_string_parse>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	615a      	str	r2, [r3, #20]
	if (sml_buf_has_errors(buf)) goto error;
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fce9 	bl	800d9a8 <sml_buf_has_errors>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d119      	bne.n	800d010 <sml_open_request_parse+0x12c>

	msg->sml_version = sml_u8_parse(buf);
 800cfdc:	2201      	movs	r2, #1
 800cfde:	2160      	movs	r1, #96	; 0x60
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff fc89 	bl	800c8f8 <sml_number_parse>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	619a      	str	r2, [r3, #24]
	if (sml_buf_has_errors(buf)) goto error;
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fcdb 	bl	800d9a8 <sml_buf_has_errors>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10d      	bne.n	800d014 <sml_open_request_parse+0x130>

	return msg;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	e010      	b.n	800d01e <sml_open_request_parse+0x13a>
	if (sml_buf_has_errors(buf)) goto error;
 800cffc:	bf00      	nop
 800cffe:	e00a      	b.n	800d016 <sml_open_request_parse+0x132>
	if (sml_buf_has_errors(buf)) goto error;
 800d000:	bf00      	nop
 800d002:	e008      	b.n	800d016 <sml_open_request_parse+0x132>
	if (sml_buf_has_errors(buf)) goto error;
 800d004:	bf00      	nop
 800d006:	e006      	b.n	800d016 <sml_open_request_parse+0x132>
	if (sml_buf_has_errors(buf)) goto error;
 800d008:	bf00      	nop
 800d00a:	e004      	b.n	800d016 <sml_open_request_parse+0x132>
	if (sml_buf_has_errors(buf)) goto error;
 800d00c:	bf00      	nop
 800d00e:	e002      	b.n	800d016 <sml_open_request_parse+0x132>
	if (sml_buf_has_errors(buf)) goto error;
 800d010:	bf00      	nop
 800d012:	e000      	b.n	800d016 <sml_open_request_parse+0x132>
	if (sml_buf_has_errors(buf)) goto error;
 800d014:	bf00      	nop

error:
	sml_open_request_free(msg);
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f000 f87b 	bl	800d112 <sml_open_request_free>
	return NULL;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	08011df4 	.word	0x08011df4

0800d02c <sml_open_request_write>:

int sml_open_request_write(sml_open_request *msg, sml_buffer *buf)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <sml_open_request_write+0x16>
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d102      	bne.n	800d048 <sml_open_request_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800d042:	f240 33e6 	movw	r3, #998	; 0x3e6
 800d046:	e060      	b.n	800d10a <sml_open_request_write+0xde>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 7);
 800d048:	2207      	movs	r2, #7
 800d04a:	2170      	movs	r1, #112	; 0x70
 800d04c:	6838      	ldr	r0, [r7, #0]
 800d04e:	f000 fc0d 	bl	800d86c <sml_buf_set_type_and_length>
 800d052:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <sml_open_request_write+0x32>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	e055      	b.n	800d10a <sml_open_request_write+0xde>

	rv = sml_octet_string_write(msg->codepage, buf);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	4618      	mov	r0, r3
 800d066:	f7ff fe85 	bl	800cd74 <sml_octet_string_write>
 800d06a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <sml_open_request_write+0x4a>
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	e049      	b.n	800d10a <sml_open_request_write+0xde>

	rv = sml_octet_string_write(msg->client_id, buf);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	6839      	ldr	r1, [r7, #0]
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7ff fe79 	bl	800cd74 <sml_octet_string_write>
 800d082:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d001      	beq.n	800d08e <sml_open_request_write+0x62>
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	e03d      	b.n	800d10a <sml_open_request_write+0xde>

	rv = sml_octet_string_write(msg->req_file_id, buf);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	6839      	ldr	r1, [r7, #0]
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff fe6d 	bl	800cd74 <sml_octet_string_write>
 800d09a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <sml_open_request_write+0x7a>
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	e031      	b.n	800d10a <sml_open_request_write+0xde>

	rv = sml_octet_string_write(msg->server_id, buf);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	6839      	ldr	r1, [r7, #0]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7ff fe61 	bl	800cd74 <sml_octet_string_write>
 800d0b2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d001      	beq.n	800d0be <sml_open_request_write+0x92>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	e025      	b.n	800d10a <sml_open_request_write+0xde>

	rv = sml_octet_string_write(msg->username,buf);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7ff fe55 	bl	800cd74 <sml_octet_string_write>
 800d0ca:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d001      	beq.n	800d0d6 <sml_open_request_write+0xaa>
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	e019      	b.n	800d10a <sml_open_request_write+0xde>

	rv = sml_octet_string_write(msg->password,buf);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	695b      	ldr	r3, [r3, #20]
 800d0da:	6839      	ldr	r1, [r7, #0]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7ff fe49 	bl	800cd74 <sml_octet_string_write>
 800d0e2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <sml_open_request_write+0xc2>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	e00d      	b.n	800d10a <sml_open_request_write+0xde>

	rv = sml_u8_write(msg->sml_version, buf);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6998      	ldr	r0, [r3, #24]
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	2160      	movs	r1, #96	; 0x60
 800d0f8:	f7ff fca0 	bl	800ca3c <sml_number_write>
 800d0fc:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d001      	beq.n	800d108 <sml_open_request_write+0xdc>
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	e000      	b.n	800d10a <sml_open_request_write+0xde>

	return rv;
 800d108:	68fb      	ldr	r3, [r7, #12]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <sml_open_request_free>:

void sml_open_request_free(sml_open_request *msg)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b082      	sub	sp, #8
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
	if (msg)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d025      	beq.n	800d16c <sml_open_request_free+0x5a>
    {
		sml_octet_string_free(msg->codepage);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4618      	mov	r0, r3
 800d126:	f7ff fe6a 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->client_id);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	4618      	mov	r0, r3
 800d130:	f7ff fe65 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->req_file_id);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	4618      	mov	r0, r3
 800d13a:	f7ff fe60 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->server_id);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	4618      	mov	r0, r3
 800d144:	f7ff fe5b 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->username);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7ff fe56 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->password);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	695b      	ldr	r3, [r3, #20]
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff fe51 	bl	800cdfe <sml_octet_string_free>
		sml_number_free(msg->sml_version);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff fd18 	bl	800cb96 <sml_number_free>
		
		free(msg);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7fc f83c 	bl	80091e4 <vPortFree>
	}
}
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <sml_open_response_init>:
#include <sml/sml_log.h>

// sml_open_response;

sml_open_response *sml_open_response_init(void)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
	sml_open_response *msg = (sml_open_response *)malloc(sizeof(sml_open_response));
 800d17a:	2018      	movs	r0, #24
 800d17c:	f7fb ff70 	bl	8009060 <pvPortMalloc>
 800d180:	6078      	str	r0, [r7, #4]
	if (!msg)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d105      	bne.n	800d194 <sml_open_response_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_open_response));
 800d188:	2118      	movs	r1, #24
 800d18a:	4807      	ldr	r0, [pc, #28]	; (800d1a8 <sml_open_response_init+0x34>)
 800d18c:	f7fe fe9a 	bl	800bec4 <trace>
		return NULL;
 800d190:	2300      	movs	r3, #0
 800d192:	e005      	b.n	800d1a0 <sml_open_response_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_open_response));
 800d194:	2218      	movs	r2, #24
 800d196:	2100      	movs	r1, #0
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f003 f951 	bl	8010440 <memset>
	
	return msg;
 800d19e:	687b      	ldr	r3, [r7, #4]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	08011e08 	.word	0x08011e08

0800d1ac <sml_open_response_parse>:

sml_open_response *sml_open_response_parse(sml_buffer *buf)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
	sml_open_response *msg = NULL;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d101      	bne.n	800d1c2 <sml_open_response_parse+0x16>
	{
		return NULL;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	e083      	b.n	800d2ca <sml_open_response_parse+0x11e>
	}

	msg = sml_open_response_init();
 800d1c2:	f7ff ffd7 	bl	800d174 <sml_open_response_init>
 800d1c6:	60f8      	str	r0, [r7, #12]
	if (!msg)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d105      	bne.n	800d1da <sml_open_response_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d1d4:	611a      	str	r2, [r3, #16]
		return NULL;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	e077      	b.n	800d2ca <sml_open_response_parse+0x11e>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fbf5 	bl	800d9ca <sml_buf_get_next_type>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b70      	cmp	r3, #112	; 0x70
 800d1e4:	d003      	beq.n	800d1ee <sml_open_response_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2232      	movs	r2, #50	; 0x32
 800d1ea:	611a      	str	r2, [r3, #16]
		goto error;
 800d1ec:	e069      	b.n	800d2c2 <sml_open_response_parse+0x116>
	}

	if (sml_buf_get_next_length(buf) != 6)
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 fada 	bl	800d7a8 <sml_buf_get_next_length>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b06      	cmp	r3, #6
 800d1f8:	d003      	beq.n	800d202 <sml_open_response_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2220      	movs	r2, #32
 800d1fe:	611a      	str	r2, [r3, #16]
		goto error;
 800d200:	e05f      	b.n	800d2c2 <sml_open_response_parse+0x116>
	}

	if (sml_debug_output(buf))
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 fc56 	bl	800dab4 <sml_debug_output>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d002      	beq.n	800d214 <sml_open_response_parse+0x68>
    {
		trace("\t\tOPEN RESPONSE\r\n");
 800d20e:	4831      	ldr	r0, [pc, #196]	; (800d2d4 <sml_open_response_parse+0x128>)
 800d210:	f7fe fe58 	bl	800bec4 <trace>
	}

	msg->codepage = sml_octet_string_parse(buf);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7ff fd61 	bl	800ccdc <sml_octet_string_parse>
 800d21a:	4602      	mov	r2, r0
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fbc1 	bl	800d9a8 <sml_buf_has_errors>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d13f      	bne.n	800d2ac <sml_open_response_parse+0x100>

	msg->client_id = sml_octet_string_parse(buf);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7ff fd55 	bl	800ccdc <sml_octet_string_parse>
 800d232:	4602      	mov	r2, r0
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fbb5 	bl	800d9a8 <sml_buf_has_errors>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d135      	bne.n	800d2b0 <sml_open_response_parse+0x104>

	msg->req_file_id = sml_octet_string_parse(buf);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff fd49 	bl	800ccdc <sml_octet_string_parse>
 800d24a:	4602      	mov	r2, r0
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fba9 	bl	800d9a8 <sml_buf_has_errors>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d12b      	bne.n	800d2b4 <sml_open_response_parse+0x108>

	msg->server_id = sml_octet_string_parse(buf);
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f7ff fd3d 	bl	800ccdc <sml_octet_string_parse>
 800d262:	4602      	mov	r2, r0
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fb9d 	bl	800d9a8 <sml_buf_has_errors>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d121      	bne.n	800d2b8 <sml_open_response_parse+0x10c>

	msg->ref_time = sml_time_parse(buf);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fe0d 	bl	800de94 <sml_time_parse>
 800d27a:	4602      	mov	r2, r0
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fb91 	bl	800d9a8 <sml_buf_has_errors>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d117      	bne.n	800d2bc <sml_open_response_parse+0x110>

	msg->sml_version = sml_u8_parse(buf);
 800d28c:	2201      	movs	r2, #1
 800d28e:	2160      	movs	r1, #96	; 0x60
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f7ff fb31 	bl	800c8f8 <sml_number_parse>
 800d296:	4602      	mov	r2, r0
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	615a      	str	r2, [r3, #20]
	if (sml_buf_has_errors(buf)) goto error;
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 fb83 	bl	800d9a8 <sml_buf_has_errors>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10b      	bne.n	800d2c0 <sml_open_response_parse+0x114>

	return msg;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	e00e      	b.n	800d2ca <sml_open_response_parse+0x11e>
	if (sml_buf_has_errors(buf)) goto error;
 800d2ac:	bf00      	nop
 800d2ae:	e008      	b.n	800d2c2 <sml_open_response_parse+0x116>
	if (sml_buf_has_errors(buf)) goto error;
 800d2b0:	bf00      	nop
 800d2b2:	e006      	b.n	800d2c2 <sml_open_response_parse+0x116>
	if (sml_buf_has_errors(buf)) goto error;
 800d2b4:	bf00      	nop
 800d2b6:	e004      	b.n	800d2c2 <sml_open_response_parse+0x116>
	if (sml_buf_has_errors(buf)) goto error;
 800d2b8:	bf00      	nop
 800d2ba:	e002      	b.n	800d2c2 <sml_open_response_parse+0x116>
	if (sml_buf_has_errors(buf)) goto error;
 800d2bc:	bf00      	nop
 800d2be:	e000      	b.n	800d2c2 <sml_open_response_parse+0x116>
	if (sml_buf_has_errors(buf)) goto error;
 800d2c0:	bf00      	nop
error:
	sml_open_response_free(msg);
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f000 f86f 	bl	800d3a6 <sml_open_response_free>
	return NULL;
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	08011e24 	.word	0x08011e24

0800d2d8 <sml_open_response_write>:

int sml_open_response_write(sml_open_response *msg, sml_buffer *buf)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <sml_open_response_write+0x16>
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d102      	bne.n	800d2f4 <sml_open_response_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800d2ee:	f240 33e6 	movw	r3, #998	; 0x3e6
 800d2f2:	e054      	b.n	800d39e <sml_open_response_write+0xc6>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 6);
 800d2f4:	2206      	movs	r2, #6
 800d2f6:	2170      	movs	r1, #112	; 0x70
 800d2f8:	6838      	ldr	r0, [r7, #0]
 800d2fa:	f000 fab7 	bl	800d86c <sml_buf_set_type_and_length>
 800d2fe:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d001      	beq.n	800d30a <sml_open_response_write+0x32>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	e049      	b.n	800d39e <sml_open_response_write+0xc6>

	rv = sml_octet_string_write(msg->codepage, buf);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	4618      	mov	r0, r3
 800d312:	f7ff fd2f 	bl	800cd74 <sml_octet_string_write>
 800d316:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d001      	beq.n	800d322 <sml_open_response_write+0x4a>
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	e03d      	b.n	800d39e <sml_open_response_write+0xc6>

	rv = sml_octet_string_write(msg->client_id, buf);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	6839      	ldr	r1, [r7, #0]
 800d328:	4618      	mov	r0, r3
 800d32a:	f7ff fd23 	bl	800cd74 <sml_octet_string_write>
 800d32e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <sml_open_response_write+0x62>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	e031      	b.n	800d39e <sml_open_response_write+0xc6>

	rv = sml_octet_string_write(msg->req_file_id, buf);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	4618      	mov	r0, r3
 800d342:	f7ff fd17 	bl	800cd74 <sml_octet_string_write>
 800d346:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d001      	beq.n	800d352 <sml_open_response_write+0x7a>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	e025      	b.n	800d39e <sml_open_response_write+0xc6>

	rv = sml_octet_string_write(msg->server_id, buf);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	6839      	ldr	r1, [r7, #0]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7ff fd0b 	bl	800cd74 <sml_octet_string_write>
 800d35e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <sml_open_response_write+0x92>
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	e019      	b.n	800d39e <sml_open_response_write+0xc6>

	rv = sml_time_write(msg->ref_time, buf);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	6839      	ldr	r1, [r7, #0]
 800d370:	4618      	mov	r0, r3
 800d372:	f000 fe25 	bl	800dfc0 <sml_time_write>
 800d376:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d001      	beq.n	800d382 <sml_open_response_write+0xaa>
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	e00d      	b.n	800d39e <sml_open_response_write+0xc6>

	rv = sml_u8_write(msg->sml_version, buf);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6958      	ldr	r0, [r3, #20]
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2201      	movs	r2, #1
 800d38a:	2160      	movs	r1, #96	; 0x60
 800d38c:	f7ff fb56 	bl	800ca3c <sml_number_write>
 800d390:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d001      	beq.n	800d39c <sml_open_response_write+0xc4>
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	e000      	b.n	800d39e <sml_open_response_write+0xc6>

	return rv;
 800d39c:	68fb      	ldr	r3, [r7, #12]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <sml_open_response_free>:

void sml_open_response_free(sml_open_response *msg)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b082      	sub	sp, #8
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
	if (msg)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d020      	beq.n	800d3f6 <sml_open_response_free+0x50>
    {
		sml_octet_string_free(msg->codepage);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff fd20 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->client_id);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7ff fd1b 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->req_file_id);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff fd16 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->server_id);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7ff fd11 	bl	800cdfe <sml_octet_string_free>
		sml_time_free(msg->ref_time);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	691b      	ldr	r3, [r3, #16]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f000 fe39 	bl	800e058 <sml_time_free>
		sml_number_free(msg->sml_version);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7ff fbd3 	bl	800cb96 <sml_number_free>

		free(msg);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7fb fef7 	bl	80091e4 <vPortFree>
	}
}
 800d3f6:	bf00      	nop
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
	...

0800d400 <sml_set_proc_parameter_request_init>:
#include <sml/sml_log.h>

// sml_set_proc_parameter_request;

sml_set_proc_parameter_request *sml_set_proc_parameter_request_init(void)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
	sml_set_proc_parameter_request *msg = (sml_set_proc_parameter_request *)malloc(sizeof (sml_set_proc_parameter_request));
 800d406:	2014      	movs	r0, #20
 800d408:	f7fb fe2a 	bl	8009060 <pvPortMalloc>
 800d40c:	6078      	str	r0, [r7, #4]
	if (!msg)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d105      	bne.n	800d420 <sml_set_proc_parameter_request_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_set_proc_parameter_request));
 800d414:	2114      	movs	r1, #20
 800d416:	4807      	ldr	r0, [pc, #28]	; (800d434 <sml_set_proc_parameter_request_init+0x34>)
 800d418:	f7fe fd54 	bl	800bec4 <trace>
		return NULL;
 800d41c:	2300      	movs	r3, #0
 800d41e:	e005      	b.n	800d42c <sml_set_proc_parameter_request_init+0x2c>
	}
	memset(msg, 0, sizeof(sml_set_proc_parameter_request));
 800d420:	2214      	movs	r2, #20
 800d422:	2100      	movs	r1, #0
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f003 f80b 	bl	8010440 <memset>
	
	return msg;
 800d42a:	687b      	ldr	r3, [r7, #4]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	08011e38 	.word	0x08011e38

0800d438 <sml_set_proc_parameter_request_parse>:

sml_set_proc_parameter_request *sml_set_proc_parameter_request_parse(sml_buffer *buf)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
	sml_set_proc_parameter_request *msg = NULL;
 800d440:	2300      	movs	r3, #0
 800d442:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d101      	bne.n	800d44e <sml_set_proc_parameter_request_parse+0x16>
	{
		return NULL;
 800d44a:	2300      	movs	r3, #0
 800d44c:	e073      	b.n	800d536 <sml_set_proc_parameter_request_parse+0xfe>
	}

	msg = sml_set_proc_parameter_request_init();
 800d44e:	f7ff ffd7 	bl	800d400 <sml_set_proc_parameter_request_init>
 800d452:	60f8      	str	r0, [r7, #12]
	if (!msg)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d105      	bne.n	800d466 <sml_set_proc_parameter_request_parse+0x2e>
    {
		buf->error = SML_MALLOC_ERROR;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d460:	611a      	str	r2, [r3, #16]
		return NULL;
 800d462:	2300      	movs	r3, #0
 800d464:	e067      	b.n	800d536 <sml_set_proc_parameter_request_parse+0xfe>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 faaf 	bl	800d9ca <sml_buf_get_next_type>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b70      	cmp	r3, #112	; 0x70
 800d470:	d003      	beq.n	800d47a <sml_set_proc_parameter_request_parse+0x42>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2232      	movs	r2, #50	; 0x32
 800d476:	611a      	str	r2, [r3, #16]
		goto error;
 800d478:	e059      	b.n	800d52e <sml_set_proc_parameter_request_parse+0xf6>
	}

	if (sml_buf_get_next_length(buf) != 5)
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 f994 	bl	800d7a8 <sml_buf_get_next_length>
 800d480:	4603      	mov	r3, r0
 800d482:	2b05      	cmp	r3, #5
 800d484:	d003      	beq.n	800d48e <sml_set_proc_parameter_request_parse+0x56>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2220      	movs	r2, #32
 800d48a:	611a      	str	r2, [r3, #16]
		goto error;
 800d48c:	e04f      	b.n	800d52e <sml_set_proc_parameter_request_parse+0xf6>
	}

	if (sml_debug_output(buf))
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 fb10 	bl	800dab4 <sml_debug_output>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d002      	beq.n	800d4a0 <sml_set_proc_parameter_request_parse+0x68>
    {
		trace("\t\tSET PROC PARAMETER RESPONSE\r\n");
 800d49a:	4829      	ldr	r0, [pc, #164]	; (800d540 <sml_set_proc_parameter_request_parse+0x108>)
 800d49c:	f7fe fd12 	bl	800bec4 <trace>
	}

	msg->server_id = sml_octet_string_parse(buf);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f7ff fc1b 	bl	800ccdc <sml_octet_string_parse>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fa7b 	bl	800d9a8 <sml_buf_has_errors>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d131      	bne.n	800d51c <sml_set_proc_parameter_request_parse+0xe4>

	msg->username = sml_octet_string_parse(buf);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f7ff fc0f 	bl	800ccdc <sml_octet_string_parse>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 fa6f 	bl	800d9a8 <sml_buf_has_errors>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d127      	bne.n	800d520 <sml_set_proc_parameter_request_parse+0xe8>

	msg->password = sml_octet_string_parse(buf);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7ff fc03 	bl	800ccdc <sml_octet_string_parse>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 fa63 	bl	800d9a8 <sml_buf_has_errors>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d11d      	bne.n	800d524 <sml_set_proc_parameter_request_parse+0xec>

	msg->parameter_tree_path = sml_tree_path_parse(buf);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f001 f819 	bl	800e520 <sml_tree_path_parse>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 fa57 	bl	800d9a8 <sml_buf_has_errors>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d113      	bne.n	800d528 <sml_set_proc_parameter_request_parse+0xf0>

	msg->parameter_tree = sml_tree_parse(buf);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f001 f943 	bl	800e78c <sml_tree_parse>
 800d506:	4602      	mov	r2, r0
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fa4b 	bl	800d9a8 <sml_buf_has_errors>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d109      	bne.n	800d52c <sml_set_proc_parameter_request_parse+0xf4>

	return msg;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	e00c      	b.n	800d536 <sml_set_proc_parameter_request_parse+0xfe>
	if (sml_buf_has_errors(buf)) goto error;
 800d51c:	bf00      	nop
 800d51e:	e006      	b.n	800d52e <sml_set_proc_parameter_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 800d520:	bf00      	nop
 800d522:	e004      	b.n	800d52e <sml_set_proc_parameter_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 800d524:	bf00      	nop
 800d526:	e002      	b.n	800d52e <sml_set_proc_parameter_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 800d528:	bf00      	nop
 800d52a:	e000      	b.n	800d52e <sml_set_proc_parameter_request_parse+0xf6>
	if (sml_buf_has_errors(buf)) goto error;
 800d52c:	bf00      	nop

error:
	sml_set_proc_parameter_request_free(msg);
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f000 f862 	bl	800d5f8 <sml_set_proc_parameter_request_free>
	return NULL;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	08011e54 	.word	0x08011e54

0800d544 <sml_set_proc_parameter_request_write>:

int sml_set_proc_parameter_request_write(sml_set_proc_parameter_request *msg, sml_buffer *buf)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
	int rv;

	if (!msg || !buf)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <sml_set_proc_parameter_request_write+0x16>
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d102      	bne.n	800d560 <sml_set_proc_parameter_request_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800d55a:	f240 33e6 	movw	r3, #998	; 0x3e6
 800d55e:	e047      	b.n	800d5f0 <sml_set_proc_parameter_request_write+0xac>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 5);
 800d560:	2205      	movs	r2, #5
 800d562:	2170      	movs	r1, #112	; 0x70
 800d564:	6838      	ldr	r0, [r7, #0]
 800d566:	f000 f981 	bl	800d86c <sml_buf_set_type_and_length>
 800d56a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d001      	beq.n	800d576 <sml_set_proc_parameter_request_write+0x32>
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	e03c      	b.n	800d5f0 <sml_set_proc_parameter_request_write+0xac>

	rv = sml_octet_string_write(msg->server_id, buf);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6839      	ldr	r1, [r7, #0]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff fbf9 	bl	800cd74 <sml_octet_string_write>
 800d582:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <sml_set_proc_parameter_request_write+0x4a>
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	e030      	b.n	800d5f0 <sml_set_proc_parameter_request_write+0xac>

	rv = sml_octet_string_write(msg->username, buf);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	6839      	ldr	r1, [r7, #0]
 800d594:	4618      	mov	r0, r3
 800d596:	f7ff fbed 	bl	800cd74 <sml_octet_string_write>
 800d59a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d001      	beq.n	800d5a6 <sml_set_proc_parameter_request_write+0x62>
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	e024      	b.n	800d5f0 <sml_set_proc_parameter_request_write+0xac>

	rv = sml_octet_string_write(msg->password, buf);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	6839      	ldr	r1, [r7, #0]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7ff fbe1 	bl	800cd74 <sml_octet_string_write>
 800d5b2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <sml_set_proc_parameter_request_write+0x7a>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	e018      	b.n	800d5f0 <sml_set_proc_parameter_request_write+0xac>

	rv = sml_tree_path_write(msg->parameter_tree_path, buf);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	6839      	ldr	r1, [r7, #0]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f001 f815 	bl	800e5f4 <sml_tree_path_write>
 800d5ca:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d001      	beq.n	800d5d6 <sml_set_proc_parameter_request_write+0x92>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	e00c      	b.n	800d5f0 <sml_set_proc_parameter_request_write+0xac>

	rv = sml_tree_write(msg->parameter_tree, buf);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	691b      	ldr	r3, [r3, #16]
 800d5da:	6839      	ldr	r1, [r7, #0]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f001 f97f 	bl	800e8e0 <sml_tree_write>
 800d5e2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d001      	beq.n	800d5ee <sml_set_proc_parameter_request_write+0xaa>
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	e000      	b.n	800d5f0 <sml_set_proc_parameter_request_write+0xac>

	return rv;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <sml_set_proc_parameter_request_free>:

void sml_set_proc_parameter_request_free(sml_set_proc_parameter_request *msg)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
	if (msg)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d01b      	beq.n	800d63e <sml_set_proc_parameter_request_free+0x46>
    {
		sml_octet_string_free(msg->server_id);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7ff fbf7 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->username);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	4618      	mov	r0, r3
 800d616:	f7ff fbf2 	bl	800cdfe <sml_octet_string_free>
		sml_octet_string_free(msg->password);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	4618      	mov	r0, r3
 800d620:	f7ff fbed 	bl	800cdfe <sml_octet_string_free>
		sml_tree_path_free(msg->parameter_tree_path);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	4618      	mov	r0, r3
 800d62a:	f001 f82e 	bl	800e68a <sml_tree_path_free>
		sml_tree_free(msg->parameter_tree);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	4618      	mov	r0, r3
 800d634:	f001 f9ca 	bl	800e9cc <sml_tree_free>

		free(msg);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7fb fdd3 	bl	80091e4 <vPortFree>
	}
}
 800d63e:	bf00      	nop
 800d640:	3708      	adds	r7, #8
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
	...

0800d648 <sml_buffer_init>:
#include <string.h>
#include <sml/sml_shared.h>
#include <sml/sml_log.h>

sml_buffer *sml_buffer_init(size_t length, int flags)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
	sml_buffer *buf = (sml_buffer *)malloc(sizeof(sml_buffer));
 800d652:	2018      	movs	r0, #24
 800d654:	f7fb fd04 	bl	8009060 <pvPortMalloc>
 800d658:	60f8      	str	r0, [r7, #12]
	if (!buf)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d105      	bne.n	800d66c <sml_buffer_init+0x24>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_buffer));
 800d660:	2118      	movs	r1, #24
 800d662:	481a      	ldr	r0, [pc, #104]	; (800d6cc <sml_buffer_init+0x84>)
 800d664:	f7fe fc2e 	bl	800bec4 <trace>
		return NULL;
 800d668:	2300      	movs	r3, #0
 800d66a:	e02b      	b.n	800d6c4 <sml_buffer_init+0x7c>
	}

	memset(buf, 0, sizeof(sml_buffer));
 800d66c:	2218      	movs	r2, #24
 800d66e:	2100      	movs	r1, #0
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f002 fee5 	bl	8010440 <memset>
	buf->buffer = (unsigned char *)malloc(length);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7fb fcf2 	bl	8009060 <pvPortMalloc>
 800d67c:	4602      	mov	r2, r0
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	601a      	str	r2, [r3, #0]
	if (!buf->buffer)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d10d      	bne.n	800d6a6 <sml_buffer_init+0x5e>
	{
		trace("ERROR: malloc %ld bytes\n", length);
 800d68a:	6879      	ldr	r1, [r7, #4]
 800d68c:	480f      	ldr	r0, [pc, #60]	; (800d6cc <sml_buffer_init+0x84>)
 800d68e:	f7fe fc19 	bl	800bec4 <trace>
		buf->error = SML_MALLOC_ERROR;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d698:	611a      	str	r2, [r3, #16]
		goto error;
 800d69a:	bf00      	nop
	buf->flags = flags;

	return buf;

error:
	sml_buffer_free(buf);
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f000 f863 	bl	800d768 <sml_buffer_free>
	return NULL;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	e00e      	b.n	800d6c4 <sml_buffer_init+0x7c>
	buf->buffer_len = length;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	605a      	str	r2, [r3, #4]
	memset(buf->buffer, 0, buf->buffer_len);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6818      	ldr	r0, [r3, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	f002 fec2 	bl	8010440 <memset>
	buf->flags = flags;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	683a      	ldr	r2, [r7, #0]
 800d6c0:	60da      	str	r2, [r3, #12]
	return buf;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3710      	adds	r7, #16
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	08011e74 	.word	0x08011e74

0800d6d0 <sml_buffer_resize>:

	return buf;
}

sml_buffer *sml_buffer_resize(sml_buffer *buf, size_t space)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
	if ((!buf) || (space <= 0))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d002      	beq.n	800d6e6 <sml_buffer_resize+0x16>
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <sml_buffer_resize+0x1a>
	{
		return NULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e037      	b.n	800d75a <sml_buffer_resize+0x8a>
	}

	if (buf->buffer_len - buf->cursor < space)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	685a      	ldr	r2, [r3, #4]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	1ad3      	subs	r3, r2, r3
 800d6f4:	683a      	ldr	r2, [r7, #0]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d92e      	bls.n	800d758 <sml_buffer_resize+0x88>
	{
		unsigned char *buffer = NULL;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	60fb      	str	r3, [r7, #12]
		size_t buffer_len = buf->buffer_len + space;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	683a      	ldr	r2, [r7, #0]
 800d704:	4413      	add	r3, r2
 800d706:	60bb      	str	r3, [r7, #8]
		buffer = (unsigned char*)malloc(buffer_len);
 800d708:	68b8      	ldr	r0, [r7, #8]
 800d70a:	f7fb fca9 	bl	8009060 <pvPortMalloc>
 800d70e:	60f8      	str	r0, [r7, #12]
		if (!buffer)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d109      	bne.n	800d72a <sml_buffer_resize+0x5a>
		{
			trace("ERROR: malloc %ld bytes\n", buffer_len);
 800d716:	68b9      	ldr	r1, [r7, #8]
 800d718:	4812      	ldr	r0, [pc, #72]	; (800d764 <sml_buffer_resize+0x94>)
 800d71a:	f7fe fbd3 	bl	800bec4 <trace>
			buf->error = SML_MALLOC_ERROR;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d724:	611a      	str	r2, [r3, #16]
			return NULL;
 800d726:	2300      	movs	r3, #0
 800d728:	e017      	b.n	800d75a <sml_buffer_resize+0x8a>
		}
		if (buf->buffer)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00c      	beq.n	800d74c <sml_buffer_resize+0x7c>
		{
			memcpy(buffer, buf->buffer, buf->buffer_len);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6819      	ldr	r1, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	461a      	mov	r2, r3
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f002 fe74 	bl	801042a <memcpy>
			free(buf->buffer);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4618      	mov	r0, r3
 800d748:	f7fb fd4c 	bl	80091e4 <vPortFree>
		}
		buf->buffer = buffer;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	68fa      	ldr	r2, [r7, #12]
 800d750:	601a      	str	r2, [r3, #0]
		buf->buffer_len = buffer_len;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	605a      	str	r2, [r3, #4]
	}

	return buf;
 800d758:	687b      	ldr	r3, [r7, #4]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	08011e74 	.word	0x08011e74

0800d768 <sml_buffer_free>:

void sml_buffer_free(sml_buffer *buf)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
	if (buf)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d014      	beq.n	800d7a0 <sml_buffer_free+0x38>
	{
		if (buf->buffer)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d004      	beq.n	800d788 <sml_buffer_free+0x20>
			free(buf->buffer);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4618      	mov	r0, r3
 800d784:	f7fb fd2e 	bl	80091e4 <vPortFree>
		if (buf->error_msg)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	695b      	ldr	r3, [r3, #20]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d004      	beq.n	800d79a <sml_buffer_free+0x32>
			free(buf->error_msg);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	695b      	ldr	r3, [r3, #20]
 800d794:	4618      	mov	r0, r3
 800d796:	f7fb fd25 	bl	80091e4 <vPortFree>
		free(buf);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7fb fd22 	bl	80091e4 <vPortFree>
	}
}
 800d7a0:	bf00      	nop
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <sml_buf_get_next_length>:
	return newPtr;
}
#endif

int sml_buf_get_next_length(sml_buffer *buf)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
	int length = 0;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	617b      	str	r3, [r7, #20]
	unsigned char byte = sml_buf_get_current_byte(buf);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 f91b 	bl	800d9f0 <sml_buf_get_current_byte>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	73fb      	strb	r3, [r7, #15]
	int list = ((byte & SML_TYPE_FIELD) == SML_TYPE_LIST) ? 0 : -1;
 800d7be:	7bfb      	ldrb	r3, [r7, #15]
 800d7c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d7c4:	2b70      	cmp	r3, #112	; 0x70
 800d7c6:	d101      	bne.n	800d7cc <sml_buf_get_next_length+0x24>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	e001      	b.n	800d7d0 <sml_buf_get_next_length+0x28>
 800d7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d0:	613b      	str	r3, [r7, #16]

	if (sml_debug_output(buf))
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 f96e 	bl	800dab4 <sml_debug_output>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d022      	beq.n	800d824 <sml_buf_get_next_length+0x7c>
    {
		trace("%i\t", buf->cursor);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	481f      	ldr	r0, [pc, #124]	; (800d864 <sml_buf_get_next_length+0xbc>)
 800d7e6:	f7fe fb6d 	bl	800bec4 <trace>
	}

	for (;buf->cursor < (int)buf->buffer_len;)
 800d7ea:	e01b      	b.n	800d824 <sml_buf_get_next_length+0x7c>
    {
		byte = sml_buf_get_current_byte(buf);
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 f8ff 	bl	800d9f0 <sml_buf_get_current_byte>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	73fb      	strb	r3, [r7, #15]
		length <<= 4;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	011b      	lsls	r3, r3, #4
 800d7fa:	617b      	str	r3, [r7, #20]
		length |= (byte & SML_LENGTH_FIELD);
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
 800d7fe:	f003 030f 	and.w	r3, r3, #15
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	4313      	orrs	r3, r2
 800d806:	617b      	str	r3, [r7, #20]

		if ((byte & SML_ANOTHER_TL) != SML_ANOTHER_TL)
 800d808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	da10      	bge.n	800d832 <sml_buf_get_next_length+0x8a>
        {
			break;
		}
		sml_buf_update_bytes_read(buf, 1);
 800d810:	2101      	movs	r1, #1
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f90b 	bl	800da2e <sml_buf_update_bytes_read>
		if(list)
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d002      	beq.n	800d824 <sml_buf_get_next_length+0x7c>
        {
			list += -1;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	3b01      	subs	r3, #1
 800d822:	613b      	str	r3, [r7, #16]
	for (;buf->cursor < (int)buf->buffer_len;)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	689a      	ldr	r2, [r3, #8]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d3dd      	bcc.n	800d7ec <sml_buf_get_next_length+0x44>
 800d830:	e000      	b.n	800d834 <sml_buf_get_next_length+0x8c>
			break;
 800d832:	bf00      	nop
		}
	}
	sml_buf_update_bytes_read(buf, 1);
 800d834:	2101      	movs	r1, #1
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f8f9 	bl	800da2e <sml_buf_update_bytes_read>

	if (sml_debug_output(buf))
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 f939 	bl	800dab4 <sml_debug_output>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d006      	beq.n	800d856 <sml_buf_get_next_length+0xae>
    {
		trace("%i\r\n", length + list);
 800d848:	697a      	ldr	r2, [r7, #20]
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	4413      	add	r3, r2
 800d84e:	4619      	mov	r1, r3
 800d850:	4805      	ldr	r0, [pc, #20]	; (800d868 <sml_buf_get_next_length+0xc0>)
 800d852:	f7fe fb37 	bl	800bec4 <trace>
	}

	return length + list;
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	4413      	add	r3, r2
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3718      	adds	r7, #24
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	08011e90 	.word	0x08011e90
 800d868:	08011e94 	.word	0x08011e94

0800d86c <sml_buf_set_type_and_length>:

int sml_buf_set_type_and_length(sml_buffer *buf, unsigned char type, unsigned int l)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b089      	sub	sp, #36	; 0x24
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	460b      	mov	r3, r1
 800d876:	607a      	str	r2, [r7, #4]
 800d878:	72fb      	strb	r3, [r7, #11]
	int rv = SML_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	617b      	str	r3, [r7, #20]

	if (!buf)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d102      	bne.n	800d88a <sml_buf_set_type_and_length+0x1e>
	{
		return SML_PARAMETER_ERROR;
 800d884:	f240 33e6 	movw	r3, #998	; 0x3e6
 800d888:	e088      	b.n	800d99c <sml_buf_set_type_and_length+0x130>
	}

	// set the type
	buf->buffer[buf->cursor] = type;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	4413      	add	r3, r2
 800d894:	7afa      	ldrb	r2, [r7, #11]
 800d896:	701a      	strb	r2, [r3, #0]

	if (type != SML_TYPE_LIST)
 800d898:	7afb      	ldrb	r3, [r7, #11]
 800d89a:	2b70      	cmp	r3, #112	; 0x70
 800d89c:	d002      	beq.n	800d8a4 <sml_buf_set_type_and_length+0x38>
    {
		l++;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	607b      	str	r3, [r7, #4]
	}

	if (l > SML_LENGTH_FIELD)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2b0f      	cmp	r3, #15
 800d8a8:	d95f      	bls.n	800d96a <sml_buf_set_type_and_length+0xfe>
    {

		// how much shifts are necessary
		int mask_pos = (sizeof(unsigned int) * 2) - 1;
 800d8aa:	2307      	movs	r3, #7
 800d8ac:	61fb      	str	r3, [r7, #28]

		// the 4 most significant bits of l (1111 0000 0000 ...)
		unsigned int mask = (unsigned int)(0xF0 << (8 * (sizeof(unsigned int) - 1)));
 800d8ae:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800d8b2:	61bb      	str	r3, [r7, #24]

		// select the next 4 most significant bits with a bit set until there 
		// is something
		while (!(mask & l))
 800d8b4:	e005      	b.n	800d8c2 <sml_buf_set_type_and_length+0x56>
        {
			mask >>= 4;
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	091b      	lsrs	r3, r3, #4
 800d8ba:	61bb      	str	r3, [r7, #24]
			mask_pos--;
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	61fb      	str	r3, [r7, #28]
		while (!(mask & l))
 800d8c2:	69ba      	ldr	r2, [r7, #24]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d0f4      	beq.n	800d8b6 <sml_buf_set_type_and_length+0x4a>
		}

		l += mask_pos; // for every TL-field
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	607b      	str	r3, [r7, #4]

		//TODO: check this correction (reason not understood) - Uwe Heuert
		if (type == SML_TYPE_LIST)
 800d8d4:	7afb      	ldrb	r3, [r7, #11]
 800d8d6:	2b70      	cmp	r3, #112	; 0x70
 800d8d8:	d102      	bne.n	800d8e0 <sml_buf_set_type_and_length+0x74>
        {
			l--;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	607b      	str	r3, [r7, #4]
		}

		if ((0x0F << (4 * (mask_pos + 1))) & l)
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	220f      	movs	r2, #15
 800d8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	4013      	ands	r3, r2
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d036      	beq.n	800d964 <sml_buf_set_type_and_length+0xf8>
        {
			// for the rare case that the addition of the number of TL-fields
			// result in another TL-field.
			mask_pos++;
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	61fb      	str	r3, [r7, #28]
			l++;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	3301      	adds	r3, #1
 800d900:	607b      	str	r3, [r7, #4]
		}

		// copy 4 bits of the number to the buffer
		while (mask > SML_LENGTH_FIELD)
 800d902:	e02f      	b.n	800d964 <sml_buf_set_type_and_length+0xf8>
        {
			buf->buffer[buf->cursor] |= SML_ANOTHER_TL;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	4413      	add	r3, r2
 800d90e:	781a      	ldrb	r2, [r3, #0]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	6819      	ldr	r1, [r3, #0]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	440b      	add	r3, r1
 800d91a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d91e:	b2d2      	uxtb	r2, r2
 800d920:	701a      	strb	r2, [r3, #0]
			buf->buffer[buf->cursor] |= ((mask & l) >> (4 * mask_pos));
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	4413      	add	r3, r2
 800d92c:	7819      	ldrb	r1, [r3, #0]
 800d92e:	69ba      	ldr	r2, [r7, #24]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	401a      	ands	r2, r3
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	fa22 f303 	lsr.w	r3, r2, r3
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	4403      	add	r3, r0
 800d948:	430a      	orrs	r2, r1
 800d94a:	b2d2      	uxtb	r2, r2
 800d94c:	701a      	strb	r2, [r3, #0]
			mask >>= 4;
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	091b      	lsrs	r3, r3, #4
 800d952:	61bb      	str	r3, [r7, #24]
			mask_pos--;
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	3b01      	subs	r3, #1
 800d958:	61fb      	str	r3, [r7, #28]
			buf->cursor++;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	1c5a      	adds	r2, r3, #1
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	609a      	str	r2, [r3, #8]
		while (mask > SML_LENGTH_FIELD)
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	2b0f      	cmp	r3, #15
 800d968:	d8cc      	bhi.n	800d904 <sml_buf_set_type_and_length+0x98>
		}
	}

	buf->buffer[buf->cursor] |= (l & SML_LENGTH_FIELD);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	4413      	add	r3, r2
 800d974:	7819      	ldrb	r1, [r3, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	f003 030f 	and.w	r3, r3, #15
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6818      	ldr	r0, [r3, #0]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	4403      	add	r3, r0
 800d98a:	430a      	orrs	r2, r1
 800d98c:	b2d2      	uxtb	r2, r2
 800d98e:	701a      	strb	r2, [r3, #0]
	buf->cursor++;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	1c5a      	adds	r2, r3, #1
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	609a      	str	r2, [r3, #8]

	return rv;
 800d99a:	697b      	ldr	r3, [r7, #20]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3724      	adds	r7, #36	; 0x24
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <sml_buf_has_errors>:

int sml_buf_has_errors(sml_buffer *buf)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
	return buf->error != SML_OK;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	bf14      	ite	ne
 800d9b8:	2301      	movne	r3, #1
 800d9ba:	2300      	moveq	r3, #0
 800d9bc:	b2db      	uxtb	r3, r3
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	370c      	adds	r7, #12
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr

0800d9ca <sml_buf_get_next_type>:

u8 sml_buf_get_next_type(sml_buffer *buf)
{
 800d9ca:	b480      	push	{r7}
 800d9cc:	b083      	sub	sp, #12
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
	return (buf->buffer[buf->cursor] & SML_TYPE_FIELD);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	4413      	add	r3, r2
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d9e2:	b2db      	uxtb	r3, r3
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <sml_buf_get_current_byte>:

unsigned char sml_buf_get_current_byte(sml_buffer *buf)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
	return buf->buffer[buf->cursor];
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	4413      	add	r3, r2
 800da02:	781b      	ldrb	r3, [r3, #0]
}
 800da04:	4618      	mov	r0, r3
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <sml_buf_get_current_buf>:

unsigned char *sml_buf_get_current_buf(sml_buffer *buf)
{
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
	return &(buf->buffer[buf->cursor]);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	4413      	add	r3, r2
}
 800da22:	4618      	mov	r0, r3
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <sml_buf_update_bytes_read>:

void sml_buf_update_bytes_read(sml_buffer *buf, int bytes)
{
 800da2e:	b480      	push	{r7}
 800da30:	b083      	sub	sp, #12
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	6039      	str	r1, [r7, #0]
	buf->cursor += bytes;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	689a      	ldr	r2, [r3, #8]
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	441a      	add	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	609a      	str	r2, [r3, #8]
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <sml_buf_optional_write>:

int sml_buf_optional_write(sml_buffer *buf)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
	if (!buf) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d102      	bne.n	800da64 <sml_buf_optional_write+0x14>
		return SML_PARAMETER_ERROR;
 800da5e:	f240 33e6 	movw	r3, #998	; 0x3e6
 800da62:	e00c      	b.n	800da7e <sml_buf_optional_write+0x2e>
	}

	buf->buffer[buf->cursor] = SML_OPTIONAL_SKIPPED;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	4413      	add	r3, r2
 800da6e:	2201      	movs	r2, #1
 800da70:	701a      	strb	r2, [r3, #0]
	buf->cursor++;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	1c5a      	adds	r2, r3, #1
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	609a      	str	r2, [r3, #8]

	return SML_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	370c      	adds	r7, #12
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr

0800da8a <sml_buf_optional_is_skipped>:

int sml_buf_optional_is_skipped(sml_buffer *buf)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b082      	sub	sp, #8
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
	if (sml_buf_get_current_byte(buf) == SML_OPTIONAL_SKIPPED)
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff ffac 	bl	800d9f0 <sml_buf_get_current_byte>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d105      	bne.n	800daaa <sml_buf_optional_is_skipped+0x20>
    {
		sml_buf_update_bytes_read(buf, 1);
 800da9e:	2101      	movs	r1, #1
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f7ff ffc4 	bl	800da2e <sml_buf_update_bytes_read>

		return 1;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e000      	b.n	800daac <sml_buf_optional_is_skipped+0x22>
	}

	return 0;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <sml_debug_output>:
	}
	trace("\n");
}

int sml_debug_output(sml_buffer *buf)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
	return buf->flags & SML_FLAGS_DEBUG_OUTPUT;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <sml_status_init>:
#include <sml/sml_log.h>

// sml_status;

sml_status *sml_status_init(void)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
	sml_status *status = (sml_status *)malloc(sizeof(sml_status));
 800dad6:	2008      	movs	r0, #8
 800dad8:	f7fb fac2 	bl	8009060 <pvPortMalloc>
 800dadc:	6078      	str	r0, [r7, #4]
	if (!status)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d105      	bne.n	800daf0 <sml_status_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_status));
 800dae4:	2108      	movs	r1, #8
 800dae6:	4807      	ldr	r0, [pc, #28]	; (800db04 <sml_status_init+0x34>)
 800dae8:	f7fe f9ec 	bl	800bec4 <trace>
		return NULL;
 800daec:	2300      	movs	r3, #0
 800daee:	e005      	b.n	800dafc <sml_status_init+0x2c>
	}
	memset(status, 0, sizeof(sml_status));
 800daf0:	2208      	movs	r2, #8
 800daf2:	2100      	movs	r1, #0
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f002 fca3 	bl	8010440 <memset>
	
	return status;
 800dafa:	687b      	ldr	r3, [r7, #4]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	080120bc 	.word	0x080120bc

0800db08 <sml_status_parse>:

sml_status *sml_status_parse(sml_buffer *buf)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
    int max = 1;
 800db10:	2301      	movs	r3, #1
 800db12:	617b      	str	r3, [r7, #20]
    u8 type;
    unsigned char byte;
    sml_status *status = NULL;
 800db14:	2300      	movs	r3, #0
 800db16:	613b      	str	r3, [r7, #16]

	if (!buf)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d101      	bne.n	800db22 <sml_status_parse+0x1a>
	{
		return NULL;
 800db1e:	2300      	movs	r3, #0
 800db20:	e05d      	b.n	800dbde <sml_status_parse+0xd6>
	}

    if (sml_buf_optional_is_skipped(buf))
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7ff ffb1 	bl	800da8a <sml_buf_optional_is_skipped>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d001      	beq.n	800db32 <sml_status_parse+0x2a>
    {
		return NULL;
 800db2e:	2300      	movs	r3, #0
 800db30:	e055      	b.n	800dbde <sml_status_parse+0xd6>
	}

	type = sml_buf_get_next_type(buf);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7ff ff49 	bl	800d9ca <sml_buf_get_next_type>
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]
	byte = sml_buf_get_current_byte(buf);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7ff ff57 	bl	800d9f0 <sml_buf_get_current_byte>
 800db42:	4603      	mov	r3, r0
 800db44:	73bb      	strb	r3, [r7, #14]

	if (sml_debug_output(buf))
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7ff ffb4 	bl	800dab4 <sml_debug_output>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d004      	beq.n	800db5c <sml_status_parse+0x54>
    {
		trace("\t\tSTATUS\t%i\r\n", type);
 800db52:	7bfb      	ldrb	r3, [r7, #15]
 800db54:	4619      	mov	r1, r3
 800db56:	4824      	ldr	r0, [pc, #144]	; (800dbe8 <sml_status_parse+0xe0>)
 800db58:	f7fe f9b4 	bl	800bec4 <trace>
	}

	status = sml_status_init();
 800db5c:	f7ff ffb8 	bl	800dad0 <sml_status_init>
 800db60:	6138      	str	r0, [r7, #16]
	if (!status)
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d105      	bne.n	800db74 <sml_status_parse+0x6c>
    {
		buf->error = SML_MALLOC_ERROR;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800db6e:	611a      	str	r2, [r3, #16]
		return NULL;
 800db70:	2300      	movs	r3, #0
 800db72:	e034      	b.n	800dbde <sml_status_parse+0xd6>
	}

	status->type = type;
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	7bfa      	ldrb	r2, [r7, #15]
 800db78:	701a      	strb	r2, [r3, #0]
	switch (type)
 800db7a:	7bfb      	ldrb	r3, [r7, #15]
 800db7c:	2b60      	cmp	r3, #96	; 0x60
 800db7e:	d11e      	bne.n	800dbbe <sml_status_parse+0xb6>
    {
		case SML_TYPE_UNSIGNED:
			// get maximal size, if not all bytes are used (example: only 6 bytes for a u64)
			while (max < ((byte & SML_LENGTH_FIELD) - 1))
 800db80:	e002      	b.n	800db88 <sml_status_parse+0x80>
            {
				max <<= 1;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	617b      	str	r3, [r7, #20]
			while (max < ((byte & SML_LENGTH_FIELD) - 1))
 800db88:	7bbb      	ldrb	r3, [r7, #14]
 800db8a:	f003 030f 	and.w	r3, r3, #15
 800db8e:	3b01      	subs	r3, #1
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	429a      	cmp	r2, r3
 800db94:	dbf5      	blt.n	800db82 <sml_status_parse+0x7a>
			}

			status->data.status8 = (u8*)sml_number_parse(buf, type, max);
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	4619      	mov	r1, r3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7fe feab 	bl	800c8f8 <sml_number_parse>
 800dba2:	4602      	mov	r2, r0
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	605a      	str	r2, [r3, #4]
			status->type |= max;
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	b25a      	sxtb	r2, r3
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	b25b      	sxtb	r3, r3
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	b25b      	sxtb	r3, r3
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	701a      	strb	r2, [r3, #0]
			break;
 800dbbc:	e003      	b.n	800dbc6 <sml_status_parse+0xbe>
		default:
			buf->error = SML_STATUS_TAG_MISMATCH;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2264      	movs	r2, #100	; 0x64
 800dbc2:	611a      	str	r2, [r3, #16]
			break;
 800dbc4:	bf00      	nop
	}
	if (sml_buf_has_errors(buf))
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7ff feee 	bl	800d9a8 <sml_buf_has_errors>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d004      	beq.n	800dbdc <sml_status_parse+0xd4>
    {
		sml_status_free(status);
 800dbd2:	6938      	ldr	r0, [r7, #16]
 800dbd4:	f000 f839 	bl	800dc4a <sml_status_free>
		return NULL;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	e000      	b.n	800dbde <sml_status_parse+0xd6>
	}

	return status;
 800dbdc:	693b      	ldr	r3, [r7, #16]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	080120d8 	.word	0x080120d8

0800dbec <sml_status_write>:

int sml_status_write(sml_status *status, sml_buffer *buf)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
	int rv = SML_OK;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d102      	bne.n	800dc06 <sml_status_write+0x1a>
	{
		return SML_PARAMETER_ERROR;
 800dc00:	f240 33e6 	movw	r3, #998	; 0x3e6
 800dc04:	e01d      	b.n	800dc42 <sml_status_write+0x56>
	}

	if (status == 0)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d105      	bne.n	800dc18 <sml_status_write+0x2c>
    {
		rv = sml_buf_optional_write(buf);
 800dc0c:	6838      	ldr	r0, [r7, #0]
 800dc0e:	f7ff ff1f 	bl	800da50 <sml_buf_optional_write>
 800dc12:	60f8      	str	r0, [r7, #12]
		return rv;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	e014      	b.n	800dc42 <sml_status_write+0x56>
	}

	rv = sml_number_write(status->data.status8, (status->type & SML_TYPE_FIELD), (status->type & SML_LENGTH_FIELD), buf);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6858      	ldr	r0, [r3, #4]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dc24:	b2d9      	uxtb	r1, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	f003 020f 	and.w	r2, r3, #15
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	f7fe ff04 	bl	800ca3c <sml_number_write>
 800dc34:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d001      	beq.n	800dc40 <sml_status_write+0x54>
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	e000      	b.n	800dc42 <sml_status_write+0x56>

	return rv;
 800dc40:	68fb      	ldr	r3, [r7, #12]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <sml_status_free>:

void sml_status_free(sml_status *status)
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b082      	sub	sp, #8
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
	if (status)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d007      	beq.n	800dc68 <sml_status_free+0x1e>
    {
		sml_number_free(status->data.status8);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7fe ff9a 	bl	800cb96 <sml_number_free>
		free(status);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7fb fabe 	bl	80091e4 <vPortFree>
	}
}
 800dc68:	bf00      	nop
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <sml_timestamp_local_init>:
#include <sml/sml_log.h>

// sml_timestamp_local;

sml_timestamp_local *sml_timestamp_local_init(void)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
	sml_timestamp_local *timestamp_local = (sml_timestamp_local *)malloc(sizeof(sml_timestamp_local));
 800dc76:	200c      	movs	r0, #12
 800dc78:	f7fb f9f2 	bl	8009060 <pvPortMalloc>
 800dc7c:	6078      	str	r0, [r7, #4]
	if (!timestamp_local)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d105      	bne.n	800dc90 <sml_timestamp_local_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_timestamp_local));
 800dc84:	210c      	movs	r1, #12
 800dc86:	4807      	ldr	r0, [pc, #28]	; (800dca4 <sml_timestamp_local_init+0x34>)
 800dc88:	f7fe f91c 	bl	800bec4 <trace>
		return NULL;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	e005      	b.n	800dc9c <sml_timestamp_local_init+0x2c>
	}
	memset(timestamp_local, 0, sizeof(sml_timestamp_local));
 800dc90:	220c      	movs	r2, #12
 800dc92:	2100      	movs	r1, #0
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f002 fbd3 	bl	8010440 <memset>
	
	return timestamp_local;
 800dc9a:	687b      	ldr	r3, [r7, #4]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	080120e8 	.word	0x080120e8

0800dca8 <sml_timestamp_local_parse>:

sml_timestamp_local *sml_timestamp_local_parse(sml_buffer *buf)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
    sml_timestamp_local *timestamp_local = NULL;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d101      	bne.n	800dcbe <sml_timestamp_local_parse+0x16>
	{
		return NULL;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	e065      	b.n	800dd8a <sml_timestamp_local_parse+0xe2>
	}

	if (sml_buf_optional_is_skipped(buf))
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7ff fee3 	bl	800da8a <sml_buf_optional_is_skipped>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d001      	beq.n	800dcce <sml_timestamp_local_parse+0x26>
    {
		return NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	e05d      	b.n	800dd8a <sml_timestamp_local_parse+0xe2>
	}

	timestamp_local = sml_timestamp_local_init();
 800dcce:	f7ff ffcf 	bl	800dc70 <sml_timestamp_local_init>
 800dcd2:	60f8      	str	r0, [r7, #12]
	if (!timestamp_local)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d105      	bne.n	800dce6 <sml_timestamp_local_parse+0x3e>
    {
		buf->error = SML_MALLOC_ERROR;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dce0:	611a      	str	r2, [r3, #16]
		return NULL;
 800dce2:	2300      	movs	r3, #0
 800dce4:	e051      	b.n	800dd8a <sml_timestamp_local_parse+0xe2>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff fe6f 	bl	800d9ca <sml_buf_get_next_type>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b70      	cmp	r3, #112	; 0x70
 800dcf0:	d003      	beq.n	800dcfa <sml_timestamp_local_parse+0x52>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2232      	movs	r2, #50	; 0x32
 800dcf6:	611a      	str	r2, [r3, #16]
		goto error;
 800dcf8:	e043      	b.n	800dd82 <sml_timestamp_local_parse+0xda>
	}

	if (sml_buf_get_next_length(buf) != 3)
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7ff fd54 	bl	800d7a8 <sml_buf_get_next_length>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d003      	beq.n	800dd0e <sml_timestamp_local_parse+0x66>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2220      	movs	r2, #32
 800dd0a:	611a      	str	r2, [r3, #16]
		goto error;
 800dd0c:	e039      	b.n	800dd82 <sml_timestamp_local_parse+0xda>
	}

	if (sml_debug_output(buf))
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7ff fed0 	bl	800dab4 <sml_debug_output>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d002      	beq.n	800dd20 <sml_timestamp_local_parse+0x78>
    {
		trace("\t\tTIMESTAMP LOCAL\r\n");
 800dd1a:	481e      	ldr	r0, [pc, #120]	; (800dd94 <sml_timestamp_local_parse+0xec>)
 800dd1c:	f7fe f8d2 	bl	800bec4 <trace>
	}

	timestamp_local->timestamp = sml_u32_parse(buf);
 800dd20:	2204      	movs	r2, #4
 800dd22:	2160      	movs	r1, #96	; 0x60
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7fe fde7 	bl	800c8f8 <sml_number_parse>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff fe39 	bl	800d9a8 <sml_buf_has_errors>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d11d      	bne.n	800dd78 <sml_timestamp_local_parse+0xd0>

	timestamp_local->local_offset = sml_i16_parse(buf);
 800dd3c:	2202      	movs	r2, #2
 800dd3e:	2150      	movs	r1, #80	; 0x50
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7fe fdd9 	bl	800c8f8 <sml_number_parse>
 800dd46:	4602      	mov	r2, r0
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7ff fe2b 	bl	800d9a8 <sml_buf_has_errors>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d111      	bne.n	800dd7c <sml_timestamp_local_parse+0xd4>

	timestamp_local->season_time_offset = sml_i16_parse(buf);
 800dd58:	2202      	movs	r2, #2
 800dd5a:	2150      	movs	r1, #80	; 0x50
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f7fe fdcb 	bl	800c8f8 <sml_number_parse>
 800dd62:	4602      	mov	r2, r0
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7ff fe1d 	bl	800d9a8 <sml_buf_has_errors>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d105      	bne.n	800dd80 <sml_timestamp_local_parse+0xd8>

	return timestamp_local;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	e008      	b.n	800dd8a <sml_timestamp_local_parse+0xe2>
	if (sml_buf_has_errors(buf)) goto error;
 800dd78:	bf00      	nop
 800dd7a:	e002      	b.n	800dd82 <sml_timestamp_local_parse+0xda>
	if (sml_buf_has_errors(buf)) goto error;
 800dd7c:	bf00      	nop
 800dd7e:	e000      	b.n	800dd82 <sml_timestamp_local_parse+0xda>
	if (sml_buf_has_errors(buf)) goto error;
 800dd80:	bf00      	nop

error:
	sml_timestamp_local_free(timestamp_local);
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f000 f84d 	bl	800de22 <sml_timestamp_local_free>
	return NULL;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	08012104 	.word	0x08012104

0800dd98 <sml_timestamp_local_write>:

int sml_timestamp_local_write(sml_timestamp_local *timestamp_local, sml_buffer *buf)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
	int rv;

	if (!timestamp_local || !buf)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <sml_timestamp_local_write+0x16>
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d102      	bne.n	800ddb4 <sml_timestamp_local_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800ddae:	f240 33e6 	movw	r3, #998	; 0x3e6
 800ddb2:	e032      	b.n	800de1a <sml_timestamp_local_write+0x82>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 3);
 800ddb4:	2203      	movs	r2, #3
 800ddb6:	2170      	movs	r1, #112	; 0x70
 800ddb8:	6838      	ldr	r0, [r7, #0]
 800ddba:	f7ff fd57 	bl	800d86c <sml_buf_set_type_and_length>
 800ddbe:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <sml_timestamp_local_write+0x32>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	e027      	b.n	800de1a <sml_timestamp_local_write+0x82>

	rv = sml_u32_write(timestamp_local->timestamp, buf);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6818      	ldr	r0, [r3, #0]
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2204      	movs	r2, #4
 800ddd2:	2160      	movs	r1, #96	; 0x60
 800ddd4:	f7fe fe32 	bl	800ca3c <sml_number_write>
 800ddd8:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d001      	beq.n	800dde4 <sml_timestamp_local_write+0x4c>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	e01a      	b.n	800de1a <sml_timestamp_local_write+0x82>

	rv = sml_i16_write(timestamp_local->local_offset, buf);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6858      	ldr	r0, [r3, #4]
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	2202      	movs	r2, #2
 800ddec:	2150      	movs	r1, #80	; 0x50
 800ddee:	f7fe fe25 	bl	800ca3c <sml_number_write>
 800ddf2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <sml_timestamp_local_write+0x66>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	e00d      	b.n	800de1a <sml_timestamp_local_write+0x82>

	rv = sml_i16_write(timestamp_local->season_time_offset, buf);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6898      	ldr	r0, [r3, #8]
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	2202      	movs	r2, #2
 800de06:	2150      	movs	r1, #80	; 0x50
 800de08:	f7fe fe18 	bl	800ca3c <sml_number_write>
 800de0c:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <sml_timestamp_local_write+0x80>
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	e000      	b.n	800de1a <sml_timestamp_local_write+0x82>

	return rv;
 800de18:	68fb      	ldr	r3, [r7, #12]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <sml_timestamp_local_free>:

void sml_timestamp_local_free(sml_timestamp_local *timestamp_local)
{
 800de22:	b580      	push	{r7, lr}
 800de24:	b082      	sub	sp, #8
 800de26:	af00      	add	r7, sp, #0
 800de28:	6078      	str	r0, [r7, #4]
    if (timestamp_local)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d011      	beq.n	800de54 <sml_timestamp_local_free+0x32>
    {
		sml_number_free(timestamp_local->timestamp);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4618      	mov	r0, r3
 800de36:	f7fe feae 	bl	800cb96 <sml_number_free>
		sml_number_free(timestamp_local->local_offset);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fe fea9 	bl	800cb96 <sml_number_free>
		sml_number_free(timestamp_local->season_time_offset);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fe fea4 	bl	800cb96 <sml_number_free>
		free(timestamp_local);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7fb f9c8 	bl	80091e4 <vPortFree>
    }
}
 800de54:	bf00      	nop
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <sml_time_init>:

// sml_time;

sml_time *sml_time_init(void)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
	sml_time *tme = (sml_time *)malloc(sizeof(sml_time));
 800de62:	2008      	movs	r0, #8
 800de64:	f7fb f8fc 	bl	8009060 <pvPortMalloc>
 800de68:	6078      	str	r0, [r7, #4]
	if (!tme)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d105      	bne.n	800de7c <sml_time_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_time));
 800de70:	2108      	movs	r1, #8
 800de72:	4807      	ldr	r0, [pc, #28]	; (800de90 <sml_time_init+0x34>)
 800de74:	f7fe f826 	bl	800bec4 <trace>
		return NULL;
 800de78:	2300      	movs	r3, #0
 800de7a:	e005      	b.n	800de88 <sml_time_init+0x2c>
	}
	memset(tme, 0, sizeof(sml_time));
 800de7c:	2208      	movs	r2, #8
 800de7e:	2100      	movs	r1, #0
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f002 fadd 	bl	8010440 <memset>
	
	return tme;
 800de86:	687b      	ldr	r3, [r7, #4]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	080120e8 	.word	0x080120e8

0800de94 <sml_time_parse>:

sml_time *sml_time_parse(sml_buffer *buf)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
    sml_time *tme = NULL;
 800de9c:	2300      	movs	r3, #0
 800de9e:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <sml_time_parse+0x16>
	{
		return NULL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	e084      	b.n	800dfb4 <sml_time_parse+0x120>
	}

	if (sml_buf_optional_is_skipped(buf))
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f7ff fded 	bl	800da8a <sml_buf_optional_is_skipped>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <sml_time_parse+0x26>
    {
		return NULL;
 800deb6:	2300      	movs	r3, #0
 800deb8:	e07c      	b.n	800dfb4 <sml_time_parse+0x120>
	}

	tme = sml_time_init();
 800deba:	f7ff ffcf 	bl	800de5c <sml_time_init>
 800debe:	60f8      	str	r0, [r7, #12]
	if (!tme)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d105      	bne.n	800ded2 <sml_time_parse+0x3e>
    {
		buf->error = SML_MALLOC_ERROR;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800decc:	611a      	str	r2, [r3, #16]
		return NULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	e070      	b.n	800dfb4 <sml_time_parse+0x120>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7ff fd79 	bl	800d9ca <sml_buf_get_next_type>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b70      	cmp	r3, #112	; 0x70
 800dedc:	d01e      	beq.n	800df1c <sml_time_parse+0x88>
    {
		if (buf->flags & SML_FLAGS_ISKRA_BZ_IGNORE_BUGS)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d014      	beq.n	800df14 <sml_time_parse+0x80>
		{
			tme->tag = sml_u8_init(SML_TIME_SEC_INDEX);
 800deea:	2301      	movs	r3, #1
 800deec:	2260      	movs	r2, #96	; 0x60
 800deee:	f04f 0001 	mov.w	r0, #1
 800def2:	f04f 0100 	mov.w	r1, #0
 800def6:	f7fe fcc5 	bl	800c884 <sml_number_init>
 800defa:	4602      	mov	r2, r0
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	601a      	str	r2, [r3, #0]
			tme->data.timestamp = sml_u32_parse(buf);
 800df00:	2204      	movs	r2, #4
 800df02:	2160      	movs	r1, #96	; 0x60
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7fe fcf7 	bl	800c8f8 <sml_number_parse>
 800df0a:	4602      	mov	r2, r0
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	605a      	str	r2, [r3, #4]
			return tme;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	e04f      	b.n	800dfb4 <sml_time_parse+0x120>
		}
		else
		{
			buf->error = SML_TYPE_LIST_EXPECTED;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2232      	movs	r2, #50	; 0x32
 800df18:	611a      	str	r2, [r3, #16]
			goto error;
 800df1a:	e047      	b.n	800dfac <sml_time_parse+0x118>
		}
	}

	if (sml_buf_get_next_length(buf) != 2)
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f7ff fc43 	bl	800d7a8 <sml_buf_get_next_length>
 800df22:	4603      	mov	r3, r0
 800df24:	2b02      	cmp	r3, #2
 800df26:	d003      	beq.n	800df30 <sml_time_parse+0x9c>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2220      	movs	r2, #32
 800df2c:	611a      	str	r2, [r3, #16]
		goto error;
 800df2e:	e03d      	b.n	800dfac <sml_time_parse+0x118>
	}

	if (sml_debug_output(buf))
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7ff fdbf 	bl	800dab4 <sml_debug_output>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d002      	beq.n	800df42 <sml_time_parse+0xae>
    {
		trace("\t\tTIME\r\n");
 800df3c:	481f      	ldr	r0, [pc, #124]	; (800dfbc <sml_time_parse+0x128>)
 800df3e:	f7fd ffc1 	bl	800bec4 <trace>
	}

	tme->tag = sml_u8_parse(buf);
 800df42:	2201      	movs	r2, #1
 800df44:	2160      	movs	r1, #96	; 0x60
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f7fe fcd6 	bl	800c8f8 <sml_number_parse>
 800df4c:	4602      	mov	r2, r0
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f7ff fd28 	bl	800d9a8 <sml_buf_has_errors>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d123      	bne.n	800dfa6 <sml_time_parse+0x112>
	if (!tme->tag) goto error;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d021      	beq.n	800dfaa <sml_time_parse+0x116>

	switch (*(tme->tag))
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	db14      	blt.n	800df9a <sml_time_parse+0x106>
 800df70:	2b02      	cmp	r3, #2
 800df72:	dd02      	ble.n	800df7a <sml_time_parse+0xe6>
 800df74:	2b03      	cmp	r3, #3
 800df76:	d009      	beq.n	800df8c <sml_time_parse+0xf8>
 800df78:	e00f      	b.n	800df9a <sml_time_parse+0x106>
    {
		case SML_TIME_SEC_INDEX:
		case SML_TIME_TIMESTAMP:
			tme->data.timestamp = sml_u32_parse(buf);
 800df7a:	2204      	movs	r2, #4
 800df7c:	2160      	movs	r1, #96	; 0x60
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7fe fcba 	bl	800c8f8 <sml_number_parse>
 800df84:	4602      	mov	r2, r0
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	605a      	str	r2, [r3, #4]
			break;
 800df8a:	e00a      	b.n	800dfa2 <sml_time_parse+0x10e>
		case SML_TIME_TIMESTAMP_LOCAL:
			tme->data.timestamp_local = sml_timestamp_local_parse(buf);
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff fe8b 	bl	800dca8 <sml_timestamp_local_parse>
 800df92:	4602      	mov	r2, r0
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	605a      	str	r2, [r3, #4]
			break;
 800df98:	e003      	b.n	800dfa2 <sml_time_parse+0x10e>
		default:
			buf->error = SML_TIME_TAG_MISMATCH;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2265      	movs	r2, #101	; 0x65
 800df9e:	611a      	str	r2, [r3, #16]
			goto error;
 800dfa0:	e004      	b.n	800dfac <sml_time_parse+0x118>
	}

	return tme;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	e006      	b.n	800dfb4 <sml_time_parse+0x120>
	if (sml_buf_has_errors(buf)) goto error;
 800dfa6:	bf00      	nop
 800dfa8:	e000      	b.n	800dfac <sml_time_parse+0x118>
	if (!tme->tag) goto error;
 800dfaa:	bf00      	nop

error:
	sml_time_free(tme);
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f000 f853 	bl	800e058 <sml_time_free>
	return NULL;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3710      	adds	r7, #16
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	08012118 	.word	0x08012118

0800dfc0 <sml_time_write>:

int sml_time_write(sml_time *t, sml_buffer *buf)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
	int rv;

	if (!buf)
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d102      	bne.n	800dfd6 <sml_time_write+0x16>
	{
		return SML_PARAMETER_ERROR;
 800dfd0:	f240 33e6 	movw	r3, #998	; 0x3e6
 800dfd4:	e03c      	b.n	800e050 <sml_time_write+0x90>
	}

	if (t == 0)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d105      	bne.n	800dfe8 <sml_time_write+0x28>
    {
		rv = sml_buf_optional_write(buf);
 800dfdc:	6838      	ldr	r0, [r7, #0]
 800dfde:	f7ff fd37 	bl	800da50 <sml_buf_optional_write>
 800dfe2:	60f8      	str	r0, [r7, #12]
		return rv;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	e033      	b.n	800e050 <sml_time_write+0x90>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 2);
 800dfe8:	2202      	movs	r2, #2
 800dfea:	2170      	movs	r1, #112	; 0x70
 800dfec:	6838      	ldr	r0, [r7, #0]
 800dfee:	f7ff fc3d 	bl	800d86c <sml_buf_set_type_and_length>
 800dff2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <sml_time_write+0x3e>
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	e028      	b.n	800e050 <sml_time_write+0x90>

	rv = sml_u8_write(t->tag, buf);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6818      	ldr	r0, [r3, #0]
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	2201      	movs	r2, #1
 800e006:	2160      	movs	r1, #96	; 0x60
 800e008:	f7fe fd18 	bl	800ca3c <sml_number_write>
 800e00c:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d001      	beq.n	800e018 <sml_time_write+0x58>
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	e01b      	b.n	800e050 <sml_time_write+0x90>

	switch (*(t->tag))
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b01      	cmp	r3, #1
 800e020:	db15      	blt.n	800e04e <sml_time_write+0x8e>
 800e022:	2b02      	cmp	r3, #2
 800e024:	dd02      	ble.n	800e02c <sml_time_write+0x6c>
 800e026:	2b03      	cmp	r3, #3
 800e028:	d009      	beq.n	800e03e <sml_time_write+0x7e>
 800e02a:	e010      	b.n	800e04e <sml_time_write+0x8e>
    {
		case SML_TIME_SEC_INDEX:
		case SML_TIME_TIMESTAMP:
			rv = sml_u32_write(t->data.timestamp, buf);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6858      	ldr	r0, [r3, #4]
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	2204      	movs	r2, #4
 800e034:	2160      	movs	r1, #96	; 0x60
 800e036:	f7fe fd01 	bl	800ca3c <sml_number_write>
 800e03a:	60f8      	str	r0, [r7, #12]
			break;
 800e03c:	e007      	b.n	800e04e <sml_time_write+0x8e>
		case SML_TIME_TIMESTAMP_LOCAL:
			rv = sml_timestamp_local_write(t->data.timestamp_local, buf);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	6839      	ldr	r1, [r7, #0]
 800e044:	4618      	mov	r0, r3
 800e046:	f7ff fea7 	bl	800dd98 <sml_timestamp_local_write>
 800e04a:	60f8      	str	r0, [r7, #12]
			break;
 800e04c:	bf00      	nop
	}

	return rv;
 800e04e:	68fb      	ldr	r3, [r7, #12]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <sml_time_free>:

void sml_time_free(sml_time *tme)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
    if (tme)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d021      	beq.n	800e0aa <sml_time_free+0x52>
    {
		if (tme->tag)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d01a      	beq.n	800e0a4 <sml_time_free+0x4c>
        {
			switch (*(tme->tag))
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	2b01      	cmp	r3, #1
 800e076:	db10      	blt.n	800e09a <sml_time_free+0x42>
 800e078:	2b02      	cmp	r3, #2
 800e07a:	dd02      	ble.n	800e082 <sml_time_free+0x2a>
 800e07c:	2b03      	cmp	r3, #3
 800e07e:	d006      	beq.n	800e08e <sml_time_free+0x36>
 800e080:	e00b      	b.n	800e09a <sml_time_free+0x42>
            {
				case SML_TIME_SEC_INDEX:
				case SML_TIME_TIMESTAMP:
					sml_number_free(tme->data.timestamp);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe fd85 	bl	800cb96 <sml_number_free>
					break;
 800e08c:	e005      	b.n	800e09a <sml_time_free+0x42>
				case SML_TIME_TIMESTAMP_LOCAL:
					sml_timestamp_local_free(tme->data.timestamp_local);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	4618      	mov	r0, r3
 800e094:	f7ff fec5 	bl	800de22 <sml_timestamp_local_free>
					break;
 800e098:	bf00      	nop
			}
			sml_number_free(tme->tag);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fe fd79 	bl	800cb96 <sml_number_free>
		}
		free(tme);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7fb f89d 	bl	80091e4 <vPortFree>
    }
}
 800e0aa:	bf00      	nop
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
	...

0800e0b4 <sml_transport_read>:
unsigned char esc_seq_default[] = { 0x1b, 0x1b, 0x1b, 0x1b };
unsigned char start_seq[] = { 0x01, 0x01, 0x01, 0x01 };
unsigned char end_seq[] = { 0x1a };

size_t sml_transport_read(unsigned char *mem, unsigned char *buffer, size_t max_len)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af02      	add	r7, sp, #8
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
    return sml_transport_read2(mem, buffer, max_len, 0, esc_seq_default);
 800e0c0:	4b06      	ldr	r3, [pc, #24]	; (800e0dc <sml_transport_read+0x28>)
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f000 f808 	bl	800e0e0 <sml_transport_read2>
 800e0d0:	4603      	mov	r3, r0
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20000290 	.word	0x20000290

0800e0e0 <sml_transport_read2>:

size_t sml_transport_read2(unsigned char *mem, unsigned char *buffer, size_t max_len, int flags, unsigned char *esc_seq)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b08a      	sub	sp, #40	; 0x28
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
 800e0ec:	603b      	str	r3, [r7, #0]
	size_t rv = 0;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned char *buf = NULL;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	61bb      	str	r3, [r7, #24]
	unsigned int len_mem = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	623b      	str	r3, [r7, #32]
	unsigned int len_buf = 0;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	61fb      	str	r3, [r7, #28]

	if (!mem || !buffer || (max_len < 8) || !esc_seq)
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d008      	beq.n	800e116 <sml_transport_read2+0x36>
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d005      	beq.n	800e116 <sml_transport_read2+0x36>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2b07      	cmp	r3, #7
 800e10e:	d902      	bls.n	800e116 <sml_transport_read2+0x36>
 800e110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e112:	2b00      	cmp	r3, #0
 800e114:	d104      	bne.n	800e120 <sml_transport_read2+0x40>
	{
		trace("ERROR: parameter\n");
 800e116:	4857      	ldr	r0, [pc, #348]	; (800e274 <sml_transport_read2+0x194>)
 800e118:	f7fd fed4 	bl	800bec4 <trace>
		return 0;
 800e11c:	2300      	movs	r3, #0
 800e11e:	e0a4      	b.n	800e26a <sml_transport_read2+0x18a>
	}

	buf = (unsigned char *)malloc(max_len);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7fa ff9d 	bl	8009060 <pvPortMalloc>
 800e126:	61b8      	str	r0, [r7, #24]
	if (!buf)
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d105      	bne.n	800e13a <sml_transport_read2+0x5a>
	{
		trace("ERROR: malloc %ld bytes\n", max_len);
 800e12e:	6879      	ldr	r1, [r7, #4]
 800e130:	4851      	ldr	r0, [pc, #324]	; (800e278 <sml_transport_read2+0x198>)
 800e132:	f7fd fec7 	bl	800bec4 <trace>
		return 0;
 800e136:	2300      	movs	r3, #0
 800e138:	e097      	b.n	800e26a <sml_transport_read2+0x18a>
	}
	memset(buf, 0, max_len);
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	2100      	movs	r1, #0
 800e13e:	69b8      	ldr	r0, [r7, #24]
 800e140:	f002 f97e 	bl	8010440 <memset>

	if ((memcmp(&mem[len_mem], esc_seq, 4) == 0) && (memcmp(&mem[len_mem + 4], start_seq, 4) == 0))
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	6a3b      	ldr	r3, [r7, #32]
 800e148:	4413      	add	r3, r2
 800e14a:	2204      	movs	r2, #4
 800e14c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e14e:	4618      	mov	r0, r3
 800e150:	f002 f95c 	bl	801040c <memcmp>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d17f      	bne.n	800e25a <sml_transport_read2+0x17a>
 800e15a:	6a3b      	ldr	r3, [r7, #32]
 800e15c:	3304      	adds	r3, #4
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	4413      	add	r3, r2
 800e162:	2204      	movs	r2, #4
 800e164:	4945      	ldr	r1, [pc, #276]	; (800e27c <sml_transport_read2+0x19c>)
 800e166:	4618      	mov	r0, r3
 800e168:	f002 f950 	bl	801040c <memcmp>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d173      	bne.n	800e25a <sml_transport_read2+0x17a>
	{
		len_mem += 8;
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	3308      	adds	r3, #8
 800e176:	623b      	str	r3, [r7, #32]
		goto end;
	}

	// found start sequence

	while (len_mem <= max_len - 4)
 800e178:	e06a      	b.n	800e250 <sml_transport_read2+0x170>
	{
		if (memcmp(&mem[len_mem], esc_seq, 4) == 0)
 800e17a:	68fa      	ldr	r2, [r7, #12]
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	4413      	add	r3, r2
 800e180:	2204      	movs	r2, #4
 800e182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e184:	4618      	mov	r0, r3
 800e186:	f002 f941 	bl	801040c <memcmp>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d151      	bne.n	800e234 <sml_transport_read2+0x154>
		{
			// found esc sequence
			len_mem += 4;
 800e190:	6a3b      	ldr	r3, [r7, #32]
 800e192:	3304      	adds	r3, #4
 800e194:	623b      	str	r3, [r7, #32]

			if (mem[len_mem] == 0x1a)
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	6a3b      	ldr	r3, [r7, #32]
 800e19a:	4413      	add	r3, r2
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	2b1a      	cmp	r3, #26
 800e1a0:	d12d      	bne.n	800e1fe <sml_transport_read2+0x11e>
			{
				u16 crc;
				unsigned char crcBuf[2];

				// found end sequence
				len_mem += 4;
 800e1a2:	6a3b      	ldr	r3, [r7, #32]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	623b      	str	r3, [r7, #32]

				crc = sml_crc16_calculate(&(mem[0]), len_mem - 2);
 800e1a8:	6a3b      	ldr	r3, [r7, #32]
 800e1aa:	3b02      	subs	r3, #2
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f7fb fc96 	bl	8009ae0 <sml_crc16_calculate>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	82fb      	strh	r3, [r7, #22]
				crcBuf[0] = (unsigned char)((crc & 0xFF00) >> 8);
 800e1b8:	8afb      	ldrh	r3, [r7, #22]
 800e1ba:	0a1b      	lsrs	r3, r3, #8
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	753b      	strb	r3, [r7, #20]
				crcBuf[1] = (unsigned char)(crc & 0x00FF);
 800e1c2:	8afb      	ldrh	r3, [r7, #22]
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	757b      	strb	r3, [r7, #21]
				if ((memcmp(crcBuf, &(mem[len_mem - 2]), 2) == 0) ||
 800e1c8:	6a3b      	ldr	r3, [r7, #32]
 800e1ca:	3b02      	subs	r3, #2
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	18d1      	adds	r1, r2, r3
 800e1d0:	f107 0314 	add.w	r3, r7, #20
 800e1d4:	2202      	movs	r2, #2
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f002 f918 	bl	801040c <memcmp>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d004      	beq.n	800e1ec <sml_transport_read2+0x10c>
					(flags & SML_FLAGS_IGNORE_CRC_ERRORS))
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
				if ((memcmp(crcBuf, &(mem[len_mem - 2]), 2) == 0) ||
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d037      	beq.n	800e25c <sml_transport_read2+0x17c>
				{
					memcpy(buffer, buf, len_buf);
 800e1ec:	69fa      	ldr	r2, [r7, #28]
 800e1ee:	69b9      	ldr	r1, [r7, #24]
 800e1f0:	68b8      	ldr	r0, [r7, #8]
 800e1f2:	f002 f91a 	bl	801042a <memcpy>
					rv = len_buf;
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	627b      	str	r3, [r7, #36]	; 0x24
					goto end;
 800e1fa:	bf00      	nop
 800e1fc:	e02e      	b.n	800e25c <sml_transport_read2+0x17c>
				else
				{
					goto end;
				}
			}
			else if (memcmp(&mem[len_mem], esc_seq, 4) == 0)
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	6a3b      	ldr	r3, [r7, #32]
 800e202:	4413      	add	r3, r2
 800e204:	2204      	movs	r2, #4
 800e206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e208:	4618      	mov	r0, r3
 800e20a:	f002 f8ff 	bl	801040c <memcmp>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10b      	bne.n	800e22c <sml_transport_read2+0x14c>
			{
				memcpy(&buf[len_buf], &mem[len_mem], 4);
 800e214:	69ba      	ldr	r2, [r7, #24]
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	4413      	add	r3, r2
 800e21a:	68f9      	ldr	r1, [r7, #12]
 800e21c:	6a3a      	ldr	r2, [r7, #32]
 800e21e:	440a      	add	r2, r1
 800e220:	6812      	ldr	r2, [r2, #0]
 800e222:	601a      	str	r2, [r3, #0]
				len_buf += 4;
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	3304      	adds	r3, #4
 800e228:	61fb      	str	r3, [r7, #28]
 800e22a:	e00e      	b.n	800e24a <sml_transport_read2+0x16a>
			}
			else
			{
				// dont read other escaped sequences yet
				trace("error: unrecognized sequence\n");
 800e22c:	4814      	ldr	r0, [pc, #80]	; (800e280 <sml_transport_read2+0x1a0>)
 800e22e:	f7fd fe49 	bl	800bec4 <trace>
				goto end;
 800e232:	e013      	b.n	800e25c <sml_transport_read2+0x17c>
			}
		}
		else
		{
			memcpy(&buf[len_buf], &mem[len_mem], 4);
 800e234:	69ba      	ldr	r2, [r7, #24]
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	4413      	add	r3, r2
 800e23a:	68f9      	ldr	r1, [r7, #12]
 800e23c:	6a3a      	ldr	r2, [r7, #32]
 800e23e:	440a      	add	r2, r1
 800e240:	6812      	ldr	r2, [r2, #0]
 800e242:	601a      	str	r2, [r3, #0]
			len_buf += 4;
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	3304      	adds	r3, #4
 800e248:	61fb      	str	r3, [r7, #28]
		}
		len_mem += 4;
 800e24a:	6a3b      	ldr	r3, [r7, #32]
 800e24c:	3304      	adds	r3, #4
 800e24e:	623b      	str	r3, [r7, #32]
	while (len_mem <= max_len - 4)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	3b04      	subs	r3, #4
 800e254:	6a3a      	ldr	r2, [r7, #32]
 800e256:	429a      	cmp	r2, r3
 800e258:	d98f      	bls.n	800e17a <sml_transport_read2+0x9a>
	}

end:
 800e25a:	bf00      	nop
	if (buf)
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d002      	beq.n	800e268 <sml_transport_read2+0x188>
		free(buf);
 800e262:	69b8      	ldr	r0, [r7, #24]
 800e264:	f7fa ffbe 	bl	80091e4 <vPortFree>

	return rv;
 800e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3728      	adds	r7, #40	; 0x28
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	08012124 	.word	0x08012124
 800e278:	08012138 	.word	0x08012138
 800e27c:	20000294 	.word	0x20000294
 800e280:	08012154 	.word	0x08012154

0800e284 <sml_transport_write>:

int sml_transport_write(sml_file *file)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
    return sml_transport_write2(file, 0, esc_seq_default);
 800e28c:	4a04      	ldr	r2, [pc, #16]	; (800e2a0 <sml_transport_write+0x1c>)
 800e28e:	2100      	movs	r1, #0
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 f807 	bl	800e2a4 <sml_transport_write2>
 800e296:	4603      	mov	r3, r0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	20000290 	.word	0x20000290

0800e2a4 <sml_transport_write2>:

int sml_transport_write2(sml_file *file, int flags, unsigned char *esc_seq)
{
 800e2a4:	b590      	push	{r4, r7, lr}
 800e2a6:	b08b      	sub	sp, #44	; 0x2c
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	607a      	str	r2, [r7, #4]
	sml_buffer *bufMsg = NULL;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	61fb      	str	r3, [r7, #28]
	sml_buffer *bufTmp = NULL;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	627b      	str	r3, [r7, #36]	; 0x24
	size_t pos = 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	623b      	str	r3, [r7, #32]
	int padding;
	int rv = SML_OK;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	61bb      	str	r3, [r7, #24]
	u16 crc;

	if (!file || !file->buf || !esc_seq)
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d006      	beq.n	800e2d4 <sml_transport_write2+0x30>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d002      	beq.n	800e2d4 <sml_transport_write2+0x30>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d102      	bne.n	800e2da <sml_transport_write2+0x36>
	{
		return SML_PARAMETER_ERROR;
 800e2d4:	f240 33e6 	movw	r3, #998	; 0x3e6
 800e2d8:	e0fe      	b.n	800e4d8 <sml_transport_write2+0x234>
	}

	bufMsg = file->buf;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	61fb      	str	r3, [r7, #28]

	bufMsg->cursor = 0;
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	609a      	str	r2, [r3, #8]
	memset(bufMsg->buffer, 0, bufMsg->buffer_len);
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	6818      	ldr	r0, [r3, #0]
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	f002 f8a5 	bl	8010440 <memset>

	// serialize sml file
	rv = sml_file_write(file);
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f7fb fcd2 	bl	8009ca0 <sml_file_write>
 800e2fc:	61b8      	str	r0, [r7, #24]
	if (rv != SML_OK) goto error;
 800e2fe:	69bb      	ldr	r3, [r7, #24]
 800e300:	2b00      	cmp	r3, #0
 800e302:	f040 80e1 	bne.w	800e4c8 <sml_transport_write2+0x224>
	
	bufTmp = sml_buffer_init(2* bufMsg->cursor + 16, flags);
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	689b      	ldr	r3, [r3, #8]
 800e30a:	3308      	adds	r3, #8
 800e30c:	005b      	lsls	r3, r3, #1
 800e30e:	68b9      	ldr	r1, [r7, #8]
 800e310:	4618      	mov	r0, r3
 800e312:	f7ff f999 	bl	800d648 <sml_buffer_init>
 800e316:	6278      	str	r0, [r7, #36]	; 0x24
	if (!bufTmp)
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d102      	bne.n	800e324 <sml_transport_write2+0x80>
	{
		return SML_MALLOC_ERROR;
 800e31e:	f240 33e7 	movw	r3, #999	; 0x3e7
 800e322:	e0d9      	b.n	800e4d8 <sml_transport_write2+0x234>
	}

	// add start sequence
	memcpy(sml_buf_get_current_buf(bufTmp), esc_seq, 4);
 800e324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e326:	f7ff fb73 	bl	800da10 <sml_buf_get_current_buf>
 800e32a:	4602      	mov	r2, r0
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	6013      	str	r3, [r2, #0]
	bufTmp->cursor += 4;
 800e332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	1d1a      	adds	r2, r3, #4
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	609a      	str	r2, [r3, #8]
	memcpy(sml_buf_get_current_buf(bufTmp), start_seq, 4);
 800e33c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e33e:	f7ff fb67 	bl	800da10 <sml_buf_get_current_buf>
 800e342:	4602      	mov	r2, r0
 800e344:	4b66      	ldr	r3, [pc, #408]	; (800e4e0 <sml_transport_write2+0x23c>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6013      	str	r3, [r2, #0]
	bufTmp->cursor += 4;
 800e34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	1d1a      	adds	r2, r3, #4
 800e350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e352:	609a      	str	r2, [r3, #8]

	// add padding bytes to sml file
	padding = (bufMsg->cursor % 4) ? (4 - bufMsg->cursor % 4) : 0;
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	f003 0303 	and.w	r3, r3, #3
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d006      	beq.n	800e36e <sml_transport_write2+0xca>
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	f003 0303 	and.w	r3, r3, #3
 800e368:	f1c3 0304 	rsb	r3, r3, #4
 800e36c:	e000      	b.n	800e370 <sml_transport_write2+0xcc>
 800e36e:	2300      	movs	r3, #0
 800e370:	617b      	str	r3, [r7, #20]
	if (padding)
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00d      	beq.n	800e394 <sml_transport_write2+0xf0>
	{
		// write zeroed bytes
		memset(sml_buf_get_current_buf(bufMsg), 0, padding);
 800e378:	69f8      	ldr	r0, [r7, #28]
 800e37a:	f7ff fb49 	bl	800da10 <sml_buf_get_current_buf>
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	461a      	mov	r2, r3
 800e382:	2100      	movs	r1, #0
 800e384:	f002 f85c 	bl	8010440 <memset>
		bufMsg->cursor += padding;
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	689a      	ldr	r2, [r3, #8]
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	441a      	add	r2, r3
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	609a      	str	r2, [r3, #8]
	}

	// add message to sml transport file
	if (bufMsg->cursor > 4)
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	2b04      	cmp	r3, #4
 800e39a:	d942      	bls.n	800e422 <sml_transport_write2+0x17e>
	{
		pos = 0;
 800e39c:	2300      	movs	r3, #0
 800e39e:	623b      	str	r3, [r7, #32]
		while (pos <= bufMsg->cursor - 4)
 800e3a0:	e039      	b.n	800e416 <sml_transport_write2+0x172>
		{
			if (memcmp(&bufMsg->buffer[pos], esc_seq, 4) == 0)
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	6a3b      	ldr	r3, [r7, #32]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	2204      	movs	r2, #4
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f002 f82c 	bl	801040c <memcmp>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d11b      	bne.n	800e3f2 <sml_transport_write2+0x14e>
			{
				// found esc sequence
				memcpy(sml_buf_get_current_buf(bufTmp), esc_seq, 4);
 800e3ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3bc:	f7ff fb28 	bl	800da10 <sml_buf_get_current_buf>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	6013      	str	r3, [r2, #0]
				bufTmp->cursor += 4;
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ca:	689b      	ldr	r3, [r3, #8]
 800e3cc:	1d1a      	adds	r2, r3, #4
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	609a      	str	r2, [r3, #8]
				memcpy(sml_buf_get_current_buf(bufTmp), &bufMsg->buffer[pos], 4);
 800e3d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3d4:	f7ff fb1c 	bl	800da10 <sml_buf_get_current_buf>
 800e3d8:	4601      	mov	r1, r0
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	600b      	str	r3, [r1, #0]
				bufTmp->cursor += 4;
 800e3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	1d1a      	adds	r2, r3, #4
 800e3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ee:	609a      	str	r2, [r3, #8]
 800e3f0:	e00e      	b.n	800e410 <sml_transport_write2+0x16c>
			}
			else
			{
				memcpy(sml_buf_get_current_buf(bufTmp), &bufMsg->buffer[pos], 4);
 800e3f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3f4:	f7ff fb0c 	bl	800da10 <sml_buf_get_current_buf>
 800e3f8:	4601      	mov	r1, r0
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	4413      	add	r3, r2
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	600b      	str	r3, [r1, #0]
				bufTmp->cursor += 4;
 800e406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	1d1a      	adds	r2, r3, #4
 800e40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40e:	609a      	str	r2, [r3, #8]
			}
			pos += 4;
 800e410:	6a3b      	ldr	r3, [r7, #32]
 800e412:	3304      	adds	r3, #4
 800e414:	623b      	str	r3, [r7, #32]
		while (pos <= bufMsg->cursor - 4)
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	3b04      	subs	r3, #4
 800e41c:	6a3a      	ldr	r2, [r7, #32]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d9bf      	bls.n	800e3a2 <sml_transport_write2+0xfe>
		}
	}

	// begin end sequence
	memcpy(sml_buf_get_current_buf(bufTmp), esc_seq, 4);
 800e422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e424:	f7ff faf4 	bl	800da10 <sml_buf_get_current_buf>
 800e428:	4602      	mov	r2, r0
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	6013      	str	r3, [r2, #0]
	bufTmp->cursor += 4;
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	1d1a      	adds	r2, r3, #4
 800e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e438:	609a      	str	r2, [r3, #8]
	memcpy(sml_buf_get_current_buf(bufTmp), end_seq, 1);
 800e43a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e43c:	f7ff fae8 	bl	800da10 <sml_buf_get_current_buf>
 800e440:	4602      	mov	r2, r0
 800e442:	4b28      	ldr	r3, [pc, #160]	; (800e4e4 <sml_transport_write2+0x240>)
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	7013      	strb	r3, [r2, #0]
	bufTmp->cursor += 1;
 800e448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44a:	689b      	ldr	r3, [r3, #8]
 800e44c:	1c5a      	adds	r2, r3, #1
 800e44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e450:	609a      	str	r2, [r3, #8]

	// add padding info
	bufTmp->buffer[bufTmp->cursor++] = (unsigned char)padding;
 800e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	1c58      	adds	r0, r3, #1
 800e45c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e45e:	6088      	str	r0, [r1, #8]
 800e460:	4413      	add	r3, r2
 800e462:	697a      	ldr	r2, [r7, #20]
 800e464:	b2d2      	uxtb	r2, r2
 800e466:	701a      	strb	r2, [r3, #0]

	// add crc checksum
	crc = sml_crc16_calculate(bufTmp->buffer, bufTmp->cursor);
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	4619      	mov	r1, r3
 800e472:	4610      	mov	r0, r2
 800e474:	f7fb fb34 	bl	8009ae0 <sml_crc16_calculate>
 800e478:	4603      	mov	r3, r0
 800e47a:	827b      	strh	r3, [r7, #18]
	bufTmp->buffer[bufTmp->cursor++] = (unsigned char)((crc & 0xFF00) >> 8);
 800e47c:	8a7b      	ldrh	r3, [r7, #18]
 800e47e:	0a1b      	lsrs	r3, r3, #8
 800e480:	b29c      	uxth	r4, r3
 800e482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	1c58      	adds	r0, r3, #1
 800e48c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e48e:	6088      	str	r0, [r1, #8]
 800e490:	4413      	add	r3, r2
 800e492:	b2e2      	uxtb	r2, r4
 800e494:	701a      	strb	r2, [r3, #0]
	bufTmp->buffer[bufTmp->cursor++] = (unsigned char)(crc & 0x00FF);
 800e496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	1c58      	adds	r0, r3, #1
 800e4a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4a2:	6088      	str	r0, [r1, #8]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	8a7a      	ldrh	r2, [r7, #18]
 800e4a8:	b2d2      	uxtb	r2, r2
 800e4aa:	701a      	strb	r2, [r3, #0]

	memcpy(bufMsg->buffer, bufTmp->buffer, bufTmp->cursor);
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	6818      	ldr	r0, [r3, #0]
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	6819      	ldr	r1, [r3, #0]
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	f001 ffb6 	bl	801042a <memcpy>
	bufMsg->cursor = bufTmp->cursor;
 800e4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c0:	689a      	ldr	r2, [r3, #8]
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	609a      	str	r2, [r3, #8]
 800e4c6:	e000      	b.n	800e4ca <sml_transport_write2+0x226>
	if (rv != SML_OK) goto error;
 800e4c8:	bf00      	nop

error:
	if (bufTmp)
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <sml_transport_write2+0x232>
		sml_buffer_free(bufTmp);
 800e4d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4d2:	f7ff f949 	bl	800d768 <sml_buffer_free>

	return rv;
 800e4d6:	69bb      	ldr	r3, [r7, #24]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	372c      	adds	r7, #44	; 0x2c
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd90      	pop	{r4, r7, pc}
 800e4e0:	20000294 	.word	0x20000294
 800e4e4:	20000298 	.word	0x20000298

0800e4e8 <sml_tree_path_init>:
#include <sml/sml_log.h>

// sml_tree_path;

sml_tree_path *sml_tree_path_init()
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
	sml_tree_path *tree_path = (sml_tree_path *)malloc(sizeof(sml_tree_path));
 800e4ee:	2008      	movs	r0, #8
 800e4f0:	f7fa fdb6 	bl	8009060 <pvPortMalloc>
 800e4f4:	6078      	str	r0, [r7, #4]
	if (!tree_path)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d105      	bne.n	800e508 <sml_tree_path_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_tree_path));
 800e4fc:	2108      	movs	r1, #8
 800e4fe:	4807      	ldr	r0, [pc, #28]	; (800e51c <sml_tree_path_init+0x34>)
 800e500:	f7fd fce0 	bl	800bec4 <trace>
		return NULL;
 800e504:	2300      	movs	r3, #0
 800e506:	e005      	b.n	800e514 <sml_tree_path_init+0x2c>
	}
	memset(tree_path, 0, sizeof(sml_tree_path));
 800e508:	2208      	movs	r2, #8
 800e50a:	2100      	movs	r1, #0
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f001 ff97 	bl	8010440 <memset>
	
	return tree_path;
 800e512:	687b      	ldr	r3, [r7, #4]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	08012174 	.word	0x08012174

0800e520 <sml_tree_path_parse>:

sml_tree_path *sml_tree_path_parse(sml_buffer *buf)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
    sml_tree_path *tree_path = NULL;
 800e528:	2300      	movs	r3, #0
 800e52a:	613b      	str	r3, [r7, #16]
    octet_string *s = NULL;
 800e52c:	2300      	movs	r3, #0
 800e52e:	60fb      	str	r3, [r7, #12]
    int elems;

	if (!buf)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d101      	bne.n	800e53a <sml_tree_path_parse+0x1a>
	{
		return NULL;
 800e536:	2300      	movs	r3, #0
 800e538:	e056      	b.n	800e5e8 <sml_tree_path_parse+0xc8>
	}

	if (sml_buf_optional_is_skipped(buf))
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7ff faa5 	bl	800da8a <sml_buf_optional_is_skipped>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <sml_tree_path_parse+0x2a>
    {
		return NULL;
 800e546:	2300      	movs	r3, #0
 800e548:	e04e      	b.n	800e5e8 <sml_tree_path_parse+0xc8>
	}

	tree_path = sml_tree_path_init();
 800e54a:	f7ff ffcd 	bl	800e4e8 <sml_tree_path_init>
 800e54e:	6138      	str	r0, [r7, #16]
	if (!tree_path)
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d105      	bne.n	800e562 <sml_tree_path_parse+0x42>
    {
		buf->error = SML_MALLOC_ERROR;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e55c:	611a      	str	r2, [r3, #16]
		return NULL;
 800e55e:	2300      	movs	r3, #0
 800e560:	e042      	b.n	800e5e8 <sml_tree_path_parse+0xc8>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff fa31 	bl	800d9ca <sml_buf_get_next_type>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b70      	cmp	r3, #112	; 0x70
 800e56c:	d004      	beq.n	800e578 <sml_tree_path_parse+0x58>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2232      	movs	r2, #50	; 0x32
 800e572:	611a      	str	r2, [r3, #16]
		return NULL;
 800e574:	2300      	movs	r3, #0
 800e576:	e037      	b.n	800e5e8 <sml_tree_path_parse+0xc8>
	}

	elems = sml_buf_get_next_length(buf);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7ff f915 	bl	800d7a8 <sml_buf_get_next_length>
 800e57e:	6178      	str	r0, [r7, #20]

	if (sml_debug_output(buf))
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7ff fa97 	bl	800dab4 <sml_debug_output>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d023      	beq.n	800e5d4 <sml_tree_path_parse+0xb4>
    {
		trace("\t\tTREE PATH\t%i\r\n", elems);
 800e58c:	6979      	ldr	r1, [r7, #20]
 800e58e:	4818      	ldr	r0, [pc, #96]	; (800e5f0 <sml_tree_path_parse+0xd0>)
 800e590:	f7fd fc98 	bl	800bec4 <trace>
	}

	for (elems; elems > 0; elems--)
 800e594:	e01e      	b.n	800e5d4 <sml_tree_path_parse+0xb4>
    {
		s = sml_octet_string_parse(buf);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7fe fba0 	bl	800ccdc <sml_octet_string_parse>
 800e59c:	60f8      	str	r0, [r7, #12]
		if (sml_buf_has_errors(buf)) goto error;
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fa02 	bl	800d9a8 <sml_buf_has_errors>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d119      	bne.n	800e5de <sml_tree_path_parse+0xbe>
		if (s)
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00e      	beq.n	800e5ce <sml_tree_path_parse+0xae>
        {
			int rv = sml_tree_path_add_path_entry(tree_path, s);
 800e5b0:	68f9      	ldr	r1, [r7, #12]
 800e5b2:	6938      	ldr	r0, [r7, #16]
 800e5b4:	f000 f898 	bl	800e6e8 <sml_tree_path_add_path_entry>
 800e5b8:	60b8      	str	r0, [r7, #8]
			if (rv == SML_MALLOC_ERROR)
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d104      	bne.n	800e5ce <sml_tree_path_parse+0xae>
			{
				buf->error = SML_MALLOC_ERROR;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e5ca:	611a      	str	r2, [r3, #16]
				goto error;
 800e5cc:	e008      	b.n	800e5e0 <sml_tree_path_parse+0xc0>
	for (elems; elems > 0; elems--)
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	617b      	str	r3, [r7, #20]
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	dcdd      	bgt.n	800e596 <sml_tree_path_parse+0x76>
			}
		}
	}

	return tree_path;
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	e004      	b.n	800e5e8 <sml_tree_path_parse+0xc8>
		if (sml_buf_has_errors(buf)) goto error;
 800e5de:	bf00      	nop

error:
	sml_tree_path_free(tree_path);
 800e5e0:	6938      	ldr	r0, [r7, #16]
 800e5e2:	f000 f852 	bl	800e68a <sml_tree_path_free>
	return NULL;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3718      	adds	r7, #24
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	08012190 	.word	0x08012190

0800e5f4 <sml_tree_path_write>:

int sml_tree_path_write(sml_tree_path *tree_path, sml_buffer *buf)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
	int rv = SML_OK;
 800e5fe:	2300      	movs	r3, #0
 800e600:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d102      	bne.n	800e60e <sml_tree_path_write+0x1a>
	{
		return SML_PARAMETER_ERROR;
 800e608:	f240 33e6 	movw	r3, #998	; 0x3e6
 800e60c:	e039      	b.n	800e682 <sml_tree_path_write+0x8e>
	}

	if (tree_path == 0)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d105      	bne.n	800e620 <sml_tree_path_write+0x2c>
    {
		rv = sml_buf_optional_write(buf);
 800e614:	6838      	ldr	r0, [r7, #0]
 800e616:	f7ff fa1b 	bl	800da50 <sml_buf_optional_write>
 800e61a:	60f8      	str	r0, [r7, #12]
		return rv;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	e030      	b.n	800e682 <sml_tree_path_write+0x8e>
	}

	if (tree_path->path_entries && tree_path->path_entries_len > 0)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d02b      	beq.n	800e680 <sml_tree_path_write+0x8c>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	dd27      	ble.n	800e680 <sml_tree_path_write+0x8c>
    {
        int i;

        rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, tree_path->path_entries_len);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	461a      	mov	r2, r3
 800e636:	2170      	movs	r1, #112	; 0x70
 800e638:	6838      	ldr	r0, [r7, #0]
 800e63a:	f7ff f917 	bl	800d86c <sml_buf_set_type_and_length>
 800e63e:	60f8      	str	r0, [r7, #12]
		if (rv != SML_OK) return rv;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d001      	beq.n	800e64a <sml_tree_path_write+0x56>
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	e01b      	b.n	800e682 <sml_tree_path_write+0x8e>
		
		for (i = 0; i < tree_path->path_entries_len; i++)
 800e64a:	2300      	movs	r3, #0
 800e64c:	60bb      	str	r3, [r7, #8]
 800e64e:	e012      	b.n	800e676 <sml_tree_path_write+0x82>
        {
			rv = sml_octet_string_write(tree_path->path_entries[i], buf);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	685a      	ldr	r2, [r3, #4]
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6839      	ldr	r1, [r7, #0]
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fe fb88 	bl	800cd74 <sml_octet_string_write>
 800e664:	60f8      	str	r0, [r7, #12]
			if (rv != SML_OK) return rv;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d001      	beq.n	800e670 <sml_tree_path_write+0x7c>
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	e008      	b.n	800e682 <sml_tree_path_write+0x8e>
		for (i = 0; i < tree_path->path_entries_len; i++)
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	3301      	adds	r3, #1
 800e674:	60bb      	str	r3, [r7, #8]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	68ba      	ldr	r2, [r7, #8]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	dbe7      	blt.n	800e650 <sml_tree_path_write+0x5c>
		}
	}

	return rv;
 800e680:	68fb      	ldr	r3, [r7, #12]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <sml_tree_path_free>:

void sml_tree_path_free(sml_tree_path *tree_path)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b084      	sub	sp, #16
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
	if (tree_path)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d023      	beq.n	800e6e0 <sml_tree_path_free+0x56>
    {
		if (tree_path->path_entries && tree_path->path_entries_len > 0)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d01c      	beq.n	800e6da <sml_tree_path_free+0x50>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	dd18      	ble.n	800e6da <sml_tree_path_free+0x50>
        {
			int i;
			for (i = 0; i < tree_path->path_entries_len; i++)
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	60fb      	str	r3, [r7, #12]
 800e6ac:	e00b      	b.n	800e6c6 <sml_tree_path_free+0x3c>
            {
				sml_octet_string_free(tree_path->path_entries[i]);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	685a      	ldr	r2, [r3, #4]
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	4413      	add	r3, r2
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fe fb9f 	bl	800cdfe <sml_octet_string_free>
			for (i = 0; i < tree_path->path_entries_len; i++)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	60fb      	str	r3, [r7, #12]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	dbee      	blt.n	800e6ae <sml_tree_path_free+0x24>
			}

			free(tree_path->path_entries);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fa fd85 	bl	80091e4 <vPortFree>
		}

		free(tree_path);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7fa fd82 	bl	80091e4 <vPortFree>
	}
}
 800e6e0:	bf00      	nop
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <sml_tree_path_add_path_entry>:

int sml_tree_path_add_path_entry(sml_tree_path *tree_path, octet_string *entry)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
	tree_path->path_entries_len++;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	1c5a      	adds	r2, r3, #1
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	601a      	str	r2, [r3, #0]
	tree_path->path_entries = (octet_string **)realloc(tree_path->path_entries, sizeof(octet_string *) * tree_path->path_entries_len);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	685a      	ldr	r2, [r3, #4]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	4619      	mov	r1, r3
 800e708:	4610      	mov	r0, r2
 800e70a:	f7fa fdc3 	bl	8009294 <pvPortRealloc>
 800e70e:	4602      	mov	r2, r0
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	605a      	str	r2, [r3, #4]
	if (!tree_path->path_entries)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d109      	bne.n	800e730 <sml_tree_path_add_path_entry+0x48>
	{
		trace("ERROR: realloc %ld bytes\n", sizeof(octet_string *) * tree_path->path_entries_len);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4619      	mov	r1, r3
 800e724:	480a      	ldr	r0, [pc, #40]	; (800e750 <sml_tree_path_add_path_entry+0x68>)
 800e726:	f7fd fbcd 	bl	800bec4 <trace>
		return SML_MALLOC_ERROR;
 800e72a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800e72e:	e00b      	b.n	800e748 <sml_tree_path_add_path_entry+0x60>
	}

	tree_path->path_entries[tree_path->path_entries_len - 1] = entry;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685a      	ldr	r2, [r3, #4]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e73c:	3b01      	subs	r3, #1
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	4413      	add	r3, r2
 800e742:	683a      	ldr	r2, [r7, #0]
 800e744:	601a      	str	r2, [r3, #0]

	return SML_OK;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	080121a4 	.word	0x080121a4

0800e754 <sml_tree_init>:

// sml_tree;

sml_tree *sml_tree_init(void)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
	sml_tree *tree = (sml_tree *)malloc(sizeof(sml_tree));
 800e75a:	2010      	movs	r0, #16
 800e75c:	f7fa fc80 	bl	8009060 <pvPortMalloc>
 800e760:	6078      	str	r0, [r7, #4]
	if (!tree)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d105      	bne.n	800e774 <sml_tree_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_tree));
 800e768:	2110      	movs	r1, #16
 800e76a:	4807      	ldr	r0, [pc, #28]	; (800e788 <sml_tree_init+0x34>)
 800e76c:	f7fd fbaa 	bl	800bec4 <trace>
		return NULL;
 800e770:	2300      	movs	r3, #0
 800e772:	e005      	b.n	800e780 <sml_tree_init+0x2c>
	}
	memset(tree, 0, sizeof(sml_tree));
 800e774:	2210      	movs	r2, #16
 800e776:	2100      	movs	r1, #0
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f001 fe61 	bl	8010440 <memset>
	
	return tree;
 800e77e:	687b      	ldr	r3, [r7, #4]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	08012174 	.word	0x08012174

0800e78c <sml_tree_parse>:

sml_tree *sml_tree_parse(sml_buffer *buf)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b086      	sub	sp, #24
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
    sml_tree *tree = NULL;
 800e794:	2300      	movs	r3, #0
 800e796:	613b      	str	r3, [r7, #16]

	if (!buf)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d101      	bne.n	800e7a2 <sml_tree_parse+0x16>
	{
		return NULL;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	e096      	b.n	800e8d0 <sml_tree_parse+0x144>
	}

	if (sml_buf_optional_is_skipped(buf))
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f7ff f971 	bl	800da8a <sml_buf_optional_is_skipped>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d001      	beq.n	800e7b2 <sml_tree_parse+0x26>
    {
		return NULL;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	e08e      	b.n	800e8d0 <sml_tree_parse+0x144>
	}

	tree = sml_tree_init();
 800e7b2:	f7ff ffcf 	bl	800e754 <sml_tree_init>
 800e7b6:	6138      	str	r0, [r7, #16]
	if (!tree)
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d105      	bne.n	800e7ca <sml_tree_parse+0x3e>
    {
		buf->error = SML_MALLOC_ERROR;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e7c4:	611a      	str	r2, [r3, #16]
		return NULL;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	e082      	b.n	800e8d0 <sml_tree_parse+0x144>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff f8fd 	bl	800d9ca <sml_buf_get_next_type>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	2b70      	cmp	r3, #112	; 0x70
 800e7d4:	d003      	beq.n	800e7de <sml_tree_parse+0x52>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2232      	movs	r2, #50	; 0x32
 800e7da:	611a      	str	r2, [r3, #16]
		goto error;
 800e7dc:	e074      	b.n	800e8c8 <sml_tree_parse+0x13c>
	}

	if (sml_buf_get_next_length(buf) != 3)
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7fe ffe2 	bl	800d7a8 <sml_buf_get_next_length>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	2b03      	cmp	r3, #3
 800e7e8:	d003      	beq.n	800e7f2 <sml_tree_parse+0x66>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2220      	movs	r2, #32
 800e7ee:	611a      	str	r2, [r3, #16]
		goto error;
 800e7f0:	e06a      	b.n	800e8c8 <sml_tree_parse+0x13c>
	}

	if (sml_debug_output(buf))
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f7ff f95e 	bl	800dab4 <sml_debug_output>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d002      	beq.n	800e804 <sml_tree_parse+0x78>
    {
		trace("\t\tTREE\r\n");
 800e7fe:	4836      	ldr	r0, [pc, #216]	; (800e8d8 <sml_tree_parse+0x14c>)
 800e800:	f7fd fb60 	bl	800bec4 <trace>
	}

	tree->parameter_name = sml_octet_string_parse(buf);
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f7fe fa69 	bl	800ccdc <sml_octet_string_parse>
 800e80a:	4602      	mov	r2, r0
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7ff f8c9 	bl	800d9a8 <sml_buf_has_errors>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d150      	bne.n	800e8be <sml_tree_parse+0x132>

	tree->parameter_value = sml_proc_par_value_parse(buf);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f000 f959 	bl	800ead4 <sml_proc_par_value_parse>
 800e822:	4602      	mov	r2, r0
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7ff f8bd 	bl	800d9a8 <sml_buf_has_errors>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d146      	bne.n	800e8c2 <sml_tree_parse+0x136>

	if (!sml_buf_optional_is_skipped(buf))
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f7ff f928 	bl	800da8a <sml_buf_optional_is_skipped>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d13c      	bne.n	800e8ba <sml_tree_parse+0x12e>
    {
        sml_tree *c = NULL;
 800e840:	2300      	movs	r3, #0
 800e842:	60fb      	str	r3, [r7, #12]
        int elems;
        
        if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7ff f8c0 	bl	800d9ca <sml_buf_get_next_type>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2b70      	cmp	r3, #112	; 0x70
 800e84e:	d003      	beq.n	800e858 <sml_tree_parse+0xcc>
        {
			buf->error = SML_TYPE_LIST_EXPECTED;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2232      	movs	r2, #50	; 0x32
 800e854:	611a      	str	r2, [r3, #16]
			goto error;
 800e856:	e037      	b.n	800e8c8 <sml_tree_parse+0x13c>
		}

		elems = sml_buf_get_next_length(buf);
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7fe ffa5 	bl	800d7a8 <sml_buf_get_next_length>
 800e85e:	6178      	str	r0, [r7, #20]

		if (sml_debug_output(buf))
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7ff f927 	bl	800dab4 <sml_debug_output>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d023      	beq.n	800e8b4 <sml_tree_parse+0x128>
        {
			trace("\t\tTREE child_list\t%i\r\n", elems);
 800e86c:	6979      	ldr	r1, [r7, #20]
 800e86e:	481b      	ldr	r0, [pc, #108]	; (800e8dc <sml_tree_parse+0x150>)
 800e870:	f7fd fb28 	bl	800bec4 <trace>
		}

		for (elems; elems > 0; elems--)
 800e874:	e01e      	b.n	800e8b4 <sml_tree_parse+0x128>
        {
			c = sml_tree_parse(buf);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7ff ff88 	bl	800e78c <sml_tree_parse>
 800e87c:	60f8      	str	r0, [r7, #12]
			if (sml_buf_has_errors(buf)) goto error;
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f7ff f892 	bl	800d9a8 <sml_buf_has_errors>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d11d      	bne.n	800e8c6 <sml_tree_parse+0x13a>
			if (c)
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d00e      	beq.n	800e8ae <sml_tree_parse+0x122>
            {
				int rv = sml_tree_add_tree(tree, c);
 800e890:	68f9      	ldr	r1, [r7, #12]
 800e892:	6938      	ldr	r0, [r7, #16]
 800e894:	f000 f8cc 	bl	800ea30 <sml_tree_add_tree>
 800e898:	60b8      	str	r0, [r7, #8]
				if (rv == SML_MALLOC_ERROR)
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d104      	bne.n	800e8ae <sml_tree_parse+0x122>
				{
					buf->error = SML_MALLOC_ERROR;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e8aa:	611a      	str	r2, [r3, #16]
					goto error;
 800e8ac:	e00c      	b.n	800e8c8 <sml_tree_parse+0x13c>
		for (elems; elems > 0; elems--)
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	617b      	str	r3, [r7, #20]
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	dcdd      	bgt.n	800e876 <sml_tree_parse+0xea>
				}
			}
		}
	}

	return tree;
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	e008      	b.n	800e8d0 <sml_tree_parse+0x144>
	if (sml_buf_has_errors(buf)) goto error;
 800e8be:	bf00      	nop
 800e8c0:	e002      	b.n	800e8c8 <sml_tree_parse+0x13c>
	if (sml_buf_has_errors(buf)) goto error;
 800e8c2:	bf00      	nop
 800e8c4:	e000      	b.n	800e8c8 <sml_tree_parse+0x13c>
			if (sml_buf_has_errors(buf)) goto error;
 800e8c6:	bf00      	nop

error:
	sml_tree_free(tree);
 800e8c8:	6938      	ldr	r0, [r7, #16]
 800e8ca:	f000 f87f 	bl	800e9cc <sml_tree_free>
	return NULL;
 800e8ce:	2300      	movs	r3, #0
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3718      	adds	r7, #24
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	080121c0 	.word	0x080121c0
 800e8dc:	080121cc 	.word	0x080121cc

0800e8e0 <sml_tree_write>:

int sml_tree_write(sml_tree *tree, sml_buffer *buf)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
	int rv;

	if (!buf)
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d102      	bne.n	800e8f6 <sml_tree_write+0x16>
	{
		return SML_PARAMETER_ERROR;
 800e8f0:	f240 33e6 	movw	r3, #998	; 0x3e6
 800e8f4:	e066      	b.n	800e9c4 <sml_tree_write+0xe4>
	}

	if (tree == 0)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d105      	bne.n	800e908 <sml_tree_write+0x28>
    {
		rv = sml_buf_optional_write(buf);
 800e8fc:	6838      	ldr	r0, [r7, #0]
 800e8fe:	f7ff f8a7 	bl	800da50 <sml_buf_optional_write>
 800e902:	60f8      	str	r0, [r7, #12]
		return rv;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	e05d      	b.n	800e9c4 <sml_tree_write+0xe4>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 3);
 800e908:	2203      	movs	r2, #3
 800e90a:	2170      	movs	r1, #112	; 0x70
 800e90c:	6838      	ldr	r0, [r7, #0]
 800e90e:	f7fe ffad 	bl	800d86c <sml_buf_set_type_and_length>
 800e912:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d001      	beq.n	800e91e <sml_tree_write+0x3e>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	e052      	b.n	800e9c4 <sml_tree_write+0xe4>

	rv = sml_octet_string_write(tree->parameter_name, buf);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	6839      	ldr	r1, [r7, #0]
 800e924:	4618      	mov	r0, r3
 800e926:	f7fe fa25 	bl	800cd74 <sml_octet_string_write>
 800e92a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d001      	beq.n	800e936 <sml_tree_write+0x56>
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	e046      	b.n	800e9c4 <sml_tree_write+0xe4>

	rv = sml_proc_par_value_write(tree->parameter_value, buf);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	6839      	ldr	r1, [r7, #0]
 800e93c:	4618      	mov	r0, r3
 800e93e:	f000 f965 	bl	800ec0c <sml_proc_par_value_write>
 800e942:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d001      	beq.n	800e94e <sml_tree_write+0x6e>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	e03a      	b.n	800e9c4 <sml_tree_write+0xe4>

	if (tree->child_list && tree->child_list_len > 0)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d02c      	beq.n	800e9b0 <sml_tree_write+0xd0>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	dd28      	ble.n	800e9b0 <sml_tree_write+0xd0>
    {
        int i;
        
        rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, tree->child_list_len);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	461a      	mov	r2, r3
 800e964:	2170      	movs	r1, #112	; 0x70
 800e966:	6838      	ldr	r0, [r7, #0]
 800e968:	f7fe ff80 	bl	800d86c <sml_buf_set_type_and_length>
 800e96c:	60f8      	str	r0, [r7, #12]
		if (rv != SML_OK) return rv;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d001      	beq.n	800e978 <sml_tree_write+0x98>
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	e025      	b.n	800e9c4 <sml_tree_write+0xe4>

		for (i = 0; i < tree->child_list_len; i++)
 800e978:	2300      	movs	r3, #0
 800e97a:	60bb      	str	r3, [r7, #8]
 800e97c:	e012      	b.n	800e9a4 <sml_tree_write+0xc4>
        {
			rv = sml_tree_write(tree->child_list[i], buf);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	689a      	ldr	r2, [r3, #8]
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	4413      	add	r3, r2
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	6839      	ldr	r1, [r7, #0]
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7ff ffa7 	bl	800e8e0 <sml_tree_write>
 800e992:	60f8      	str	r0, [r7, #12]
			if (rv != SML_OK) return rv;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <sml_tree_write+0xbe>
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	e012      	b.n	800e9c4 <sml_tree_write+0xe4>
		for (i = 0; i < tree->child_list_len; i++)
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	60bb      	str	r3, [r7, #8]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	68ba      	ldr	r2, [r7, #8]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	dbe7      	blt.n	800e97e <sml_tree_write+0x9e>
    {
 800e9ae:	e008      	b.n	800e9c2 <sml_tree_write+0xe2>
		}
	}
	else
    {
		rv = sml_buf_optional_write(buf);
 800e9b0:	6838      	ldr	r0, [r7, #0]
 800e9b2:	f7ff f84d 	bl	800da50 <sml_buf_optional_write>
 800e9b6:	60f8      	str	r0, [r7, #12]
		if (rv != SML_OK) return rv;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d001      	beq.n	800e9c2 <sml_tree_write+0xe2>
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	e000      	b.n	800e9c4 <sml_tree_write+0xe4>
	}

	return rv;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <sml_tree_free>:

void sml_tree_free(sml_tree *tree)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
	if (tree)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d025      	beq.n	800ea26 <sml_tree_free+0x5a>
    {
        int i;
        
        sml_octet_string_free(tree->parameter_name);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fe fa0d 	bl	800cdfe <sml_octet_string_free>
		sml_proc_par_value_free(tree->parameter_value);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 f98d 	bl	800ed08 <sml_proc_par_value_free>

		for (i = 0; i < tree->child_list_len; i++)
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	60fb      	str	r3, [r7, #12]
 800e9f2:	e00b      	b.n	800ea0c <sml_tree_free+0x40>
        {
			sml_tree_free(tree->child_list[i]);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	689a      	ldr	r2, [r3, #8]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7ff ffe3 	bl	800e9cc <sml_tree_free>
		for (i = 0; i < tree->child_list_len; i++)
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	3301      	adds	r3, #1
 800ea0a:	60fb      	str	r3, [r7, #12]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	dbee      	blt.n	800e9f4 <sml_tree_free+0x28>
		}

		free(tree->child_list);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	689b      	ldr	r3, [r3, #8]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fa fbe2 	bl	80091e4 <vPortFree>
		free(tree);
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f7fa fbdf 	bl	80091e4 <vPortFree>
	}
}
 800ea26:	bf00      	nop
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
	...

0800ea30 <sml_tree_add_tree>:

int sml_tree_add_tree(sml_tree *base_tree, sml_tree *tree)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
	base_tree->child_list_len++;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	1c5a      	adds	r2, r3, #1
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	60da      	str	r2, [r3, #12]
	base_tree->child_list = (sml_tree **)realloc(base_tree->child_list, sizeof(sml_tree *) * base_tree->child_list_len);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	689a      	ldr	r2, [r3, #8]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	009b      	lsls	r3, r3, #2
 800ea4e:	4619      	mov	r1, r3
 800ea50:	4610      	mov	r0, r2
 800ea52:	f7fa fc1f 	bl	8009294 <pvPortRealloc>
 800ea56:	4602      	mov	r2, r0
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	609a      	str	r2, [r3, #8]
	if (!base_tree->child_list)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d109      	bne.n	800ea78 <sml_tree_add_tree+0x48>
	{
		trace("ERROR: realloc %ld bytes\n", sizeof(sml_tree *) * base_tree->child_list_len);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68db      	ldr	r3, [r3, #12]
 800ea68:	009b      	lsls	r3, r3, #2
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	480a      	ldr	r0, [pc, #40]	; (800ea98 <sml_tree_add_tree+0x68>)
 800ea6e:	f7fd fa29 	bl	800bec4 <trace>
		return SML_MALLOC_ERROR;
 800ea72:	f240 33e7 	movw	r3, #999	; 0x3e7
 800ea76:	e00b      	b.n	800ea90 <sml_tree_add_tree+0x60>
	}
	base_tree->child_list[base_tree->child_list_len - 1] = tree;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	689a      	ldr	r2, [r3, #8]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ea84:	3b01      	subs	r3, #1
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	4413      	add	r3, r2
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	601a      	str	r2, [r3, #0]

	return SML_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	080121a4 	.word	0x080121a4

0800ea9c <sml_proc_par_value_init>:

// sml_proc_par_value;

sml_proc_par_value *sml_proc_par_value_init(void)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
	sml_proc_par_value *value = (sml_proc_par_value *)malloc(sizeof(sml_proc_par_value));
 800eaa2:	2008      	movs	r0, #8
 800eaa4:	f7fa fadc 	bl	8009060 <pvPortMalloc>
 800eaa8:	6078      	str	r0, [r7, #4]
	if (!value)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d105      	bne.n	800eabc <sml_proc_par_value_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_proc_par_value));
 800eab0:	2108      	movs	r1, #8
 800eab2:	4807      	ldr	r0, [pc, #28]	; (800ead0 <sml_proc_par_value_init+0x34>)
 800eab4:	f7fd fa06 	bl	800bec4 <trace>
		return NULL;
 800eab8:	2300      	movs	r3, #0
 800eaba:	e005      	b.n	800eac8 <sml_proc_par_value_init+0x2c>
	}
	memset(value, 0, sizeof(sml_proc_par_value));
 800eabc:	2208      	movs	r2, #8
 800eabe:	2100      	movs	r1, #0
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f001 fcbd 	bl	8010440 <memset>
	
	return value;
 800eac6:	687b      	ldr	r3, [r7, #4]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	08012174 	.word	0x08012174

0800ead4 <sml_proc_par_value_parse>:

sml_proc_par_value *sml_proc_par_value_parse(sml_buffer *buf)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
    sml_proc_par_value *ppv = NULL;
 800eadc:	2300      	movs	r3, #0
 800eade:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d101      	bne.n	800eaea <sml_proc_par_value_parse+0x16>
	{
		return NULL;
 800eae6:	2300      	movs	r3, #0
 800eae8:	e08a      	b.n	800ec00 <sml_proc_par_value_parse+0x12c>
	}

	if (sml_buf_optional_is_skipped(buf))
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f7fe ffcd 	bl	800da8a <sml_buf_optional_is_skipped>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d001      	beq.n	800eafa <sml_proc_par_value_parse+0x26>
    {
		return NULL;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	e082      	b.n	800ec00 <sml_proc_par_value_parse+0x12c>
	}

	ppv = sml_proc_par_value_init();
 800eafa:	f7ff ffcf 	bl	800ea9c <sml_proc_par_value_init>
 800eafe:	60f8      	str	r0, [r7, #12]
	if (!ppv)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d105      	bne.n	800eb12 <sml_proc_par_value_parse+0x3e>
    {
		buf->error = SML_MALLOC_ERROR;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f240 32e7 	movw	r2, #999	; 0x3e7
 800eb0c:	611a      	str	r2, [r3, #16]
		return NULL;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	e076      	b.n	800ec00 <sml_proc_par_value_parse+0x12c>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7fe ff59 	bl	800d9ca <sml_buf_get_next_type>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2b70      	cmp	r3, #112	; 0x70
 800eb1c:	d003      	beq.n	800eb26 <sml_proc_par_value_parse+0x52>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2232      	movs	r2, #50	; 0x32
 800eb22:	611a      	str	r2, [r3, #16]
		goto error;
 800eb24:	e068      	b.n	800ebf8 <sml_proc_par_value_parse+0x124>
	}

	if (sml_buf_get_next_length(buf) != 2)
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f7fe fe3e 	bl	800d7a8 <sml_buf_get_next_length>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	2b02      	cmp	r3, #2
 800eb30:	d003      	beq.n	800eb3a <sml_proc_par_value_parse+0x66>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2220      	movs	r2, #32
 800eb36:	611a      	str	r2, [r3, #16]
		goto error;
 800eb38:	e05e      	b.n	800ebf8 <sml_proc_par_value_parse+0x124>
	}

	ppv->tag = sml_u8_parse(buf);
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	2160      	movs	r1, #96	; 0x60
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f7fd feda 	bl	800c8f8 <sml_number_parse>
 800eb44:	4602      	mov	r2, r0
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7fe ff2c 	bl	800d9a8 <sml_buf_has_errors>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d14d      	bne.n	800ebf2 <sml_proc_par_value_parse+0x11e>
	if (!ppv->tag) goto error;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d04b      	beq.n	800ebf6 <sml_proc_par_value_parse+0x122>

	if (sml_debug_output(buf))
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7fe ffa8 	bl	800dab4 <sml_debug_output>
 800eb64:	4603      	mov	r3, r0
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d006      	beq.n	800eb78 <sml_proc_par_value_parse+0xa4>
    {
		trace("\t\tPROC PAR VALUE\t%i\r\n", *(ppv->tag));
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	4619      	mov	r1, r3
 800eb72:	4825      	ldr	r0, [pc, #148]	; (800ec08 <sml_proc_par_value_parse+0x134>)
 800eb74:	f7fd f9a6 	bl	800bec4 <trace>
	}

	switch (*(ppv->tag))
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	3b01      	subs	r3, #1
 800eb80:	2b04      	cmp	r3, #4
 800eb82:	d830      	bhi.n	800ebe6 <sml_proc_par_value_parse+0x112>
 800eb84:	a201      	add	r2, pc, #4	; (adr r2, 800eb8c <sml_proc_par_value_parse+0xb8>)
 800eb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8a:	bf00      	nop
 800eb8c:	0800eba1 	.word	0x0800eba1
 800eb90:	0800ebaf 	.word	0x0800ebaf
 800eb94:	0800ebbd 	.word	0x0800ebbd
 800eb98:	0800ebcb 	.word	0x0800ebcb
 800eb9c:	0800ebd9 	.word	0x0800ebd9
    {
		case SML_PROC_PAR_VALUE_TAG_VALUE:
			ppv->data.value = sml_value_parse(buf);
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f001 faf3 	bl	801018c <sml_value_parse>
 800eba6:	4602      	mov	r2, r0
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	605a      	str	r2, [r3, #4]
			break;
 800ebac:	e01f      	b.n	800ebee <sml_proc_par_value_parse+0x11a>
		case SML_PROC_PAR_VALUE_TAG_PERIOD_ENTRY:
			ppv->data.period_entry = sml_period_entry_parse(buf);
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 fcca 	bl	800f548 <sml_period_entry_parse>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	605a      	str	r2, [r3, #4]
			break;
 800ebba:	e018      	b.n	800ebee <sml_proc_par_value_parse+0x11a>
		case SML_PROC_PAR_VALUE_TAG_TUPEL_ENTRY:
			ppv->data.tupel_entry = sml_tupel_entry_parse(buf);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f000 f91b 	bl	800edf8 <sml_tupel_entry_parse>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	605a      	str	r2, [r3, #4]
			break;
 800ebc8:	e011      	b.n	800ebee <sml_proc_par_value_parse+0x11a>
		case SML_PROC_PAR_VALUE_TAG_TIME:
			ppv->data.time = sml_time_parse(buf);
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f7ff f962 	bl	800de94 <sml_time_parse>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	605a      	str	r2, [r3, #4]
			break;
 800ebd6:	e00a      	b.n	800ebee <sml_proc_par_value_parse+0x11a>
		case SML_PROC_PAR_VALUE_TAG_LIST_ENTRY:
			ppv->data.list_entry = sml_list_entry_parse(buf);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7fc ff67 	bl	800baac <sml_list_entry_parse>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	605a      	str	r2, [r3, #4]
			break;
 800ebe4:	e003      	b.n	800ebee <sml_proc_par_value_parse+0x11a>
		default:
			buf->error = SML_PROC_PAR_VALUE_TAG_MISMATCH;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2266      	movs	r2, #102	; 0x66
 800ebea:	611a      	str	r2, [r3, #16]
			goto error;
 800ebec:	e004      	b.n	800ebf8 <sml_proc_par_value_parse+0x124>
	}

	return ppv;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	e006      	b.n	800ec00 <sml_proc_par_value_parse+0x12c>
	if (sml_buf_has_errors(buf)) goto error;
 800ebf2:	bf00      	nop
 800ebf4:	e000      	b.n	800ebf8 <sml_proc_par_value_parse+0x124>
	if (!ppv->tag) goto error;
 800ebf6:	bf00      	nop

error:
	sml_proc_par_value_free(ppv);
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	f000 f885 	bl	800ed08 <sml_proc_par_value_free>
	return NULL;
 800ebfe:	2300      	movs	r3, #0
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	080121e4 	.word	0x080121e4

0800ec0c <sml_proc_par_value_write>:

int sml_proc_par_value_write(sml_proc_par_value *value, sml_buffer *buf)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
	int rv;

	if (!buf)
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d102      	bne.n	800ec22 <sml_proc_par_value_write+0x16>
	{
		return SML_PARAMETER_ERROR;
 800ec1c:	f240 33e6 	movw	r3, #998	; 0x3e6
 800ec20:	e06a      	b.n	800ecf8 <sml_proc_par_value_write+0xec>
	}

	if (value == 0)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d105      	bne.n	800ec34 <sml_proc_par_value_write+0x28>
    {
		rv = sml_buf_optional_write(buf);
 800ec28:	6838      	ldr	r0, [r7, #0]
 800ec2a:	f7fe ff11 	bl	800da50 <sml_buf_optional_write>
 800ec2e:	60f8      	str	r0, [r7, #12]
		return rv;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	e061      	b.n	800ecf8 <sml_proc_par_value_write+0xec>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 2);
 800ec34:	2202      	movs	r2, #2
 800ec36:	2170      	movs	r1, #112	; 0x70
 800ec38:	6838      	ldr	r0, [r7, #0]
 800ec3a:	f7fe fe17 	bl	800d86c <sml_buf_set_type_and_length>
 800ec3e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d001      	beq.n	800ec4a <sml_proc_par_value_write+0x3e>
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	e056      	b.n	800ecf8 <sml_proc_par_value_write+0xec>

	rv = sml_u8_write(value->tag, buf);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6818      	ldr	r0, [r3, #0]
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	2201      	movs	r2, #1
 800ec52:	2160      	movs	r1, #96	; 0x60
 800ec54:	f7fd fef2 	bl	800ca3c <sml_number_write>
 800ec58:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d001      	beq.n	800ec64 <sml_proc_par_value_write+0x58>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	e049      	b.n	800ecf8 <sml_proc_par_value_write+0xec>

	switch (*(value->tag))
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	2b04      	cmp	r3, #4
 800ec6e:	d835      	bhi.n	800ecdc <sml_proc_par_value_write+0xd0>
 800ec70:	a201      	add	r2, pc, #4	; (adr r2, 800ec78 <sml_proc_par_value_write+0x6c>)
 800ec72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec76:	bf00      	nop
 800ec78:	0800ec8d 	.word	0x0800ec8d
 800ec7c:	0800ec9d 	.word	0x0800ec9d
 800ec80:	0800ecad 	.word	0x0800ecad
 800ec84:	0800ecbd 	.word	0x0800ecbd
 800ec88:	0800eccd 	.word	0x0800eccd
    {
		case SML_PROC_PAR_VALUE_TAG_VALUE:
			rv = sml_value_write(value->data.value, buf);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	6839      	ldr	r1, [r7, #0]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f001 fb0c 	bl	80102b0 <sml_value_write>
 800ec98:	60f8      	str	r0, [r7, #12]
			break;
 800ec9a:	e02c      	b.n	800ecf6 <sml_proc_par_value_write+0xea>
		case SML_PROC_PAR_VALUE_TAG_PERIOD_ENTRY:
			rv = sml_period_entry_write(value->data.period_entry, buf);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	6839      	ldr	r1, [r7, #0]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f000 fce2 	bl	800f66c <sml_period_entry_write>
 800eca8:	60f8      	str	r0, [r7, #12]
			break;
 800ecaa:	e024      	b.n	800ecf6 <sml_proc_par_value_write+0xea>
		case SML_PROC_PAR_VALUE_TAG_TUPEL_ENTRY:
			rv = sml_tupel_entry_write(value->data.tupel_entry, buf);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	6839      	ldr	r1, [r7, #0]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f000 fa60 	bl	800f178 <sml_tupel_entry_write>
 800ecb8:	60f8      	str	r0, [r7, #12]
			break;
 800ecba:	e01c      	b.n	800ecf6 <sml_proc_par_value_write+0xea>
		case SML_PROC_PAR_VALUE_TAG_TIME:
			rv = sml_time_write(value->data.time, buf);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	6839      	ldr	r1, [r7, #0]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7ff f97c 	bl	800dfc0 <sml_time_write>
 800ecc8:	60f8      	str	r0, [r7, #12]
			break;
 800ecca:	e014      	b.n	800ecf6 <sml_proc_par_value_write+0xea>
		case SML_PROC_PAR_VALUE_TAG_LIST_ENTRY:
			rv = sml_list_entry_write(value->data.list_entry, buf);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	6839      	ldr	r1, [r7, #0]
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fc fff2 	bl	800bcbc <sml_list_entry_write>
 800ecd8:	60f8      	str	r0, [r7, #12]
			break;
 800ecda:	e00c      	b.n	800ecf6 <sml_proc_par_value_write+0xea>
		default:
			buf->error = SML_PROC_PAR_VALUE_TAG_MISMATCH;
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2266      	movs	r2, #102	; 0x66
 800ece0:	611a      	str	r2, [r3, #16]
			if (sml_debug_output(buf))
 800ece2:	6838      	ldr	r0, [r7, #0]
 800ece4:	f7fe fee6 	bl	800dab4 <sml_debug_output>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d003      	beq.n	800ecf6 <sml_proc_par_value_write+0xea>
            {
				trace("error: unknown tag in %s\n", __FUNCTION__);
 800ecee:	4904      	ldr	r1, [pc, #16]	; (800ed00 <sml_proc_par_value_write+0xf4>)
 800ecf0:	4804      	ldr	r0, [pc, #16]	; (800ed04 <sml_proc_par_value_write+0xf8>)
 800ecf2:	f7fd f8e7 	bl	800bec4 <trace>
			}
	}

	return rv;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	08012674 	.word	0x08012674
 800ed04:	080121fc 	.word	0x080121fc

0800ed08 <sml_proc_par_value_free>:

void sml_proc_par_value_free(sml_proc_par_value *ppv)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
	if (ppv)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d04f      	beq.n	800edb6 <sml_proc_par_value_free+0xae>
    {
		if (ppv->tag)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d03f      	beq.n	800ed9e <sml_proc_par_value_free+0x96>
        {
			switch (*(ppv->tag))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	3b01      	subs	r3, #1
 800ed26:	2b04      	cmp	r3, #4
 800ed28:	d82a      	bhi.n	800ed80 <sml_proc_par_value_free+0x78>
 800ed2a:	a201      	add	r2, pc, #4	; (adr r2, 800ed30 <sml_proc_par_value_free+0x28>)
 800ed2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed30:	0800ed45 	.word	0x0800ed45
 800ed34:	0800ed51 	.word	0x0800ed51
 800ed38:	0800ed5d 	.word	0x0800ed5d
 800ed3c:	0800ed69 	.word	0x0800ed69
 800ed40:	0800ed75 	.word	0x0800ed75
            {
				case SML_PROC_PAR_VALUE_TAG_VALUE:
					sml_value_free(ppv->data.value);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f001 fb06 	bl	801035a <sml_value_free>
					break;
 800ed4e:	e020      	b.n	800ed92 <sml_proc_par_value_free+0x8a>
				case SML_PROC_PAR_VALUE_TAG_PERIOD_ENTRY:
					sml_period_entry_free(ppv->data.period_entry);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f000 fceb 	bl	800f730 <sml_period_entry_free>
					break;
 800ed5a:	e01a      	b.n	800ed92 <sml_proc_par_value_free+0x8a>
				case SML_PROC_PAR_VALUE_TAG_TUPEL_ENTRY:
					sml_tupel_entry_free(ppv->data.tupel_entry);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f000 fb54 	bl	800f40e <sml_tupel_entry_free>
					break;
 800ed66:	e014      	b.n	800ed92 <sml_proc_par_value_free+0x8a>
				case SML_PROC_PAR_VALUE_TAG_TIME:
					sml_time_free(ppv->data.time);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7ff f973 	bl	800e058 <sml_time_free>
					break;
 800ed72:	e00e      	b.n	800ed92 <sml_proc_par_value_free+0x8a>
				case SML_PROC_PAR_VALUE_TAG_LIST_ENTRY:
					sml_list_entry_free(ppv->data.list_entry);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7fd f853 	bl	800be24 <sml_list_entry_free>
					break;
 800ed7e:	e008      	b.n	800ed92 <sml_proc_par_value_free+0x8a>
				default:
					if (ppv->data.value)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d004      	beq.n	800ed92 <sml_proc_par_value_free+0x8a>
                    {
						free(ppv->data.value);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fa fa29 	bl	80091e4 <vPortFree>
					}
			}
			sml_number_free(ppv->tag);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fd fefd 	bl	800cb96 <sml_number_free>
 800ed9c:	e008      	b.n	800edb0 <sml_proc_par_value_free+0xa8>
		}
		else {
			// Without the tag, there might be a memory leak.
			if (ppv->data.value)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d004      	beq.n	800edb0 <sml_proc_par_value_free+0xa8>
            {
				free(ppv->data.value);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	4618      	mov	r0, r3
 800edac:	f7fa fa1a 	bl	80091e4 <vPortFree>
			}
		}

		free(ppv);
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f7fa fa17 	bl	80091e4 <vPortFree>
	}
}
 800edb6:	bf00      	nop
 800edb8:	3708      	adds	r7, #8
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop

0800edc0 <sml_tupel_entry_init>:


// sml_tuple_entry;

sml_tupel_entry *sml_tupel_entry_init(void)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
	sml_tupel_entry *tupel = (sml_tupel_entry *)malloc(sizeof(sml_tupel_entry));
 800edc6:	205c      	movs	r0, #92	; 0x5c
 800edc8:	f7fa f94a 	bl	8009060 <pvPortMalloc>
 800edcc:	6078      	str	r0, [r7, #4]
	if (!tupel)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d105      	bne.n	800ede0 <sml_tupel_entry_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_tupel_entry));
 800edd4:	215c      	movs	r1, #92	; 0x5c
 800edd6:	4807      	ldr	r0, [pc, #28]	; (800edf4 <sml_tupel_entry_init+0x34>)
 800edd8:	f7fd f874 	bl	800bec4 <trace>
		return NULL;
 800eddc:	2300      	movs	r3, #0
 800edde:	e005      	b.n	800edec <sml_tupel_entry_init+0x2c>
	}
	memset(tupel, 0, sizeof(sml_tupel_entry));
 800ede0:	225c      	movs	r2, #92	; 0x5c
 800ede2:	2100      	movs	r1, #0
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f001 fb2b 	bl	8010440 <memset>
	
	return tupel;
 800edea:	687b      	ldr	r3, [r7, #4]
}
 800edec:	4618      	mov	r0, r3
 800edee:	3708      	adds	r7, #8
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	08012174 	.word	0x08012174

0800edf8 <sml_tupel_entry_parse>:

sml_tupel_entry *sml_tupel_entry_parse(sml_buffer *buf)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
    sml_tupel_entry *tupel = NULL;
 800ee00:	2300      	movs	r3, #0
 800ee02:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d101      	bne.n	800ee0e <sml_tupel_entry_parse+0x16>
	{
		return NULL;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e1af      	b.n	800f16e <sml_tupel_entry_parse+0x376>
	}

	if (sml_buf_optional_is_skipped(buf))
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7fe fe3b 	bl	800da8a <sml_buf_optional_is_skipped>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d001      	beq.n	800ee1e <sml_tupel_entry_parse+0x26>
    {
		return NULL;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	e1a7      	b.n	800f16e <sml_tupel_entry_parse+0x376>
	}

	tupel = sml_tupel_entry_init();
 800ee1e:	f7ff ffcf 	bl	800edc0 <sml_tupel_entry_init>
 800ee22:	60f8      	str	r0, [r7, #12]
	if (!tupel)
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d105      	bne.n	800ee36 <sml_tupel_entry_parse+0x3e>
    {
		buf->error = SML_MALLOC_ERROR;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ee30:	611a      	str	r2, [r3, #16]
		return NULL;
 800ee32:	2300      	movs	r3, #0
 800ee34:	e19b      	b.n	800f16e <sml_tupel_entry_parse+0x376>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f7fe fdc7 	bl	800d9ca <sml_buf_get_next_type>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b70      	cmp	r3, #112	; 0x70
 800ee40:	d003      	beq.n	800ee4a <sml_tupel_entry_parse+0x52>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2232      	movs	r2, #50	; 0x32
 800ee46:	611a      	str	r2, [r3, #16]
		goto error;
 800ee48:	e18d      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	}

	if (sml_buf_get_next_length(buf) != 23)
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7fe fcac 	bl	800d7a8 <sml_buf_get_next_length>
 800ee50:	4603      	mov	r3, r0
 800ee52:	2b17      	cmp	r3, #23
 800ee54:	d003      	beq.n	800ee5e <sml_tupel_entry_parse+0x66>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2220      	movs	r2, #32
 800ee5a:	611a      	str	r2, [r3, #16]
		goto error;
 800ee5c:	e183      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	}

	if (sml_debug_output(buf))
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7fe fe28 	bl	800dab4 <sml_debug_output>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d002      	beq.n	800ee70 <sml_tupel_entry_parse+0x78>
    {
		trace("\t\tTUPEL ENTRY\r\n");
 800ee6a:	48bd      	ldr	r0, [pc, #756]	; (800f160 <sml_tupel_entry_parse+0x368>)
 800ee6c:	f7fd f82a 	bl	800bec4 <trace>
	}

	tupel->server_id = sml_octet_string_parse(buf);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f7fd ff33 	bl	800ccdc <sml_octet_string_parse>
 800ee76:	4602      	mov	r2, r0
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f7fe fd93 	bl	800d9a8 <sml_buf_has_errors>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f040 813e 	bne.w	800f106 <sml_tupel_entry_parse+0x30e>
	tupel->sec_index = sml_time_parse(buf);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7ff f802 	bl	800de94 <sml_time_parse>
 800ee90:	4602      	mov	r2, r0
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7fe fd86 	bl	800d9a8 <sml_buf_has_errors>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	f040 8133 	bne.w	800f10a <sml_tupel_entry_parse+0x312>
	tupel->status = sml_u64_parse(buf);
 800eea4:	2208      	movs	r2, #8
 800eea6:	2160      	movs	r1, #96	; 0x60
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7fd fd25 	bl	800c8f8 <sml_number_parse>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7fe fd77 	bl	800d9a8 <sml_buf_has_errors>
 800eeba:	4603      	mov	r3, r0
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f040 8126 	bne.w	800f10e <sml_tupel_entry_parse+0x316>

	tupel->unit_pA = sml_unit_parse(buf);
 800eec2:	2201      	movs	r2, #1
 800eec4:	2160      	movs	r1, #96	; 0x60
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7fd fd16 	bl	800c8f8 <sml_number_parse>
 800eecc:	4602      	mov	r2, r0
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7fe fd68 	bl	800d9a8 <sml_buf_has_errors>
 800eed8:	4603      	mov	r3, r0
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f040 8119 	bne.w	800f112 <sml_tupel_entry_parse+0x31a>
	tupel->scaler_pA = sml_i8_parse(buf);
 800eee0:	2201      	movs	r2, #1
 800eee2:	2150      	movs	r1, #80	; 0x50
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7fd fd07 	bl	800c8f8 <sml_number_parse>
 800eeea:	4602      	mov	r2, r0
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f7fe fd59 	bl	800d9a8 <sml_buf_has_errors>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f040 810c 	bne.w	800f116 <sml_tupel_entry_parse+0x31e>
	tupel->value_pA = sml_i64_parse(buf);
 800eefe:	2208      	movs	r2, #8
 800ef00:	2150      	movs	r1, #80	; 0x50
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f7fd fcf8 	bl	800c8f8 <sml_number_parse>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	615a      	str	r2, [r3, #20]
	if (sml_buf_has_errors(buf)) goto error;
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7fe fd4a 	bl	800d9a8 <sml_buf_has_errors>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	f040 80ff 	bne.w	800f11a <sml_tupel_entry_parse+0x322>

	tupel->unit_R1 = sml_unit_parse(buf);
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	2160      	movs	r1, #96	; 0x60
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f7fd fce9 	bl	800c8f8 <sml_number_parse>
 800ef26:	4602      	mov	r2, r0
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	619a      	str	r2, [r3, #24]
	if (sml_buf_has_errors(buf)) goto error;
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7fe fd3b 	bl	800d9a8 <sml_buf_has_errors>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	f040 80f2 	bne.w	800f11e <sml_tupel_entry_parse+0x326>
	tupel->scaler_R1 = sml_i8_parse(buf);
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	2150      	movs	r1, #80	; 0x50
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7fd fcda 	bl	800c8f8 <sml_number_parse>
 800ef44:	4602      	mov	r2, r0
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	61da      	str	r2, [r3, #28]
	if (sml_buf_has_errors(buf)) goto error;
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7fe fd2c 	bl	800d9a8 <sml_buf_has_errors>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f040 80e5 	bne.w	800f122 <sml_tupel_entry_parse+0x32a>
	tupel->value_R1 = sml_i64_parse(buf);
 800ef58:	2208      	movs	r2, #8
 800ef5a:	2150      	movs	r1, #80	; 0x50
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f7fd fccb 	bl	800c8f8 <sml_number_parse>
 800ef62:	4602      	mov	r2, r0
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	621a      	str	r2, [r3, #32]
	if (sml_buf_has_errors(buf)) goto error;
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7fe fd1d 	bl	800d9a8 <sml_buf_has_errors>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f040 80d8 	bne.w	800f126 <sml_tupel_entry_parse+0x32e>

	tupel->unit_R4 = sml_unit_parse(buf);
 800ef76:	2201      	movs	r2, #1
 800ef78:	2160      	movs	r1, #96	; 0x60
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f7fd fcbc 	bl	800c8f8 <sml_number_parse>
 800ef80:	4602      	mov	r2, r0
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	625a      	str	r2, [r3, #36]	; 0x24
	if (sml_buf_has_errors(buf)) goto error;
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f7fe fd0e 	bl	800d9a8 <sml_buf_has_errors>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f040 80cb 	bne.w	800f12a <sml_tupel_entry_parse+0x332>
	tupel->scaler_R4 = sml_i8_parse(buf);
 800ef94:	2201      	movs	r2, #1
 800ef96:	2150      	movs	r1, #80	; 0x50
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f7fd fcad 	bl	800c8f8 <sml_number_parse>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	629a      	str	r2, [r3, #40]	; 0x28
	if (sml_buf_has_errors(buf)) goto error;
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7fe fcff 	bl	800d9a8 <sml_buf_has_errors>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	f040 80be 	bne.w	800f12e <sml_tupel_entry_parse+0x336>
	tupel->value_R4 = sml_i64_parse(buf);
 800efb2:	2208      	movs	r2, #8
 800efb4:	2150      	movs	r1, #80	; 0x50
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f7fd fc9e 	bl	800c8f8 <sml_number_parse>
 800efbc:	4602      	mov	r2, r0
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (sml_buf_has_errors(buf)) goto error;
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7fe fcf0 	bl	800d9a8 <sml_buf_has_errors>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f040 80b1 	bne.w	800f132 <sml_tupel_entry_parse+0x33a>

	tupel->signature_pA_R1_R4 = sml_octet_string_parse(buf);
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f7fd fe83 	bl	800ccdc <sml_octet_string_parse>
 800efd6:	4602      	mov	r2, r0
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	631a      	str	r2, [r3, #48]	; 0x30
	if (sml_buf_has_errors(buf)) goto error;
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f7fe fce3 	bl	800d9a8 <sml_buf_has_errors>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f040 80a6 	bne.w	800f136 <sml_tupel_entry_parse+0x33e>

	tupel->unit_mA = sml_unit_parse(buf);
 800efea:	2201      	movs	r2, #1
 800efec:	2160      	movs	r1, #96	; 0x60
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7fd fc82 	bl	800c8f8 <sml_number_parse>
 800eff4:	4602      	mov	r2, r0
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	635a      	str	r2, [r3, #52]	; 0x34
	if (sml_buf_has_errors(buf)) goto error;
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7fe fcd4 	bl	800d9a8 <sml_buf_has_errors>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	f040 8099 	bne.w	800f13a <sml_tupel_entry_parse+0x342>
	tupel->scaler_mA = sml_i8_parse(buf);
 800f008:	2201      	movs	r2, #1
 800f00a:	2150      	movs	r1, #80	; 0x50
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7fd fc73 	bl	800c8f8 <sml_number_parse>
 800f012:	4602      	mov	r2, r0
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	639a      	str	r2, [r3, #56]	; 0x38
	if (sml_buf_has_errors(buf)) goto error;
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f7fe fcc5 	bl	800d9a8 <sml_buf_has_errors>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	f040 808c 	bne.w	800f13e <sml_tupel_entry_parse+0x346>
	tupel->value_mA = sml_i64_parse(buf);
 800f026:	2208      	movs	r2, #8
 800f028:	2150      	movs	r1, #80	; 0x50
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f7fd fc64 	bl	800c8f8 <sml_number_parse>
 800f030:	4602      	mov	r2, r0
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	63da      	str	r2, [r3, #60]	; 0x3c
	if (sml_buf_has_errors(buf)) goto error;
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f7fe fcb6 	bl	800d9a8 <sml_buf_has_errors>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d17f      	bne.n	800f142 <sml_tupel_entry_parse+0x34a>

	tupel->unit_R2 = sml_unit_parse(buf);
 800f042:	2201      	movs	r2, #1
 800f044:	2160      	movs	r1, #96	; 0x60
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7fd fc56 	bl	800c8f8 <sml_number_parse>
 800f04c:	4602      	mov	r2, r0
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	641a      	str	r2, [r3, #64]	; 0x40
	if (sml_buf_has_errors(buf)) goto error;
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7fe fca8 	bl	800d9a8 <sml_buf_has_errors>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d173      	bne.n	800f146 <sml_tupel_entry_parse+0x34e>
	tupel->scaler_R2 = sml_i8_parse(buf);
 800f05e:	2201      	movs	r2, #1
 800f060:	2150      	movs	r1, #80	; 0x50
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7fd fc48 	bl	800c8f8 <sml_number_parse>
 800f068:	4602      	mov	r2, r0
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	645a      	str	r2, [r3, #68]	; 0x44
	if (sml_buf_has_errors(buf)) goto error;
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7fe fc9a 	bl	800d9a8 <sml_buf_has_errors>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d167      	bne.n	800f14a <sml_tupel_entry_parse+0x352>
	tupel->value_R2 = sml_i64_parse(buf);
 800f07a:	2208      	movs	r2, #8
 800f07c:	2150      	movs	r1, #80	; 0x50
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7fd fc3a 	bl	800c8f8 <sml_number_parse>
 800f084:	4602      	mov	r2, r0
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	649a      	str	r2, [r3, #72]	; 0x48
	if (sml_buf_has_errors(buf)) goto error;
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7fe fc8c 	bl	800d9a8 <sml_buf_has_errors>
 800f090:	4603      	mov	r3, r0
 800f092:	2b00      	cmp	r3, #0
 800f094:	d15b      	bne.n	800f14e <sml_tupel_entry_parse+0x356>

	tupel->unit_R3 = sml_unit_parse(buf);
 800f096:	2201      	movs	r2, #1
 800f098:	2160      	movs	r1, #96	; 0x60
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f7fd fc2c 	bl	800c8f8 <sml_number_parse>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	64da      	str	r2, [r3, #76]	; 0x4c
	if (sml_buf_has_errors(buf)) goto error;
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f7fe fc7e 	bl	800d9a8 <sml_buf_has_errors>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d14f      	bne.n	800f152 <sml_tupel_entry_parse+0x35a>
	tupel->scaler_R3 = sml_i8_parse(buf);
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	2150      	movs	r1, #80	; 0x50
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f7fd fc1e 	bl	800c8f8 <sml_number_parse>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	651a      	str	r2, [r3, #80]	; 0x50
	if (sml_buf_has_errors(buf)) goto error;
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f7fe fc70 	bl	800d9a8 <sml_buf_has_errors>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d143      	bne.n	800f156 <sml_tupel_entry_parse+0x35e>
	tupel->value_R3 = sml_i64_parse(buf);
 800f0ce:	2208      	movs	r2, #8
 800f0d0:	2150      	movs	r1, #80	; 0x50
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7fd fc10 	bl	800c8f8 <sml_number_parse>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	655a      	str	r2, [r3, #84]	; 0x54
	if (sml_buf_has_errors(buf)) goto error;
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f7fe fc62 	bl	800d9a8 <sml_buf_has_errors>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d137      	bne.n	800f15a <sml_tupel_entry_parse+0x362>

	tupel->signature_mA_R2_R3 = sml_octet_string_parse(buf);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7fd fdf6 	bl	800ccdc <sml_octet_string_parse>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	659a      	str	r2, [r3, #88]	; 0x58
	if (sml_buf_has_errors(buf)) goto error;
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7fe fc56 	bl	800d9a8 <sml_buf_has_errors>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d130      	bne.n	800f164 <sml_tupel_entry_parse+0x36c>

	return tupel;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	e033      	b.n	800f16e <sml_tupel_entry_parse+0x376>
	if (sml_buf_has_errors(buf)) goto error;
 800f106:	bf00      	nop
 800f108:	e02d      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f10a:	bf00      	nop
 800f10c:	e02b      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f10e:	bf00      	nop
 800f110:	e029      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f112:	bf00      	nop
 800f114:	e027      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f116:	bf00      	nop
 800f118:	e025      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f11a:	bf00      	nop
 800f11c:	e023      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f11e:	bf00      	nop
 800f120:	e021      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f122:	bf00      	nop
 800f124:	e01f      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f126:	bf00      	nop
 800f128:	e01d      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f12a:	bf00      	nop
 800f12c:	e01b      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f12e:	bf00      	nop
 800f130:	e019      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f132:	bf00      	nop
 800f134:	e017      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f136:	bf00      	nop
 800f138:	e015      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f13a:	bf00      	nop
 800f13c:	e013      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f13e:	bf00      	nop
 800f140:	e011      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f142:	bf00      	nop
 800f144:	e00f      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f146:	bf00      	nop
 800f148:	e00d      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f14a:	bf00      	nop
 800f14c:	e00b      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f14e:	bf00      	nop
 800f150:	e009      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f152:	bf00      	nop
 800f154:	e007      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f156:	bf00      	nop
 800f158:	e005      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
	if (sml_buf_has_errors(buf)) goto error;
 800f15a:	bf00      	nop
 800f15c:	e003      	b.n	800f166 <sml_tupel_entry_parse+0x36e>
 800f15e:	bf00      	nop
 800f160:	08012218 	.word	0x08012218
	if (sml_buf_has_errors(buf)) goto error;
 800f164:	bf00      	nop

error:
	sml_tupel_entry_free(tupel);
 800f166:	68f8      	ldr	r0, [r7, #12]
 800f168:	f000 f951 	bl	800f40e <sml_tupel_entry_free>
	return NULL;
 800f16c:	2300      	movs	r3, #0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop

0800f178 <sml_tupel_entry_write>:

int sml_tupel_entry_write(sml_tupel_entry *tupel, sml_buffer *buf)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
	int rv;

	if (!buf)
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d102      	bne.n	800f18e <sml_tupel_entry_write+0x16>
	{
		return SML_PARAMETER_ERROR;
 800f188:	f240 33e6 	movw	r3, #998	; 0x3e6
 800f18c:	e13b      	b.n	800f406 <sml_tupel_entry_write+0x28e>
	}

	if (tupel == 0)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d105      	bne.n	800f1a0 <sml_tupel_entry_write+0x28>
    {
		rv = sml_buf_optional_write(buf);
 800f194:	6838      	ldr	r0, [r7, #0]
 800f196:	f7fe fc5b 	bl	800da50 <sml_buf_optional_write>
 800f19a:	60f8      	str	r0, [r7, #12]
		return rv;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	e132      	b.n	800f406 <sml_tupel_entry_write+0x28e>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 23);
 800f1a0:	2217      	movs	r2, #23
 800f1a2:	2170      	movs	r1, #112	; 0x70
 800f1a4:	6838      	ldr	r0, [r7, #0]
 800f1a6:	f7fe fb61 	bl	800d86c <sml_buf_set_type_and_length>
 800f1aa:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d001      	beq.n	800f1b6 <sml_tupel_entry_write+0x3e>
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	e127      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_octet_string_write(tupel->server_id, buf);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	6839      	ldr	r1, [r7, #0]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7fd fdd9 	bl	800cd74 <sml_octet_string_write>
 800f1c2:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d001      	beq.n	800f1ce <sml_tupel_entry_write+0x56>
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	e11b      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_time_write(tupel->sec_index, buf);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	6839      	ldr	r1, [r7, #0]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fe fef3 	bl	800dfc0 <sml_time_write>
 800f1da:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d001      	beq.n	800f1e6 <sml_tupel_entry_write+0x6e>
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	e10f      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_u64_write(tupel->status, buf);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6898      	ldr	r0, [r3, #8]
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	2208      	movs	r2, #8
 800f1ee:	2160      	movs	r1, #96	; 0x60
 800f1f0:	f7fd fc24 	bl	800ca3c <sml_number_write>
 800f1f4:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d001      	beq.n	800f200 <sml_tupel_entry_write+0x88>
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	e102      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_unit_write(tupel->unit_pA, buf);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	68d8      	ldr	r0, [r3, #12]
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	2201      	movs	r2, #1
 800f208:	2160      	movs	r1, #96	; 0x60
 800f20a:	f7fd fc17 	bl	800ca3c <sml_number_write>
 800f20e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d001      	beq.n	800f21a <sml_tupel_entry_write+0xa2>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	e0f5      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i8_write(tupel->scaler_pA, buf);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6918      	ldr	r0, [r3, #16]
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	2201      	movs	r2, #1
 800f222:	2150      	movs	r1, #80	; 0x50
 800f224:	f7fd fc0a 	bl	800ca3c <sml_number_write>
 800f228:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <sml_tupel_entry_write+0xbc>
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	e0e8      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i64_write(tupel->value_pA, buf);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6958      	ldr	r0, [r3, #20]
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	2208      	movs	r2, #8
 800f23c:	2150      	movs	r1, #80	; 0x50
 800f23e:	f7fd fbfd 	bl	800ca3c <sml_number_write>
 800f242:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d001      	beq.n	800f24e <sml_tupel_entry_write+0xd6>
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	e0db      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_unit_write(tupel->unit_R1, buf);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6998      	ldr	r0, [r3, #24]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	2201      	movs	r2, #1
 800f256:	2160      	movs	r1, #96	; 0x60
 800f258:	f7fd fbf0 	bl	800ca3c <sml_number_write>
 800f25c:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d001      	beq.n	800f268 <sml_tupel_entry_write+0xf0>
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	e0ce      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i8_write(tupel->scaler_R1, buf);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	69d8      	ldr	r0, [r3, #28]
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	2201      	movs	r2, #1
 800f270:	2150      	movs	r1, #80	; 0x50
 800f272:	f7fd fbe3 	bl	800ca3c <sml_number_write>
 800f276:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d001      	beq.n	800f282 <sml_tupel_entry_write+0x10a>
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	e0c1      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i64_write(tupel->value_R1, buf);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a18      	ldr	r0, [r3, #32]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	2208      	movs	r2, #8
 800f28a:	2150      	movs	r1, #80	; 0x50
 800f28c:	f7fd fbd6 	bl	800ca3c <sml_number_write>
 800f290:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d001      	beq.n	800f29c <sml_tupel_entry_write+0x124>
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	e0b4      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_unit_write(tupel->unit_R4, buf);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	2160      	movs	r1, #96	; 0x60
 800f2a6:	f7fd fbc9 	bl	800ca3c <sml_number_write>
 800f2aa:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d001      	beq.n	800f2b6 <sml_tupel_entry_write+0x13e>
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	e0a7      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i8_write(tupel->scaler_R4, buf);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	2150      	movs	r1, #80	; 0x50
 800f2c0:	f7fd fbbc 	bl	800ca3c <sml_number_write>
 800f2c4:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d001      	beq.n	800f2d0 <sml_tupel_entry_write+0x158>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	e09a      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i64_write(tupel->value_R4, buf);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	2208      	movs	r2, #8
 800f2d8:	2150      	movs	r1, #80	; 0x50
 800f2da:	f7fd fbaf 	bl	800ca3c <sml_number_write>
 800f2de:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <sml_tupel_entry_write+0x172>
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	e08d      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_octet_string_write(tupel->signature_pA_R1_R4, buf);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fd fd3f 	bl	800cd74 <sml_octet_string_write>
 800f2f6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d001      	beq.n	800f302 <sml_tupel_entry_write+0x18a>
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	e081      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_unit_write(tupel->unit_mA, buf);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2201      	movs	r2, #1
 800f30a:	2160      	movs	r1, #96	; 0x60
 800f30c:	f7fd fb96 	bl	800ca3c <sml_number_write>
 800f310:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d001      	beq.n	800f31c <sml_tupel_entry_write+0x1a4>
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	e074      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i8_write(tupel->scaler_mA, buf);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	2201      	movs	r2, #1
 800f324:	2150      	movs	r1, #80	; 0x50
 800f326:	f7fd fb89 	bl	800ca3c <sml_number_write>
 800f32a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d001      	beq.n	800f336 <sml_tupel_entry_write+0x1be>
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	e067      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i64_write(tupel->value_mA, buf);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	2208      	movs	r2, #8
 800f33e:	2150      	movs	r1, #80	; 0x50
 800f340:	f7fd fb7c 	bl	800ca3c <sml_number_write>
 800f344:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d001      	beq.n	800f350 <sml_tupel_entry_write+0x1d8>
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	e05a      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_unit_write(tupel->unit_R2, buf);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	2201      	movs	r2, #1
 800f358:	2160      	movs	r1, #96	; 0x60
 800f35a:	f7fd fb6f 	bl	800ca3c <sml_number_write>
 800f35e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <sml_tupel_entry_write+0x1f2>
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	e04d      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i8_write(tupel->scaler_R2, buf);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	2201      	movs	r2, #1
 800f372:	2150      	movs	r1, #80	; 0x50
 800f374:	f7fd fb62 	bl	800ca3c <sml_number_write>
 800f378:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d001      	beq.n	800f384 <sml_tupel_entry_write+0x20c>
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	e040      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i64_write(tupel->value_R2, buf);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	2208      	movs	r2, #8
 800f38c:	2150      	movs	r1, #80	; 0x50
 800f38e:	f7fd fb55 	bl	800ca3c <sml_number_write>
 800f392:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d001      	beq.n	800f39e <sml_tupel_entry_write+0x226>
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	e033      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_unit_write(tupel->unit_R3, buf);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	2160      	movs	r1, #96	; 0x60
 800f3a8:	f7fd fb48 	bl	800ca3c <sml_number_write>
 800f3ac:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d001      	beq.n	800f3b8 <sml_tupel_entry_write+0x240>
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	e026      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i8_write(tupel->scaler_R3, buf);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	2150      	movs	r1, #80	; 0x50
 800f3c2:	f7fd fb3b 	bl	800ca3c <sml_number_write>
 800f3c6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d001      	beq.n	800f3d2 <sml_tupel_entry_write+0x25a>
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	e019      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_i64_write(tupel->value_R3, buf);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	2208      	movs	r2, #8
 800f3da:	2150      	movs	r1, #80	; 0x50
 800f3dc:	f7fd fb2e 	bl	800ca3c <sml_number_write>
 800f3e0:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d001      	beq.n	800f3ec <sml_tupel_entry_write+0x274>
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	e00c      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	rv = sml_octet_string_write(tupel->signature_mA_R2_R3, buf);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3f0:	6839      	ldr	r1, [r7, #0]
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fd fcbe 	bl	800cd74 <sml_octet_string_write>
 800f3f8:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d001      	beq.n	800f404 <sml_tupel_entry_write+0x28c>
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	e000      	b.n	800f406 <sml_tupel_entry_write+0x28e>

	return rv;
 800f404:	68fb      	ldr	r3, [r7, #12]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <sml_tupel_entry_free>:

void sml_tupel_entry_free(sml_tupel_entry *tupel)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b082      	sub	sp, #8
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
	if (tupel)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d075      	beq.n	800f508 <sml_tupel_entry_free+0xfa>
    {
		sml_octet_string_free(tupel->server_id);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4618      	mov	r0, r3
 800f422:	f7fd fcec 	bl	800cdfe <sml_octet_string_free>
		sml_time_free(tupel->sec_index);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fe fe14 	bl	800e058 <sml_time_free>
		sml_number_free(tupel->status);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	4618      	mov	r0, r3
 800f436:	f7fd fbae 	bl	800cb96 <sml_number_free>

		sml_unit_free(tupel->unit_pA);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fd fba9 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->scaler_pA);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	691b      	ldr	r3, [r3, #16]
 800f448:	4618      	mov	r0, r3
 800f44a:	f7fd fba4 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->value_pA);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	695b      	ldr	r3, [r3, #20]
 800f452:	4618      	mov	r0, r3
 800f454:	f7fd fb9f 	bl	800cb96 <sml_number_free>

		sml_unit_free(tupel->unit_R1);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	699b      	ldr	r3, [r3, #24]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7fd fb9a 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->scaler_R1);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	69db      	ldr	r3, [r3, #28]
 800f466:	4618      	mov	r0, r3
 800f468:	f7fd fb95 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->value_R1);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6a1b      	ldr	r3, [r3, #32]
 800f470:	4618      	mov	r0, r3
 800f472:	f7fd fb90 	bl	800cb96 <sml_number_free>

		sml_unit_free(tupel->unit_R4);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fd fb8b 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->scaler_R4);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f484:	4618      	mov	r0, r3
 800f486:	f7fd fb86 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->value_R4);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f48e:	4618      	mov	r0, r3
 800f490:	f7fd fb81 	bl	800cb96 <sml_number_free>

		sml_octet_string_free(tupel->signature_pA_R1_R4);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fd fcb0 	bl	800cdfe <sml_octet_string_free>

		sml_unit_free(tupel->unit_mA);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fd fb77 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->scaler_mA);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fd fb72 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->value_mA);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7fd fb6d 	bl	800cb96 <sml_number_free>

		sml_unit_free(tupel->unit_R2);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7fd fb68 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->scaler_R2);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fd fb63 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->value_R2);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fd fb5e 	bl	800cb96 <sml_number_free>

		sml_unit_free(tupel->unit_R3);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fd fb59 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->scaler_R3);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fd fb54 	bl	800cb96 <sml_number_free>
		sml_number_free(tupel->value_R3);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fd fb4f 	bl	800cb96 <sml_number_free>

		sml_octet_string_free(tupel->signature_mA_R2_R3);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fd fc7e 	bl	800cdfe <sml_octet_string_free>

		free(tupel);
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f7f9 fe6e 	bl	80091e4 <vPortFree>
	}
}
 800f508:	bf00      	nop
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <sml_period_entry_init>:


// sml_period_entry;

sml_period_entry *sml_period_entry_init(void)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
	sml_period_entry *period = (sml_period_entry *)malloc(sizeof(sml_period_entry));
 800f516:	2014      	movs	r0, #20
 800f518:	f7f9 fda2 	bl	8009060 <pvPortMalloc>
 800f51c:	6078      	str	r0, [r7, #4]
	if (!period)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d105      	bne.n	800f530 <sml_period_entry_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_period_entry));
 800f524:	2114      	movs	r1, #20
 800f526:	4807      	ldr	r0, [pc, #28]	; (800f544 <sml_period_entry_init+0x34>)
 800f528:	f7fc fccc 	bl	800bec4 <trace>
		return NULL;
 800f52c:	2300      	movs	r3, #0
 800f52e:	e005      	b.n	800f53c <sml_period_entry_init+0x2c>
	}
	memset(period, 0, sizeof(sml_period_entry));
 800f530:	2214      	movs	r2, #20
 800f532:	2100      	movs	r1, #0
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 ff83 	bl	8010440 <memset>
	
	return period;
 800f53a:	687b      	ldr	r3, [r7, #4]
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}
 800f544:	08012174 	.word	0x08012174

0800f548 <sml_period_entry_parse>:

sml_period_entry *sml_period_entry_parse(sml_buffer *buf)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
    sml_period_entry *period = NULL;
 800f550:	2300      	movs	r3, #0
 800f552:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d101      	bne.n	800f55e <sml_period_entry_parse+0x16>
	{
		return NULL;
 800f55a:	2300      	movs	r3, #0
 800f55c:	e07f      	b.n	800f65e <sml_period_entry_parse+0x116>
	}

	if (sml_buf_optional_is_skipped(buf))
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7fe fa93 	bl	800da8a <sml_buf_optional_is_skipped>
 800f564:	4603      	mov	r3, r0
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <sml_period_entry_parse+0x26>
    {
		return NULL;
 800f56a:	2300      	movs	r3, #0
 800f56c:	e077      	b.n	800f65e <sml_period_entry_parse+0x116>
	}

	period = sml_period_entry_init();
 800f56e:	f7ff ffcf 	bl	800f510 <sml_period_entry_init>
 800f572:	60f8      	str	r0, [r7, #12]
	if (!period)
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d105      	bne.n	800f586 <sml_period_entry_parse+0x3e>
    {
		buf->error = SML_MALLOC_ERROR;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f580:	611a      	str	r2, [r3, #16]
		return NULL;
 800f582:	2300      	movs	r3, #0
 800f584:	e06b      	b.n	800f65e <sml_period_entry_parse+0x116>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7fe fa1f 	bl	800d9ca <sml_buf_get_next_type>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b70      	cmp	r3, #112	; 0x70
 800f590:	d003      	beq.n	800f59a <sml_period_entry_parse+0x52>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2232      	movs	r2, #50	; 0x32
 800f596:	611a      	str	r2, [r3, #16]
		goto error;
 800f598:	e05d      	b.n	800f656 <sml_period_entry_parse+0x10e>
	}

	if (sml_buf_get_next_length(buf) != 5)
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f7fe f904 	bl	800d7a8 <sml_buf_get_next_length>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b05      	cmp	r3, #5
 800f5a4:	d003      	beq.n	800f5ae <sml_period_entry_parse+0x66>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2220      	movs	r2, #32
 800f5aa:	611a      	str	r2, [r3, #16]
		goto error;
 800f5ac:	e053      	b.n	800f656 <sml_period_entry_parse+0x10e>
	}

	if (sml_debug_output(buf))
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7fe fa80 	bl	800dab4 <sml_debug_output>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d002      	beq.n	800f5c0 <sml_period_entry_parse+0x78>
    {
		trace("\t\tPERIOD ENTRY\r\n");
 800f5ba:	482b      	ldr	r0, [pc, #172]	; (800f668 <sml_period_entry_parse+0x120>)
 800f5bc:	f7fc fc82 	bl	800bec4 <trace>
	}

	period->obj_name = sml_octet_string_parse(buf);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7fd fb8b 	bl	800ccdc <sml_octet_string_parse>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f7fe f9eb 	bl	800d9a8 <sml_buf_has_errors>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d135      	bne.n	800f644 <sml_period_entry_parse+0xfc>

	period->unit = sml_unit_parse(buf);
 800f5d8:	2201      	movs	r2, #1
 800f5da:	2160      	movs	r1, #96	; 0x60
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7fd f98b 	bl	800c8f8 <sml_number_parse>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7fe f9dd 	bl	800d9a8 <sml_buf_has_errors>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d129      	bne.n	800f648 <sml_period_entry_parse+0x100>

	period->scaler = sml_i8_parse(buf);
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	2150      	movs	r1, #80	; 0x50
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7fd f97d 	bl	800c8f8 <sml_number_parse>
 800f5fe:	4602      	mov	r2, r0
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7fe f9cf 	bl	800d9a8 <sml_buf_has_errors>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d11d      	bne.n	800f64c <sml_period_entry_parse+0x104>

	period->value = sml_value_parse(buf);
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fdbb 	bl	801018c <sml_value_parse>
 800f616:	4602      	mov	r2, r0
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	60da      	str	r2, [r3, #12]
	if (sml_buf_has_errors(buf)) goto error;
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f7fe f9c3 	bl	800d9a8 <sml_buf_has_errors>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d113      	bne.n	800f650 <sml_period_entry_parse+0x108>

	period->value_signature = sml_octet_string_parse(buf);
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f7fd fb57 	bl	800ccdc <sml_octet_string_parse>
 800f62e:	4602      	mov	r2, r0
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	611a      	str	r2, [r3, #16]
	if (sml_buf_has_errors(buf)) goto error;
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f7fe f9b7 	bl	800d9a8 <sml_buf_has_errors>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d109      	bne.n	800f654 <sml_period_entry_parse+0x10c>

	return period;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	e00c      	b.n	800f65e <sml_period_entry_parse+0x116>
	if (sml_buf_has_errors(buf)) goto error;
 800f644:	bf00      	nop
 800f646:	e006      	b.n	800f656 <sml_period_entry_parse+0x10e>
	if (sml_buf_has_errors(buf)) goto error;
 800f648:	bf00      	nop
 800f64a:	e004      	b.n	800f656 <sml_period_entry_parse+0x10e>
	if (sml_buf_has_errors(buf)) goto error;
 800f64c:	bf00      	nop
 800f64e:	e002      	b.n	800f656 <sml_period_entry_parse+0x10e>
	if (sml_buf_has_errors(buf)) goto error;
 800f650:	bf00      	nop
 800f652:	e000      	b.n	800f656 <sml_period_entry_parse+0x10e>
	if (sml_buf_has_errors(buf)) goto error;
 800f654:	bf00      	nop

error:
	sml_period_entry_free(period);
 800f656:	68f8      	ldr	r0, [r7, #12]
 800f658:	f000 f86a 	bl	800f730 <sml_period_entry_free>
	return NULL;
 800f65c:	2300      	movs	r3, #0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3710      	adds	r7, #16
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	08012228 	.word	0x08012228

0800f66c <sml_period_entry_write>:

int sml_period_entry_write(sml_period_entry *period, sml_buffer *buf)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
	int rv;

	if (!buf)
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d102      	bne.n	800f682 <sml_period_entry_write+0x16>
	{
		return SML_PARAMETER_ERROR;
 800f67c:	f240 33e6 	movw	r3, #998	; 0x3e6
 800f680:	e052      	b.n	800f728 <sml_period_entry_write+0xbc>
	}

	if (period == 0)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d105      	bne.n	800f694 <sml_period_entry_write+0x28>
    {
		rv = sml_buf_optional_write(buf);
 800f688:	6838      	ldr	r0, [r7, #0]
 800f68a:	f7fe f9e1 	bl	800da50 <sml_buf_optional_write>
 800f68e:	60f8      	str	r0, [r7, #12]
		return rv;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	e049      	b.n	800f728 <sml_period_entry_write+0xbc>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 5);
 800f694:	2205      	movs	r2, #5
 800f696:	2170      	movs	r1, #112	; 0x70
 800f698:	6838      	ldr	r0, [r7, #0]
 800f69a:	f7fe f8e7 	bl	800d86c <sml_buf_set_type_and_length>
 800f69e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <sml_period_entry_write+0x3e>
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	e03e      	b.n	800f728 <sml_period_entry_write+0xbc>

	rv = sml_octet_string_write(period->obj_name, buf);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	6839      	ldr	r1, [r7, #0]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fd fb5f 	bl	800cd74 <sml_octet_string_write>
 800f6b6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d001      	beq.n	800f6c2 <sml_period_entry_write+0x56>
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	e032      	b.n	800f728 <sml_period_entry_write+0xbc>

	rv = sml_unit_write(period->unit, buf);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6858      	ldr	r0, [r3, #4]
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	2160      	movs	r1, #96	; 0x60
 800f6cc:	f7fd f9b6 	bl	800ca3c <sml_number_write>
 800f6d0:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d001      	beq.n	800f6dc <sml_period_entry_write+0x70>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	e025      	b.n	800f728 <sml_period_entry_write+0xbc>

	rv = sml_i8_write(period->scaler, buf);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6898      	ldr	r0, [r3, #8]
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	2150      	movs	r1, #80	; 0x50
 800f6e6:	f7fd f9a9 	bl	800ca3c <sml_number_write>
 800f6ea:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d001      	beq.n	800f6f6 <sml_period_entry_write+0x8a>
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	e018      	b.n	800f728 <sml_period_entry_write+0xbc>

	rv = sml_value_write(period->value, buf);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	6839      	ldr	r1, [r7, #0]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 fdd7 	bl	80102b0 <sml_value_write>
 800f702:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d001      	beq.n	800f70e <sml_period_entry_write+0xa2>
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	e00c      	b.n	800f728 <sml_period_entry_write+0xbc>

	rv = sml_octet_string_write(period->value_signature, buf);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	691b      	ldr	r3, [r3, #16]
 800f712:	6839      	ldr	r1, [r7, #0]
 800f714:	4618      	mov	r0, r3
 800f716:	f7fd fb2d 	bl	800cd74 <sml_octet_string_write>
 800f71a:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d001      	beq.n	800f726 <sml_period_entry_write+0xba>
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	e000      	b.n	800f728 <sml_period_entry_write+0xbc>

	return rv;
 800f726:	68fb      	ldr	r3, [r7, #12]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3710      	adds	r7, #16
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <sml_period_entry_free>:

void sml_period_entry_free(sml_period_entry *period)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
	if (period)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d01b      	beq.n	800f776 <sml_period_entry_free+0x46>
    {
		sml_octet_string_free(period->obj_name);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4618      	mov	r0, r3
 800f744:	f7fd fb5b 	bl	800cdfe <sml_octet_string_free>
		sml_unit_free(period->unit);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7fd fa22 	bl	800cb96 <sml_number_free>
		sml_number_free(period->scaler);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	689b      	ldr	r3, [r3, #8]
 800f756:	4618      	mov	r0, r3
 800f758:	f7fd fa1d 	bl	800cb96 <sml_number_free>
		sml_value_free(period->value);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	4618      	mov	r0, r3
 800f762:	f000 fdfa 	bl	801035a <sml_value_free>
		sml_octet_string_free(period->value_signature);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	691b      	ldr	r3, [r3, #16]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fd fb47 	bl	800cdfe <sml_octet_string_free>

		free(period);
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f7f9 fd37 	bl	80091e4 <vPortFree>
	}
}
 800f776:	bf00      	nop
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
	...

0800f780 <sml_simple_value_init>:
#include <sml/sml_log.h>

// sml_simple_value;

sml_simple_value *sml_simple_value_init(void)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
	sml_simple_value *simple_value = (sml_simple_value *)malloc(sizeof(sml_simple_value));
 800f786:	2008      	movs	r0, #8
 800f788:	f7f9 fc6a 	bl	8009060 <pvPortMalloc>
 800f78c:	6078      	str	r0, [r7, #4]
	if (!simple_value)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d105      	bne.n	800f7a0 <sml_simple_value_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_simple_value));
 800f794:	2108      	movs	r1, #8
 800f796:	4807      	ldr	r0, [pc, #28]	; (800f7b4 <sml_simple_value_init+0x34>)
 800f798:	f7fc fb94 	bl	800bec4 <trace>
		return NULL;
 800f79c:	2300      	movs	r3, #0
 800f79e:	e005      	b.n	800f7ac <sml_simple_value_init+0x2c>
	}
	memset(simple_value, 0, sizeof(sml_simple_value));
 800f7a0:	2208      	movs	r2, #8
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 fe4b 	bl	8010440 <memset>
	
	return simple_value;
 800f7aa:	687b      	ldr	r3, [r7, #4]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	0801223c 	.word	0x0801223c

0800f7b8 <sml_simple_value_parse>:

sml_simple_value *sml_simple_value_parse(sml_buffer *buf)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
   	int max = 1;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	617b      	str	r3, [r7, #20]
	u8 type;
	unsigned char byte;
    sml_simple_value *simple_value = NULL;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	613b      	str	r3, [r7, #16]

	if (!buf)
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d101      	bne.n	800f7d2 <sml_simple_value_parse+0x1a>
	{
		return NULL;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	e074      	b.n	800f8bc <sml_simple_value_parse+0x104>
	}

	if (sml_buf_optional_is_skipped(buf))
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7fe f959 	bl	800da8a <sml_buf_optional_is_skipped>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d001      	beq.n	800f7e2 <sml_simple_value_parse+0x2a>
    {
		return NULL;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	e06c      	b.n	800f8bc <sml_simple_value_parse+0x104>
	}

    type = sml_buf_get_next_type(buf);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f7fe f8f1 	bl	800d9ca <sml_buf_get_next_type>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	73fb      	strb	r3, [r7, #15]
	byte = sml_buf_get_current_byte(buf);
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7fe f8ff 	bl	800d9f0 <sml_buf_get_current_byte>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	73bb      	strb	r3, [r7, #14]

	simple_value = sml_simple_value_init();
 800f7f6:	f7ff ffc3 	bl	800f780 <sml_simple_value_init>
 800f7fa:	6138      	str	r0, [r7, #16]
	if (!simple_value)
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d105      	bne.n	800f80e <sml_simple_value_parse+0x56>
    {
		buf->error = SML_MALLOC_ERROR;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f808:	611a      	str	r2, [r3, #16]
		return NULL;
 800f80a:	2300      	movs	r3, #0
 800f80c:	e056      	b.n	800f8bc <sml_simple_value_parse+0x104>
	}

	simple_value->type = type;
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	7bfa      	ldrb	r2, [r7, #15]
 800f812:	701a      	strb	r2, [r3, #0]

	if (sml_debug_output(buf))
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7fe f94d 	bl	800dab4 <sml_debug_output>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d004      	beq.n	800f82a <sml_simple_value_parse+0x72>
    {
		trace("\t\tSIMPLE VALUE\t%i\r\n", type);
 800f820:	7bfb      	ldrb	r3, [r7, #15]
 800f822:	4619      	mov	r1, r3
 800f824:	4827      	ldr	r0, [pc, #156]	; (800f8c4 <sml_simple_value_parse+0x10c>)
 800f826:	f7fc fb4d 	bl	800bec4 <trace>
	}

	switch (type)
 800f82a:	7bfb      	ldrb	r3, [r7, #15]
 800f82c:	2b40      	cmp	r3, #64	; 0x40
 800f82e:	d010      	beq.n	800f852 <sml_simple_value_parse+0x9a>
 800f830:	2b40      	cmp	r3, #64	; 0x40
 800f832:	dc02      	bgt.n	800f83a <sml_simple_value_parse+0x82>
 800f834:	2b00      	cmp	r3, #0
 800f836:	d005      	beq.n	800f844 <sml_simple_value_parse+0x8c>
 800f838:	e030      	b.n	800f89c <sml_simple_value_parse+0xe4>
 800f83a:	2b50      	cmp	r3, #80	; 0x50
 800f83c:	d013      	beq.n	800f866 <sml_simple_value_parse+0xae>
 800f83e:	2b60      	cmp	r3, #96	; 0x60
 800f840:	d011      	beq.n	800f866 <sml_simple_value_parse+0xae>
 800f842:	e02b      	b.n	800f89c <sml_simple_value_parse+0xe4>
    {
		case SML_TYPE_OCTET_STRING:
			simple_value->data.bytes = sml_octet_string_parse(buf);
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f7fd fa49 	bl	800ccdc <sml_octet_string_parse>
 800f84a:	4602      	mov	r2, r0
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	605a      	str	r2, [r3, #4]
			break;
 800f850:	e028      	b.n	800f8a4 <sml_simple_value_parse+0xec>
		case SML_TYPE_BOOLEAN:
			simple_value->data.boolean = sml_boolean_parse(buf);
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f7f9 ff56 	bl	8009704 <sml_boolean_parse>
 800f858:	4602      	mov	r2, r0
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	605a      	str	r2, [r3, #4]
			break;
 800f85e:	e021      	b.n	800f8a4 <sml_simple_value_parse+0xec>
		case SML_TYPE_UNSIGNED:
		case SML_TYPE_INTEGER:
			// get maximal size, if not all bytes are used (example: only 6 bytes for a u64)
			while (max < ((byte & SML_LENGTH_FIELD) - 1))
            {
				max <<= 1;
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	005b      	lsls	r3, r3, #1
 800f864:	617b      	str	r3, [r7, #20]
			while (max < ((byte & SML_LENGTH_FIELD) - 1))
 800f866:	7bbb      	ldrb	r3, [r7, #14]
 800f868:	f003 030f 	and.w	r3, r3, #15
 800f86c:	3b01      	subs	r3, #1
 800f86e:	697a      	ldr	r2, [r7, #20]
 800f870:	429a      	cmp	r2, r3
 800f872:	dbf5      	blt.n	800f860 <sml_simple_value_parse+0xa8>
			}

			simple_value->data.uint8 = (u8*)sml_number_parse(buf, type, max);
 800f874:	7bfb      	ldrb	r3, [r7, #15]
 800f876:	697a      	ldr	r2, [r7, #20]
 800f878:	4619      	mov	r1, r3
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7fd f83c 	bl	800c8f8 <sml_number_parse>
 800f880:	4602      	mov	r2, r0
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	605a      	str	r2, [r3, #4]
			simple_value->type |= max;
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	b25a      	sxtb	r2, r3
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	b25b      	sxtb	r3, r3
 800f890:	4313      	orrs	r3, r2
 800f892:	b25b      	sxtb	r3, r3
 800f894:	b2da      	uxtb	r2, r3
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	701a      	strb	r2, [r3, #0]
			break;
 800f89a:	e003      	b.n	800f8a4 <sml_simple_value_parse+0xec>
		default:
			buf->error = SML_SIMPLE_VALUE_TAG_MISMATCH;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2267      	movs	r2, #103	; 0x67
 800f8a0:	611a      	str	r2, [r3, #16]
			break;
 800f8a2:	bf00      	nop
	}

	if (sml_buf_has_errors(buf))
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f7fe f87f 	bl	800d9a8 <sml_buf_has_errors>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d004      	beq.n	800f8ba <sml_simple_value_parse+0x102>
    {
		sml_simple_value_free(simple_value);
 800f8b0:	6938      	ldr	r0, [r7, #16]
 800f8b2:	f000 f854 	bl	800f95e <sml_simple_value_free>
		return NULL;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	e000      	b.n	800f8bc <sml_simple_value_parse+0x104>
	}

	return simple_value;
 800f8ba:	693b      	ldr	r3, [r7, #16]
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3718      	adds	r7, #24
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	08012258 	.word	0x08012258

0800f8c8 <sml_simple_value_write>:

int sml_simple_value_write(sml_simple_value *simple_value, sml_buffer *buf)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
	int rv = SML_OK;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d102      	bne.n	800f8e2 <sml_simple_value_write+0x1a>
	{
		return SML_PARAMETER_ERROR;
 800f8dc:	f240 33e6 	movw	r3, #998	; 0x3e6
 800f8e0:	e039      	b.n	800f956 <sml_simple_value_write+0x8e>
	}

	if (simple_value == 0)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d105      	bne.n	800f8f4 <sml_simple_value_write+0x2c>
    {
		rv = sml_buf_optional_write(buf);
 800f8e8:	6838      	ldr	r0, [r7, #0]
 800f8ea:	f7fe f8b1 	bl	800da50 <sml_buf_optional_write>
 800f8ee:	60f8      	str	r0, [r7, #12]
		return rv;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	e030      	b.n	800f956 <sml_simple_value_write+0x8e>
	}

	switch (simple_value->type & SML_TYPE_FIELD)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f8fc:	2b40      	cmp	r3, #64	; 0x40
 800f8fe:	d011      	beq.n	800f924 <sml_simple_value_write+0x5c>
 800f900:	2b40      	cmp	r3, #64	; 0x40
 800f902:	dc02      	bgt.n	800f90a <sml_simple_value_write+0x42>
 800f904:	2b00      	cmp	r3, #0
 800f906:	d005      	beq.n	800f914 <sml_simple_value_write+0x4c>
 800f908:	e024      	b.n	800f954 <sml_simple_value_write+0x8c>
 800f90a:	2b50      	cmp	r3, #80	; 0x50
 800f90c:	d012      	beq.n	800f934 <sml_simple_value_write+0x6c>
 800f90e:	2b60      	cmp	r3, #96	; 0x60
 800f910:	d010      	beq.n	800f934 <sml_simple_value_write+0x6c>
 800f912:	e01f      	b.n	800f954 <sml_simple_value_write+0x8c>
    {
		case SML_TYPE_OCTET_STRING:
			rv = sml_octet_string_write(simple_value->data.bytes, buf);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	6839      	ldr	r1, [r7, #0]
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fd fa2a 	bl	800cd74 <sml_octet_string_write>
 800f920:	60f8      	str	r0, [r7, #12]
			break;
 800f922:	e017      	b.n	800f954 <sml_simple_value_write+0x8c>
		case SML_TYPE_BOOLEAN:
			rv = sml_boolean_write(simple_value->data.boolean, buf);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	6839      	ldr	r1, [r7, #0]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7f9 ff46 	bl	80097bc <sml_boolean_write>
 800f930:	60f8      	str	r0, [r7, #12]
			break;
 800f932:	e00f      	b.n	800f954 <sml_simple_value_write+0x8c>
		case SML_TYPE_UNSIGNED:
		case SML_TYPE_INTEGER:
			rv = sml_number_write(simple_value->data.uint8, (simple_value->type & SML_TYPE_FIELD),
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6858      	ldr	r0, [r3, #4]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f940:	b2d9      	uxtb	r1, r3
				(simple_value->type & SML_LENGTH_FIELD), buf);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	781b      	ldrb	r3, [r3, #0]
			rv = sml_number_write(simple_value->data.uint8, (simple_value->type & SML_TYPE_FIELD),
 800f946:	f003 020f 	and.w	r2, r3, #15
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	f7fd f876 	bl	800ca3c <sml_number_write>
 800f950:	60f8      	str	r0, [r7, #12]
			break;
 800f952:	bf00      	nop
	}

	return rv;
 800f954:	68fb      	ldr	r3, [r7, #12]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <sml_simple_value_free>:

void sml_simple_value_free(sml_simple_value *simple_value)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b082      	sub	sp, #8
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
	if (simple_value)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d01b      	beq.n	800f9a4 <sml_simple_value_free+0x46>
    {
		switch (simple_value->type)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d002      	beq.n	800f97a <sml_simple_value_free+0x1c>
 800f974:	2b40      	cmp	r3, #64	; 0x40
 800f976:	d006      	beq.n	800f986 <sml_simple_value_free+0x28>
 800f978:	e00b      	b.n	800f992 <sml_simple_value_free+0x34>
        {
			case SML_TYPE_OCTET_STRING:
				sml_octet_string_free(simple_value->data.bytes);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fd fa3d 	bl	800cdfe <sml_octet_string_free>
				break;
 800f984:	e00b      	b.n	800f99e <sml_simple_value_free+0x40>
			case SML_TYPE_BOOLEAN:
				sml_boolean_free(simple_value->data.boolean);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7f9 ff52 	bl	8009834 <sml_boolean_free>
				break;
 800f990:	e005      	b.n	800f99e <sml_simple_value_free+0x40>
			default:
				sml_number_free(simple_value->data.int8);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	4618      	mov	r0, r3
 800f998:	f7fd f8fd 	bl	800cb96 <sml_number_free>
				break;
 800f99c:	bf00      	nop
		}
		free(simple_value);
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f7f9 fc20 	bl	80091e4 <vPortFree>
	}
}
 800f9a4:	bf00      	nop
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <sml_timestamped_value_init>:

// sml_timestamped_value;

sml_timestamped_value *sml_timestamped_value_init(void)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
	sml_timestamped_value *timestamped_value = (sml_timestamped_value *)malloc(sizeof(sml_timestamped_value));
 800f9b2:	200c      	movs	r0, #12
 800f9b4:	f7f9 fb54 	bl	8009060 <pvPortMalloc>
 800f9b8:	6078      	str	r0, [r7, #4]
	if (!timestamped_value)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d105      	bne.n	800f9cc <sml_timestamped_value_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_timestamped_value));
 800f9c0:	210c      	movs	r1, #12
 800f9c2:	4807      	ldr	r0, [pc, #28]	; (800f9e0 <sml_timestamped_value_init+0x34>)
 800f9c4:	f7fc fa7e 	bl	800bec4 <trace>
		return NULL;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	e005      	b.n	800f9d8 <sml_timestamped_value_init+0x2c>
	}
	memset(timestamped_value, 0, sizeof(sml_timestamped_value));
 800f9cc:	220c      	movs	r2, #12
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f000 fd35 	bl	8010440 <memset>
	
	return timestamped_value;
 800f9d6:	687b      	ldr	r3, [r7, #4]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3708      	adds	r7, #8
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	0801223c 	.word	0x0801223c

0800f9e4 <sml_timestamped_value_parse>:

sml_timestamped_value *sml_timestamped_value_parse(sml_buffer *buf)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
    sml_timestamped_value *timestamped_value = NULL;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d101      	bne.n	800f9fa <sml_timestamped_value_parse+0x16>
	{
		return NULL;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	e05f      	b.n	800faba <sml_timestamped_value_parse+0xd6>
	}

	if (sml_buf_optional_is_skipped(buf))
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7fe f845 	bl	800da8a <sml_buf_optional_is_skipped>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <sml_timestamped_value_parse+0x26>
    {
		return NULL;
 800fa06:	2300      	movs	r3, #0
 800fa08:	e057      	b.n	800faba <sml_timestamped_value_parse+0xd6>
	}

	timestamped_value = sml_timestamped_value_init();
 800fa0a:	f7ff ffcf 	bl	800f9ac <sml_timestamped_value_init>
 800fa0e:	60f8      	str	r0, [r7, #12]
	if (!timestamped_value)
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d105      	bne.n	800fa22 <sml_timestamped_value_parse+0x3e>
    {
		buf->error = SML_MALLOC_ERROR;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fa1c:	611a      	str	r2, [r3, #16]
		return NULL;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	e04b      	b.n	800faba <sml_timestamped_value_parse+0xd6>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f7fd ffd1 	bl	800d9ca <sml_buf_get_next_type>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b70      	cmp	r3, #112	; 0x70
 800fa2c:	d003      	beq.n	800fa36 <sml_timestamped_value_parse+0x52>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2232      	movs	r2, #50	; 0x32
 800fa32:	611a      	str	r2, [r3, #16]
		goto error;
 800fa34:	e03d      	b.n	800fab2 <sml_timestamped_value_parse+0xce>
	}

	if (sml_buf_get_next_length(buf) != 3)
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f7fd feb6 	bl	800d7a8 <sml_buf_get_next_length>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b03      	cmp	r3, #3
 800fa40:	d003      	beq.n	800fa4a <sml_timestamped_value_parse+0x66>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2220      	movs	r2, #32
 800fa46:	611a      	str	r2, [r3, #16]
		goto error;
 800fa48:	e033      	b.n	800fab2 <sml_timestamped_value_parse+0xce>
	}

	if (sml_debug_output(buf))
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f7fe f832 	bl	800dab4 <sml_debug_output>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d002      	beq.n	800fa5c <sml_timestamped_value_parse+0x78>
    {
		trace("\t\tTIMESTAMPED VALUE\r\n");
 800fa56:	481b      	ldr	r0, [pc, #108]	; (800fac4 <sml_timestamped_value_parse+0xe0>)
 800fa58:	f7fc fa34 	bl	800bec4 <trace>
	}

	timestamped_value->time = sml_time_parse(buf);
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7fe fa19 	bl	800de94 <sml_time_parse>
 800fa62:	4602      	mov	r2, r0
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f7fd ff9d 	bl	800d9a8 <sml_buf_has_errors>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d119      	bne.n	800faa8 <sml_timestamped_value_parse+0xc4>

	timestamped_value->status = sml_status_parse(buf);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f7fe f847 	bl	800db08 <sml_status_parse>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7fd ff91 	bl	800d9a8 <sml_buf_has_errors>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10f      	bne.n	800faac <sml_timestamped_value_parse+0xc8>

	timestamped_value->simple_value = sml_simple_value_parse(buf);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7ff fe93 	bl	800f7b8 <sml_simple_value_parse>
 800fa92:	4602      	mov	r2, r0
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	609a      	str	r2, [r3, #8]
	if (sml_buf_has_errors(buf)) goto error;
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f7fd ff85 	bl	800d9a8 <sml_buf_has_errors>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d105      	bne.n	800fab0 <sml_timestamped_value_parse+0xcc>

	return timestamped_value;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	e008      	b.n	800faba <sml_timestamped_value_parse+0xd6>
	if (sml_buf_has_errors(buf)) goto error;
 800faa8:	bf00      	nop
 800faaa:	e002      	b.n	800fab2 <sml_timestamped_value_parse+0xce>
	if (sml_buf_has_errors(buf)) goto error;
 800faac:	bf00      	nop
 800faae:	e000      	b.n	800fab2 <sml_timestamped_value_parse+0xce>
	if (sml_buf_has_errors(buf)) goto error;
 800fab0:	bf00      	nop

error:
	sml_timestamped_value_free(timestamped_value);
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f000 f84a 	bl	800fb4c <sml_timestamped_value_free>
	return NULL;
 800fab8:	2300      	movs	r3, #0
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	0801226c 	.word	0x0801226c

0800fac8 <sml_timestamped_value_write>:

int sml_timestamped_value_write(sml_timestamped_value *timestamped_value, sml_buffer *buf)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b084      	sub	sp, #16
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
	int rv;

	if (!timestamped_value || !buf)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d002      	beq.n	800fade <sml_timestamped_value_write+0x16>
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d102      	bne.n	800fae4 <sml_timestamped_value_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800fade:	f240 33e6 	movw	r3, #998	; 0x3e6
 800fae2:	e02f      	b.n	800fb44 <sml_timestamped_value_write+0x7c>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 3);
 800fae4:	2203      	movs	r2, #3
 800fae6:	2170      	movs	r1, #112	; 0x70
 800fae8:	6838      	ldr	r0, [r7, #0]
 800faea:	f7fd febf 	bl	800d86c <sml_buf_set_type_and_length>
 800faee:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d001      	beq.n	800fafa <sml_timestamped_value_write+0x32>
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	e024      	b.n	800fb44 <sml_timestamped_value_write+0x7c>

	rv = sml_time_write(timestamped_value->time, buf);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	6839      	ldr	r1, [r7, #0]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7fe fa5d 	bl	800dfc0 <sml_time_write>
 800fb06:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <sml_timestamped_value_write+0x4a>
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	e018      	b.n	800fb44 <sml_timestamped_value_write+0x7c>

	rv = sml_status_write(timestamped_value->status, buf);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	6839      	ldr	r1, [r7, #0]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7fe f867 	bl	800dbec <sml_status_write>
 800fb1e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d001      	beq.n	800fb2a <sml_timestamped_value_write+0x62>
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	e00c      	b.n	800fb44 <sml_timestamped_value_write+0x7c>

	rv = sml_simple_value_write(timestamped_value->simple_value, buf);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7ff fec9 	bl	800f8c8 <sml_simple_value_write>
 800fb36:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d001      	beq.n	800fb42 <sml_timestamped_value_write+0x7a>
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	e000      	b.n	800fb44 <sml_timestamped_value_write+0x7c>

	return rv;
 800fb42:	68fb      	ldr	r3, [r7, #12]
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3710      	adds	r7, #16
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <sml_timestamped_value_free>:

void sml_timestamped_value_free(sml_timestamped_value *timestamped_value)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
    if (timestamped_value)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d011      	beq.n	800fb7e <sml_timestamped_value_free+0x32>
    {
		sml_time_free(timestamped_value->time);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fe fa7a 	bl	800e058 <sml_time_free>
		sml_status_free(timestamped_value->status);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fe f86e 	bl	800dc4a <sml_status_free>
		sml_simple_value_free(timestamped_value->simple_value);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	689b      	ldr	r3, [r3, #8]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7ff fef3 	bl	800f95e <sml_simple_value_free>
        free(timestamped_value);
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f7f9 fb33 	bl	80091e4 <vPortFree>
    }
}
 800fb7e:	bf00      	nop
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
	...

0800fb88 <sml_cosem_scaler_unit_init>:

// sml_cosem_scaler_unit;

sml_cosem_scaler_unit *sml_cosem_scaler_unit_init(void)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
	sml_cosem_scaler_unit *cosem_scaler_unit = (sml_cosem_scaler_unit *)malloc(sizeof(sml_cosem_scaler_unit));
 800fb8e:	2008      	movs	r0, #8
 800fb90:	f7f9 fa66 	bl	8009060 <pvPortMalloc>
 800fb94:	6078      	str	r0, [r7, #4]
	if (!cosem_scaler_unit)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d105      	bne.n	800fba8 <sml_cosem_scaler_unit_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_cosem_scaler_unit));
 800fb9c:	2108      	movs	r1, #8
 800fb9e:	4807      	ldr	r0, [pc, #28]	; (800fbbc <sml_cosem_scaler_unit_init+0x34>)
 800fba0:	f7fc f990 	bl	800bec4 <trace>
		return NULL;
 800fba4:	2300      	movs	r3, #0
 800fba6:	e005      	b.n	800fbb4 <sml_cosem_scaler_unit_init+0x2c>
	}
	memset(cosem_scaler_unit, 0, sizeof(sml_cosem_scaler_unit));
 800fba8:	2208      	movs	r2, #8
 800fbaa:	2100      	movs	r1, #0
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f000 fc47 	bl	8010440 <memset>
	
	return cosem_scaler_unit;
 800fbb2:	687b      	ldr	r3, [r7, #4]
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	0801223c 	.word	0x0801223c

0800fbc0 <sml_cosem_scaler_unit_parse>:

sml_cosem_scaler_unit *sml_cosem_scaler_unit_parse(sml_buffer *buf)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
    sml_cosem_scaler_unit *cosem_scaler_unit = NULL;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d101      	bne.n	800fbd6 <sml_cosem_scaler_unit_parse+0x16>
	{
		return NULL;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	e055      	b.n	800fc82 <sml_cosem_scaler_unit_parse+0xc2>
	}

	if (sml_buf_optional_is_skipped(buf))
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f7fd ff57 	bl	800da8a <sml_buf_optional_is_skipped>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d001      	beq.n	800fbe6 <sml_cosem_scaler_unit_parse+0x26>
    {
		return NULL;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	e04d      	b.n	800fc82 <sml_cosem_scaler_unit_parse+0xc2>
	}

	cosem_scaler_unit = sml_cosem_scaler_unit_init();
 800fbe6:	f7ff ffcf 	bl	800fb88 <sml_cosem_scaler_unit_init>
 800fbea:	60f8      	str	r0, [r7, #12]
	if (!cosem_scaler_unit)
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d105      	bne.n	800fbfe <sml_cosem_scaler_unit_parse+0x3e>
    {
		buf->error = SML_MALLOC_ERROR;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fbf8:	611a      	str	r2, [r3, #16]
		return NULL;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	e041      	b.n	800fc82 <sml_cosem_scaler_unit_parse+0xc2>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f7fd fee3 	bl	800d9ca <sml_buf_get_next_type>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b70      	cmp	r3, #112	; 0x70
 800fc08:	d003      	beq.n	800fc12 <sml_cosem_scaler_unit_parse+0x52>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2232      	movs	r2, #50	; 0x32
 800fc0e:	611a      	str	r2, [r3, #16]
		goto error;
 800fc10:	e033      	b.n	800fc7a <sml_cosem_scaler_unit_parse+0xba>
	}

	if (sml_buf_get_next_length(buf) != 2)
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f7fd fdc8 	bl	800d7a8 <sml_buf_get_next_length>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d003      	beq.n	800fc26 <sml_cosem_scaler_unit_parse+0x66>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2220      	movs	r2, #32
 800fc22:	611a      	str	r2, [r3, #16]
		goto error;
 800fc24:	e029      	b.n	800fc7a <sml_cosem_scaler_unit_parse+0xba>
	}

	if (sml_debug_output(buf))
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f7fd ff44 	bl	800dab4 <sml_debug_output>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d002      	beq.n	800fc38 <sml_cosem_scaler_unit_parse+0x78>
    {
		trace("\t\tCOSEM SCALER UNIT\r\n");
 800fc32:	4816      	ldr	r0, [pc, #88]	; (800fc8c <sml_cosem_scaler_unit_parse+0xcc>)
 800fc34:	f7fc f946 	bl	800bec4 <trace>
	}

	cosem_scaler_unit->scaler = sml_i8_parse(buf);
 800fc38:	2201      	movs	r2, #1
 800fc3a:	2150      	movs	r1, #80	; 0x50
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7fc fe5b 	bl	800c8f8 <sml_number_parse>
 800fc42:	4602      	mov	r2, r0
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7fd fead 	bl	800d9a8 <sml_buf_has_errors>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d10f      	bne.n	800fc74 <sml_cosem_scaler_unit_parse+0xb4>

	cosem_scaler_unit->unit = sml_u8_parse(buf);
 800fc54:	2201      	movs	r2, #1
 800fc56:	2160      	movs	r1, #96	; 0x60
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7fc fe4d 	bl	800c8f8 <sml_number_parse>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	605a      	str	r2, [r3, #4]
	if (sml_buf_has_errors(buf)) goto error;
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f7fd fe9f 	bl	800d9a8 <sml_buf_has_errors>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d103      	bne.n	800fc78 <sml_cosem_scaler_unit_parse+0xb8>

	return cosem_scaler_unit;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	e006      	b.n	800fc82 <sml_cosem_scaler_unit_parse+0xc2>
	if (sml_buf_has_errors(buf)) goto error;
 800fc74:	bf00      	nop
 800fc76:	e000      	b.n	800fc7a <sml_cosem_scaler_unit_parse+0xba>
	if (sml_buf_has_errors(buf)) goto error;
 800fc78:	bf00      	nop

error:
	sml_cosem_scaler_unit_free(cosem_scaler_unit);
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	f000 f840 	bl	800fd00 <sml_cosem_scaler_unit_free>
	return NULL;
 800fc80:	2300      	movs	r3, #0
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	08012284 	.word	0x08012284

0800fc90 <sml_cosem_scaler_unit_write>:

int sml_cosem_scaler_unit_write(sml_cosem_scaler_unit *cosem_scaler_unit, sml_buffer *buf)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
	int rv;

	if (!cosem_scaler_unit || !buf)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <sml_cosem_scaler_unit_write+0x16>
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d102      	bne.n	800fcac <sml_cosem_scaler_unit_write+0x1c>
	{
		return SML_PARAMETER_ERROR;
 800fca6:	f240 33e6 	movw	r3, #998	; 0x3e6
 800fcaa:	e025      	b.n	800fcf8 <sml_cosem_scaler_unit_write+0x68>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 2);
 800fcac:	2202      	movs	r2, #2
 800fcae:	2170      	movs	r1, #112	; 0x70
 800fcb0:	6838      	ldr	r0, [r7, #0]
 800fcb2:	f7fd fddb 	bl	800d86c <sml_buf_set_type_and_length>
 800fcb6:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d001      	beq.n	800fcc2 <sml_cosem_scaler_unit_write+0x32>
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	e01a      	b.n	800fcf8 <sml_cosem_scaler_unit_write+0x68>

	rv = sml_i8_write(cosem_scaler_unit->scaler, buf);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6818      	ldr	r0, [r3, #0]
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	2201      	movs	r2, #1
 800fcca:	2150      	movs	r1, #80	; 0x50
 800fccc:	f7fc feb6 	bl	800ca3c <sml_number_write>
 800fcd0:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d001      	beq.n	800fcdc <sml_cosem_scaler_unit_write+0x4c>
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	e00d      	b.n	800fcf8 <sml_cosem_scaler_unit_write+0x68>

	rv = sml_u8_write(cosem_scaler_unit->unit, buf);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6858      	ldr	r0, [r3, #4]
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	2201      	movs	r2, #1
 800fce4:	2160      	movs	r1, #96	; 0x60
 800fce6:	f7fc fea9 	bl	800ca3c <sml_number_write>
 800fcea:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d001      	beq.n	800fcf6 <sml_cosem_scaler_unit_write+0x66>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	e000      	b.n	800fcf8 <sml_cosem_scaler_unit_write+0x68>

	return rv;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3710      	adds	r7, #16
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <sml_cosem_scaler_unit_free>:

void sml_cosem_scaler_unit_free(sml_cosem_scaler_unit *cosem_scaler_unit)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
    if (cosem_scaler_unit)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d00c      	beq.n	800fd28 <sml_cosem_scaler_unit_free+0x28>
    {
		sml_number_free(cosem_scaler_unit->scaler);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fc ff3f 	bl	800cb96 <sml_number_free>
		sml_number_free(cosem_scaler_unit->unit);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7fc ff3a 	bl	800cb96 <sml_number_free>
        free(cosem_scaler_unit);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7f9 fa5e 	bl	80091e4 <vPortFree>
    }
}
 800fd28:	bf00      	nop
 800fd2a:	3708      	adds	r7, #8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <sml_cosem_value_init>:

// sml_cosem_value;

sml_cosem_value *sml_cosem_value_init(void)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
	sml_cosem_value *cosem_value = (sml_cosem_value *)malloc(sizeof(sml_cosem_value));
 800fd36:	2008      	movs	r0, #8
 800fd38:	f7f9 f992 	bl	8009060 <pvPortMalloc>
 800fd3c:	6078      	str	r0, [r7, #4]
	if (!cosem_value)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d105      	bne.n	800fd50 <sml_cosem_value_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_cosem_value));
 800fd44:	2108      	movs	r1, #8
 800fd46:	4807      	ldr	r0, [pc, #28]	; (800fd64 <sml_cosem_value_init+0x34>)
 800fd48:	f7fc f8bc 	bl	800bec4 <trace>
		return NULL;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	e005      	b.n	800fd5c <sml_cosem_value_init+0x2c>
	}
	memset(cosem_value, 0, sizeof(sml_cosem_value));
 800fd50:	2208      	movs	r2, #8
 800fd52:	2100      	movs	r1, #0
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 fb73 	bl	8010440 <memset>
	
	return cosem_value;
 800fd5a:	687b      	ldr	r3, [r7, #4]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	0801223c 	.word	0x0801223c

0800fd68 <sml_cosem_value_parse>:

sml_cosem_value *sml_cosem_value_parse(sml_buffer *buf)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
    sml_cosem_value *cosem_value = NULL;
 800fd70:	2300      	movs	r3, #0
 800fd72:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d101      	bne.n	800fd7e <sml_cosem_value_parse+0x16>
	{
		return NULL;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	e05f      	b.n	800fe3e <sml_cosem_value_parse+0xd6>
	}

	if (sml_buf_optional_is_skipped(buf))
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f7fd fe83 	bl	800da8a <sml_buf_optional_is_skipped>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <sml_cosem_value_parse+0x26>
    {
		return NULL;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	e057      	b.n	800fe3e <sml_cosem_value_parse+0xd6>
	}

	cosem_value = sml_cosem_value_init();
 800fd8e:	f7ff ffcf 	bl	800fd30 <sml_cosem_value_init>
 800fd92:	60f8      	str	r0, [r7, #12]
	if (!cosem_value)
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d105      	bne.n	800fda6 <sml_cosem_value_parse+0x3e>
    {
		buf->error = SML_MALLOC_ERROR;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fda0:	611a      	str	r2, [r3, #16]
		return NULL;
 800fda2:	2300      	movs	r3, #0
 800fda4:	e04b      	b.n	800fe3e <sml_cosem_value_parse+0xd6>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7fd fe0f 	bl	800d9ca <sml_buf_get_next_type>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b70      	cmp	r3, #112	; 0x70
 800fdb0:	d003      	beq.n	800fdba <sml_cosem_value_parse+0x52>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2232      	movs	r2, #50	; 0x32
 800fdb6:	611a      	str	r2, [r3, #16]
		goto error;
 800fdb8:	e03d      	b.n	800fe36 <sml_cosem_value_parse+0xce>
	}

	if (sml_buf_get_next_length(buf) != 2)
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7fd fcf4 	bl	800d7a8 <sml_buf_get_next_length>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b02      	cmp	r3, #2
 800fdc4:	d003      	beq.n	800fdce <sml_cosem_value_parse+0x66>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2220      	movs	r2, #32
 800fdca:	611a      	str	r2, [r3, #16]
		goto error;
 800fdcc:	e033      	b.n	800fe36 <sml_cosem_value_parse+0xce>
	}

	cosem_value->tag = sml_u8_parse(buf);
 800fdce:	2201      	movs	r2, #1
 800fdd0:	2160      	movs	r1, #96	; 0x60
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f7fc fd90 	bl	800c8f8 <sml_number_parse>
 800fdd8:	4602      	mov	r2, r0
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7fd fde2 	bl	800d9a8 <sml_buf_has_errors>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d122      	bne.n	800fe30 <sml_cosem_value_parse+0xc8>
	if (!cosem_value->tag) goto error;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d020      	beq.n	800fe34 <sml_cosem_value_parse+0xcc>

	if (sml_debug_output(buf))
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f7fd fe5e 	bl	800dab4 <sml_debug_output>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d006      	beq.n	800fe0c <sml_cosem_value_parse+0xa4>
    {
		trace("\t\tCOSEM VALUE\t%i\r\n", *(cosem_value->tag));
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	4619      	mov	r1, r3
 800fe06:	4810      	ldr	r0, [pc, #64]	; (800fe48 <sml_cosem_value_parse+0xe0>)
 800fe08:	f7fc f85c 	bl	800bec4 <trace>
	}

	switch (*(cosem_value->tag))
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	d108      	bne.n	800fe28 <sml_cosem_value_parse+0xc0>
    {
		case SML_COSEM_VALUE_SCALER_UNIT:
			cosem_value->data.scaler_unit = sml_cosem_scaler_unit_parse(buf);
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f7ff fed2 	bl	800fbc0 <sml_cosem_scaler_unit_parse>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	605a      	str	r2, [r3, #4]
			break;
 800fe22:	bf00      	nop
		default:
			buf->error = SML_COSEM_VALUE_TAG_MISMATCH;
			goto error;
	}

	return cosem_value;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	e00a      	b.n	800fe3e <sml_cosem_value_parse+0xd6>
			buf->error = SML_COSEM_VALUE_TAG_MISMATCH;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2268      	movs	r2, #104	; 0x68
 800fe2c:	611a      	str	r2, [r3, #16]
			goto error;
 800fe2e:	e002      	b.n	800fe36 <sml_cosem_value_parse+0xce>
	if (sml_buf_has_errors(buf)) goto error;
 800fe30:	bf00      	nop
 800fe32:	e000      	b.n	800fe36 <sml_cosem_value_parse+0xce>
	if (!cosem_value->tag) goto error;
 800fe34:	bf00      	nop

error:
	sml_cosem_value_free(cosem_value);
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f000 f846 	bl	800fec8 <sml_cosem_value_free>
	return NULL;
 800fe3c:	2300      	movs	r3, #0
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3710      	adds	r7, #16
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
 800fe46:	bf00      	nop
 800fe48:	0801229c 	.word	0x0801229c

0800fe4c <sml_cosem_value_write>:

int sml_cosem_value_write(sml_cosem_value *cosem_value, sml_buffer *buf)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	6039      	str	r1, [r7, #0]
	int rv;

	if (!buf)
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d102      	bne.n	800fe62 <sml_cosem_value_write+0x16>
	{
		return SML_PARAMETER_ERROR;
 800fe5c:	f240 33e6 	movw	r3, #998	; 0x3e6
 800fe60:	e02e      	b.n	800fec0 <sml_cosem_value_write+0x74>
	}

	if (cosem_value == 0)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d105      	bne.n	800fe74 <sml_cosem_value_write+0x28>
    {
		rv = sml_buf_optional_write(buf);
 800fe68:	6838      	ldr	r0, [r7, #0]
 800fe6a:	f7fd fdf1 	bl	800da50 <sml_buf_optional_write>
 800fe6e:	60f8      	str	r0, [r7, #12]
		return rv;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	e025      	b.n	800fec0 <sml_cosem_value_write+0x74>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 2);
 800fe74:	2202      	movs	r2, #2
 800fe76:	2170      	movs	r1, #112	; 0x70
 800fe78:	6838      	ldr	r0, [r7, #0]
 800fe7a:	f7fd fcf7 	bl	800d86c <sml_buf_set_type_and_length>
 800fe7e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d001      	beq.n	800fe8a <sml_cosem_value_write+0x3e>
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	e01a      	b.n	800fec0 <sml_cosem_value_write+0x74>

	rv = sml_u8_write(cosem_value->tag, buf);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6818      	ldr	r0, [r3, #0]
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	2201      	movs	r2, #1
 800fe92:	2160      	movs	r1, #96	; 0x60
 800fe94:	f7fc fdd2 	bl	800ca3c <sml_number_write>
 800fe98:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d001      	beq.n	800fea4 <sml_cosem_value_write+0x58>
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	e00d      	b.n	800fec0 <sml_cosem_value_write+0x74>

	switch (*(cosem_value->tag))
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d107      	bne.n	800febe <sml_cosem_value_write+0x72>
    {
		case SML_COSEM_VALUE_SCALER_UNIT:
			rv = sml_cosem_scaler_unit_write(cosem_value->data.scaler_unit, buf);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	6839      	ldr	r1, [r7, #0]
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7ff feeb 	bl	800fc90 <sml_cosem_scaler_unit_write>
 800feba:	60f8      	str	r0, [r7, #12]
			break;
 800febc:	bf00      	nop
	}

	return rv;
 800febe:	68fb      	ldr	r3, [r7, #12]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <sml_cosem_value_free>:

void sml_cosem_value_free(sml_cosem_value *cosem_value)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
    if (cosem_value)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d016      	beq.n	800ff04 <sml_cosem_value_free+0x3c>
    {
		if (cosem_value->tag)
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d00f      	beq.n	800fefe <sml_cosem_value_free+0x36>
        {
			switch (*(cosem_value->tag))
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d105      	bne.n	800fef4 <sml_cosem_value_free+0x2c>
            {
				case SML_COSEM_VALUE_SCALER_UNIT:
					sml_cosem_scaler_unit_free(cosem_value->data.scaler_unit);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	4618      	mov	r0, r3
 800feee:	f7ff ff07 	bl	800fd00 <sml_cosem_scaler_unit_free>
					break;
 800fef2:	bf00      	nop
			}
			sml_number_free(cosem_value->tag);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7fc fe4c 	bl	800cb96 <sml_number_free>
		}
        free(cosem_value);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7f9 f970 	bl	80091e4 <vPortFree>
    }
}
 800ff04:	bf00      	nop
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <sml_list_type_init>:

// sml_list_type;

sml_list_type *sml_list_type_init(void)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
	sml_list_type *list_type = (sml_list_type *)malloc(sizeof(sml_list_type));
 800ff12:	2008      	movs	r0, #8
 800ff14:	f7f9 f8a4 	bl	8009060 <pvPortMalloc>
 800ff18:	6078      	str	r0, [r7, #4]
	if (!list_type)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d105      	bne.n	800ff2c <sml_list_type_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_list_type));
 800ff20:	2108      	movs	r1, #8
 800ff22:	4807      	ldr	r0, [pc, #28]	; (800ff40 <sml_list_type_init+0x34>)
 800ff24:	f7fb ffce 	bl	800bec4 <trace>
		return NULL;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	e005      	b.n	800ff38 <sml_list_type_init+0x2c>
	}
	memset(list_type, 0, sizeof(sml_list_type));
 800ff2c:	2208      	movs	r2, #8
 800ff2e:	2100      	movs	r1, #0
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 fa85 	bl	8010440 <memset>
	
	return list_type;
 800ff36:	687b      	ldr	r3, [r7, #4]
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	0801223c 	.word	0x0801223c

0800ff44 <sml_list_type_parse>:

sml_list_type *sml_list_type_parse(sml_buffer *buf)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
    sml_list_type *list_type = NULL;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	60fb      	str	r3, [r7, #12]

	if (!buf)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d101      	bne.n	800ff5a <sml_list_type_parse+0x16>
	{
		return NULL;
 800ff56:	2300      	movs	r3, #0
 800ff58:	e071      	b.n	801003e <sml_list_type_parse+0xfa>
	}

	if (sml_buf_optional_is_skipped(buf))
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7fd fd95 	bl	800da8a <sml_buf_optional_is_skipped>
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d001      	beq.n	800ff6a <sml_list_type_parse+0x26>
    {
		return NULL;
 800ff66:	2300      	movs	r3, #0
 800ff68:	e069      	b.n	801003e <sml_list_type_parse+0xfa>
	}

	list_type = sml_list_type_init();
 800ff6a:	f7ff ffcf 	bl	800ff0c <sml_list_type_init>
 800ff6e:	60f8      	str	r0, [r7, #12]
	if (!list_type)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d105      	bne.n	800ff82 <sml_list_type_parse+0x3e>
    {
		buf->error = SML_MALLOC_ERROR;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ff7c:	611a      	str	r2, [r3, #16]
		return NULL;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	e05d      	b.n	801003e <sml_list_type_parse+0xfa>
	}

	if (sml_buf_get_next_type(buf) != SML_TYPE_LIST)
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f7fd fd21 	bl	800d9ca <sml_buf_get_next_type>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	2b70      	cmp	r3, #112	; 0x70
 800ff8c:	d003      	beq.n	800ff96 <sml_list_type_parse+0x52>
    {
		buf->error = SML_TYPE_LIST_EXPECTED;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2232      	movs	r2, #50	; 0x32
 800ff92:	611a      	str	r2, [r3, #16]
		goto error;
 800ff94:	e04f      	b.n	8010036 <sml_list_type_parse+0xf2>
	}

	if (sml_buf_get_next_length(buf) != 2)
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7fd fc06 	bl	800d7a8 <sml_buf_get_next_length>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2b02      	cmp	r3, #2
 800ffa0:	d003      	beq.n	800ffaa <sml_list_type_parse+0x66>
    {
		buf->error = SML_EXPECTED_LENGTH_NOT_FOUND;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2220      	movs	r2, #32
 800ffa6:	611a      	str	r2, [r3, #16]
		goto error;
 800ffa8:	e045      	b.n	8010036 <sml_list_type_parse+0xf2>
	}

	list_type->tag = sml_u8_parse(buf);
 800ffaa:	2201      	movs	r2, #1
 800ffac:	2160      	movs	r1, #96	; 0x60
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f7fc fca2 	bl	800c8f8 <sml_number_parse>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	601a      	str	r2, [r3, #0]
	if (sml_buf_has_errors(buf)) goto error;
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f7fd fcf4 	bl	800d9a8 <sml_buf_has_errors>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d134      	bne.n	8010030 <sml_list_type_parse+0xec>
	if (!list_type->tag) goto error;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d032      	beq.n	8010034 <sml_list_type_parse+0xf0>

	if (sml_debug_output(buf))
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f7fd fd70 	bl	800dab4 <sml_debug_output>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d006      	beq.n	800ffe8 <sml_list_type_parse+0xa4>
    {
		trace("\t\tLIST TYPE\t%i\r\n", *(list_type->tag));
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	4819      	ldr	r0, [pc, #100]	; (8010048 <sml_list_type_parse+0x104>)
 800ffe4:	f7fb ff6e 	bl	800bec4 <trace>
	}

	switch (*(list_type->tag))
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	2b02      	cmp	r3, #2
 800fff0:	d00a      	beq.n	8010008 <sml_list_type_parse+0xc4>
 800fff2:	2b03      	cmp	r3, #3
 800fff4:	d00f      	beq.n	8010016 <sml_list_type_parse+0xd2>
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d114      	bne.n	8010024 <sml_list_type_parse+0xe0>
    {
		case SML_LIST_TYPE_TIME:
			list_type->data.time = sml_time_parse(buf);
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f7fd ff4a 	bl	800de94 <sml_time_parse>
 8010000:	4602      	mov	r2, r0
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	605a      	str	r2, [r3, #4]
			break;
 8010006:	e011      	b.n	801002c <sml_list_type_parse+0xe8>
		case SML_LIST_TYPE_TIMESTAMPED_VALUE:
			list_type->data.timestamped_value = sml_timestamped_value_parse(buf);
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7ff fceb 	bl	800f9e4 <sml_timestamped_value_parse>
 801000e:	4602      	mov	r2, r0
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	605a      	str	r2, [r3, #4]
			break;
 8010014:	e00a      	b.n	801002c <sml_list_type_parse+0xe8>
		case SML_LIST_TYPE_COSEM_VALUE:
			list_type->data.cosem_value = sml_cosem_value_parse(buf);
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f7ff fea6 	bl	800fd68 <sml_cosem_value_parse>
 801001c:	4602      	mov	r2, r0
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	605a      	str	r2, [r3, #4]
			break;
 8010022:	e003      	b.n	801002c <sml_list_type_parse+0xe8>

		default:
			buf->error = SML_LIST_TYPE_TAG_MISMATCH;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2269      	movs	r2, #105	; 0x69
 8010028:	611a      	str	r2, [r3, #16]
			goto error;
 801002a:	e004      	b.n	8010036 <sml_list_type_parse+0xf2>
	}

	return list_type;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	e006      	b.n	801003e <sml_list_type_parse+0xfa>
	if (sml_buf_has_errors(buf)) goto error;
 8010030:	bf00      	nop
 8010032:	e000      	b.n	8010036 <sml_list_type_parse+0xf2>
	if (!list_type->tag) goto error;
 8010034:	bf00      	nop

error:
	sml_list_type_free(list_type);
 8010036:	68f8      	ldr	r0, [r7, #12]
 8010038:	f000 f85a 	bl	80100f0 <sml_list_type_free>
	return NULL;
 801003c:	2300      	movs	r3, #0
}
 801003e:	4618      	mov	r0, r3
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}
 8010046:	bf00      	nop
 8010048:	080122b0 	.word	0x080122b0

0801004c <sml_list_type_write>:

int sml_list_type_write(sml_list_type *list_type, sml_buffer *buf)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
	int rv;

	if (!buf)
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d102      	bne.n	8010062 <sml_list_type_write+0x16>
	{
		return SML_PARAMETER_ERROR;
 801005c:	f240 33e6 	movw	r3, #998	; 0x3e6
 8010060:	e042      	b.n	80100e8 <sml_list_type_write+0x9c>
	}

	if (list_type == 0)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d105      	bne.n	8010074 <sml_list_type_write+0x28>
    {
		rv = sml_buf_optional_write(buf);
 8010068:	6838      	ldr	r0, [r7, #0]
 801006a:	f7fd fcf1 	bl	800da50 <sml_buf_optional_write>
 801006e:	60f8      	str	r0, [r7, #12]
		return rv;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	e039      	b.n	80100e8 <sml_list_type_write+0x9c>
	}

	rv = sml_buf_set_type_and_length(buf, SML_TYPE_LIST, 2);
 8010074:	2202      	movs	r2, #2
 8010076:	2170      	movs	r1, #112	; 0x70
 8010078:	6838      	ldr	r0, [r7, #0]
 801007a:	f7fd fbf7 	bl	800d86c <sml_buf_set_type_and_length>
 801007e:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d001      	beq.n	801008a <sml_list_type_write+0x3e>
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	e02e      	b.n	80100e8 <sml_list_type_write+0x9c>

	rv = sml_u8_write(list_type->tag, buf);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6818      	ldr	r0, [r3, #0]
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	2201      	movs	r2, #1
 8010092:	2160      	movs	r1, #96	; 0x60
 8010094:	f7fc fcd2 	bl	800ca3c <sml_number_write>
 8010098:	60f8      	str	r0, [r7, #12]
	if (rv != SML_OK) return rv;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d001      	beq.n	80100a4 <sml_list_type_write+0x58>
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	e021      	b.n	80100e8 <sml_list_type_write+0x9c>

	switch (*(list_type->tag))
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	d00b      	beq.n	80100c6 <sml_list_type_write+0x7a>
 80100ae:	2b03      	cmp	r3, #3
 80100b0:	d011      	beq.n	80100d6 <sml_list_type_write+0x8a>
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d117      	bne.n	80100e6 <sml_list_type_write+0x9a>
    {
		case SML_LIST_TYPE_TIME:
			rv = sml_time_write(list_type->data.time, buf);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	6839      	ldr	r1, [r7, #0]
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fd ff7f 	bl	800dfc0 <sml_time_write>
 80100c2:	60f8      	str	r0, [r7, #12]
			break;
 80100c4:	e00f      	b.n	80100e6 <sml_list_type_write+0x9a>
		case SML_LIST_TYPE_TIMESTAMPED_VALUE:
			rv = sml_timestamped_value_write(list_type->data.timestamped_value, buf);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7ff fcfb 	bl	800fac8 <sml_timestamped_value_write>
 80100d2:	60f8      	str	r0, [r7, #12]
			break;
 80100d4:	e007      	b.n	80100e6 <sml_list_type_write+0x9a>
		case SML_LIST_TYPE_COSEM_VALUE:
			rv = sml_cosem_value_write(list_type->data.cosem_value, buf);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	6839      	ldr	r1, [r7, #0]
 80100dc:	4618      	mov	r0, r3
 80100de:	f7ff feb5 	bl	800fe4c <sml_cosem_value_write>
 80100e2:	60f8      	str	r0, [r7, #12]
			break;
 80100e4:	bf00      	nop
	}

	return rv;
 80100e6:	68fb      	ldr	r3, [r7, #12]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <sml_list_type_free>:

void sml_list_type_free(sml_list_type *list_type)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
    if (list_type)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d026      	beq.n	801014c <sml_list_type_free+0x5c>
    {
		if (list_type->tag)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d01f      	beq.n	8010146 <sml_list_type_free+0x56>
        {
			switch (*(list_type->tag))
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	2b02      	cmp	r3, #2
 801010e:	d009      	beq.n	8010124 <sml_list_type_free+0x34>
 8010110:	2b03      	cmp	r3, #3
 8010112:	d00d      	beq.n	8010130 <sml_list_type_free+0x40>
 8010114:	2b01      	cmp	r3, #1
 8010116:	d111      	bne.n	801013c <sml_list_type_free+0x4c>
            {
				case SML_LIST_TYPE_TIME:
					sml_time_free(list_type->data.time);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	4618      	mov	r0, r3
 801011e:	f7fd ff9b 	bl	800e058 <sml_time_free>
					break;
 8010122:	e00b      	b.n	801013c <sml_list_type_free+0x4c>
				case SML_LIST_TYPE_TIMESTAMPED_VALUE:
					sml_timestamped_value_free(list_type->data.timestamped_value);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	4618      	mov	r0, r3
 801012a:	f7ff fd0f 	bl	800fb4c <sml_timestamped_value_free>
					break;
 801012e:	e005      	b.n	801013c <sml_list_type_free+0x4c>
				case SML_LIST_TYPE_COSEM_VALUE:
					sml_cosem_value_free(list_type->data.cosem_value);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	4618      	mov	r0, r3
 8010136:	f7ff fec7 	bl	800fec8 <sml_cosem_value_free>
					break;
 801013a:	bf00      	nop
			}
			sml_number_free(list_type->tag);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4618      	mov	r0, r3
 8010142:	f7fc fd28 	bl	800cb96 <sml_number_free>
		}
        free(list_type);
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7f9 f84c 	bl	80091e4 <vPortFree>
    }
}
 801014c:	bf00      	nop
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <sml_value_init>:
#include <sml/sml_log.h>

// sml_value;

sml_value *sml_value_init(void)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
	sml_value *value = (sml_value *)malloc(sizeof(sml_value));
 801015a:	2008      	movs	r0, #8
 801015c:	f7f8 ff80 	bl	8009060 <pvPortMalloc>
 8010160:	6078      	str	r0, [r7, #4]
	if (!value)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d105      	bne.n	8010174 <sml_value_init+0x20>
	{
		trace("ERROR: malloc %ld bytes\n", sizeof(sml_value));
 8010168:	2108      	movs	r1, #8
 801016a:	4807      	ldr	r0, [pc, #28]	; (8010188 <sml_value_init+0x34>)
 801016c:	f7fb feaa 	bl	800bec4 <trace>
		return NULL;
 8010170:	2300      	movs	r3, #0
 8010172:	e005      	b.n	8010180 <sml_value_init+0x2c>
	}
	memset(value, 0, sizeof(sml_value));
 8010174:	2208      	movs	r2, #8
 8010176:	2100      	movs	r1, #0
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 f961 	bl	8010440 <memset>
	
	return value;
 801017e:	687b      	ldr	r3, [r7, #4]
}
 8010180:	4618      	mov	r0, r3
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	080122c4 	.word	0x080122c4

0801018c <sml_value_parse>:

sml_value *sml_value_parse(sml_buffer *buf)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b086      	sub	sp, #24
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
    int max = 1;
 8010194:	2301      	movs	r3, #1
 8010196:	617b      	str	r3, [r7, #20]
    u8 type;
    unsigned char byte;
    sml_value *value = NULL;
 8010198:	2300      	movs	r3, #0
 801019a:	613b      	str	r3, [r7, #16]
    
	if (!buf)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d101      	bne.n	80101a6 <sml_value_parse+0x1a>
	{
		return NULL;
 80101a2:	2300      	movs	r3, #0
 80101a4:	e07d      	b.n	80102a2 <sml_value_parse+0x116>
	}

    if (sml_buf_optional_is_skipped(buf))
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7fd fc6f 	bl	800da8a <sml_buf_optional_is_skipped>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d001      	beq.n	80101b6 <sml_value_parse+0x2a>
    {
		return NULL;
 80101b2:	2300      	movs	r3, #0
 80101b4:	e075      	b.n	80102a2 <sml_value_parse+0x116>
	}

	type = sml_buf_get_next_type(buf);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f7fd fc07 	bl	800d9ca <sml_buf_get_next_type>
 80101bc:	4603      	mov	r3, r0
 80101be:	73fb      	strb	r3, [r7, #15]
	byte = sml_buf_get_current_byte(buf);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f7fd fc15 	bl	800d9f0 <sml_buf_get_current_byte>
 80101c6:	4603      	mov	r3, r0
 80101c8:	73bb      	strb	r3, [r7, #14]

	value = sml_value_init();
 80101ca:	f7ff ffc3 	bl	8010154 <sml_value_init>
 80101ce:	6138      	str	r0, [r7, #16]
	if (!value)
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d105      	bne.n	80101e2 <sml_value_parse+0x56>
    {
		buf->error = SML_MALLOC_ERROR;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80101dc:	611a      	str	r2, [r3, #16]
		return NULL;
 80101de:	2300      	movs	r3, #0
 80101e0:	e05f      	b.n	80102a2 <sml_value_parse+0x116>
	}

	value->type = type;
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	7bfa      	ldrb	r2, [r7, #15]
 80101e6:	701a      	strb	r2, [r3, #0]

	if (sml_debug_output(buf))
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f7fd fc63 	bl	800dab4 <sml_debug_output>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d004      	beq.n	80101fe <sml_value_parse+0x72>
    {
		trace("\t\tVALUE\t%i\r\n", type);
 80101f4:	7bfb      	ldrb	r3, [r7, #15]
 80101f6:	4619      	mov	r1, r3
 80101f8:	482c      	ldr	r0, [pc, #176]	; (80102ac <sml_value_parse+0x120>)
 80101fa:	f7fb fe63 	bl	800bec4 <trace>
	}

	switch (type)
 80101fe:	7bfb      	ldrb	r3, [r7, #15]
 8010200:	2b50      	cmp	r3, #80	; 0x50
 8010202:	d01c      	beq.n	801023e <sml_value_parse+0xb2>
 8010204:	2b50      	cmp	r3, #80	; 0x50
 8010206:	dc04      	bgt.n	8010212 <sml_value_parse+0x86>
 8010208:	2b00      	cmp	r3, #0
 801020a:	d007      	beq.n	801021c <sml_value_parse+0x90>
 801020c:	2b40      	cmp	r3, #64	; 0x40
 801020e:	d00c      	beq.n	801022a <sml_value_parse+0x9e>
 8010210:	e037      	b.n	8010282 <sml_value_parse+0xf6>
 8010212:	2b60      	cmp	r3, #96	; 0x60
 8010214:	d013      	beq.n	801023e <sml_value_parse+0xb2>
 8010216:	2b70      	cmp	r3, #112	; 0x70
 8010218:	d02c      	beq.n	8010274 <sml_value_parse+0xe8>
 801021a:	e032      	b.n	8010282 <sml_value_parse+0xf6>
    {
		case SML_TYPE_OCTET_STRING:
			value->data.bytes = sml_octet_string_parse(buf);
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7fc fd5d 	bl	800ccdc <sml_octet_string_parse>
 8010222:	4602      	mov	r2, r0
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	605a      	str	r2, [r3, #4]
			break;
 8010228:	e02f      	b.n	801028a <sml_value_parse+0xfe>
		case SML_TYPE_BOOLEAN:
			value->data.boolean = sml_boolean_parse(buf);
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f7f9 fa6a 	bl	8009704 <sml_boolean_parse>
 8010230:	4602      	mov	r2, r0
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	605a      	str	r2, [r3, #4]
			break;
 8010236:	e028      	b.n	801028a <sml_value_parse+0xfe>
		case SML_TYPE_UNSIGNED:
		case SML_TYPE_INTEGER:
			// get maximal size, if not all bytes are used (example: only 6 bytes for a u64)
			while (max < ((byte & SML_LENGTH_FIELD) - 1))
            {
				max <<= 1;
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	005b      	lsls	r3, r3, #1
 801023c:	617b      	str	r3, [r7, #20]
			while (max < ((byte & SML_LENGTH_FIELD) - 1))
 801023e:	7bbb      	ldrb	r3, [r7, #14]
 8010240:	f003 030f 	and.w	r3, r3, #15
 8010244:	3b01      	subs	r3, #1
 8010246:	697a      	ldr	r2, [r7, #20]
 8010248:	429a      	cmp	r2, r3
 801024a:	dbf5      	blt.n	8010238 <sml_value_parse+0xac>
			}

			value->data.uint8 = (u8*)sml_number_parse(buf, type, max);
 801024c:	7bfb      	ldrb	r3, [r7, #15]
 801024e:	697a      	ldr	r2, [r7, #20]
 8010250:	4619      	mov	r1, r3
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7fc fb50 	bl	800c8f8 <sml_number_parse>
 8010258:	4602      	mov	r2, r0
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	605a      	str	r2, [r3, #4]
			value->type |= max;
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	b25a      	sxtb	r2, r3
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	b25b      	sxtb	r3, r3
 8010268:	4313      	orrs	r3, r2
 801026a:	b25b      	sxtb	r3, r3
 801026c:	b2da      	uxtb	r2, r3
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	701a      	strb	r2, [r3, #0]
			break;
 8010272:	e00a      	b.n	801028a <sml_value_parse+0xfe>
		case SML_TYPE_LIST:
			value->data.smlList = sml_list_type_parse(buf);
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f7ff fe65 	bl	800ff44 <sml_list_type_parse>
 801027a:	4602      	mov	r2, r0
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	605a      	str	r2, [r3, #4]
			break;
 8010280:	e003      	b.n	801028a <sml_value_parse+0xfe>
		default:
			buf->error = SML_VALUE_TAG_MISMATCH;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	226a      	movs	r2, #106	; 0x6a
 8010286:	611a      	str	r2, [r3, #16]
			break;
 8010288:	bf00      	nop
	}

	if (sml_buf_has_errors(buf))
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f7fd fb8c 	bl	800d9a8 <sml_buf_has_errors>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d004      	beq.n	80102a0 <sml_value_parse+0x114>
    {
		sml_value_free(value);
 8010296:	6938      	ldr	r0, [r7, #16]
 8010298:	f000 f85f 	bl	801035a <sml_value_free>
		return NULL;
 801029c:	2300      	movs	r3, #0
 801029e:	e000      	b.n	80102a2 <sml_value_parse+0x116>
	}

	return value;
 80102a0:	693b      	ldr	r3, [r7, #16]
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3718      	adds	r7, #24
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	080122e0 	.word	0x080122e0

080102b0 <sml_value_write>:

int sml_value_write(sml_value *value, sml_buffer *buf)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
	int rv = SML_OK;
 80102ba:	2300      	movs	r3, #0
 80102bc:	60fb      	str	r3, [r7, #12]

	if (!buf)
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d102      	bne.n	80102ca <sml_value_write+0x1a>
	{
		return SML_PARAMETER_ERROR;
 80102c4:	f240 33e6 	movw	r3, #998	; 0x3e6
 80102c8:	e043      	b.n	8010352 <sml_value_write+0xa2>
	}

	if (value == 0)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d105      	bne.n	80102dc <sml_value_write+0x2c>
    {
		rv = sml_buf_optional_write(buf);
 80102d0:	6838      	ldr	r0, [r7, #0]
 80102d2:	f7fd fbbd 	bl	800da50 <sml_buf_optional_write>
 80102d6:	60f8      	str	r0, [r7, #12]
		return rv;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	e03a      	b.n	8010352 <sml_value_write+0xa2>
	}

	switch (value->type & SML_TYPE_FIELD)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80102e4:	2b50      	cmp	r3, #80	; 0x50
 80102e6:	d01b      	beq.n	8010320 <sml_value_write+0x70>
 80102e8:	2b50      	cmp	r3, #80	; 0x50
 80102ea:	dc04      	bgt.n	80102f6 <sml_value_write+0x46>
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d007      	beq.n	8010300 <sml_value_write+0x50>
 80102f0:	2b40      	cmp	r3, #64	; 0x40
 80102f2:	d00d      	beq.n	8010310 <sml_value_write+0x60>
 80102f4:	e02c      	b.n	8010350 <sml_value_write+0xa0>
 80102f6:	2b60      	cmp	r3, #96	; 0x60
 80102f8:	d012      	beq.n	8010320 <sml_value_write+0x70>
 80102fa:	2b70      	cmp	r3, #112	; 0x70
 80102fc:	d020      	beq.n	8010340 <sml_value_write+0x90>
 80102fe:	e027      	b.n	8010350 <sml_value_write+0xa0>
    {
		case SML_TYPE_OCTET_STRING:
			rv = sml_octet_string_write(value->data.bytes, buf);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	6839      	ldr	r1, [r7, #0]
 8010306:	4618      	mov	r0, r3
 8010308:	f7fc fd34 	bl	800cd74 <sml_octet_string_write>
 801030c:	60f8      	str	r0, [r7, #12]
			break;
 801030e:	e01f      	b.n	8010350 <sml_value_write+0xa0>
		case SML_TYPE_BOOLEAN:
			rv = sml_boolean_write(value->data.boolean, buf);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	6839      	ldr	r1, [r7, #0]
 8010316:	4618      	mov	r0, r3
 8010318:	f7f9 fa50 	bl	80097bc <sml_boolean_write>
 801031c:	60f8      	str	r0, [r7, #12]
			break;
 801031e:	e017      	b.n	8010350 <sml_value_write+0xa0>
		case SML_TYPE_UNSIGNED:
		case SML_TYPE_INTEGER:
			rv = sml_number_write(value->data.uint8, (value->type & SML_TYPE_FIELD),
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6858      	ldr	r0, [r3, #4]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801032c:	b2d9      	uxtb	r1, r3
				(value->type & SML_LENGTH_FIELD), buf);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	781b      	ldrb	r3, [r3, #0]
			rv = sml_number_write(value->data.uint8, (value->type & SML_TYPE_FIELD),
 8010332:	f003 020f 	and.w	r2, r3, #15
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	f7fc fb80 	bl	800ca3c <sml_number_write>
 801033c:	60f8      	str	r0, [r7, #12]
			break;
 801033e:	e007      	b.n	8010350 <sml_value_write+0xa0>
		case SML_TYPE_LIST:
			rv = sml_list_type_write(value->data.smlList, buf);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	6839      	ldr	r1, [r7, #0]
 8010346:	4618      	mov	r0, r3
 8010348:	f7ff fe80 	bl	801004c <sml_list_type_write>
 801034c:	60f8      	str	r0, [r7, #12]
			break;
 801034e:	bf00      	nop
	}

	return rv;
 8010350:	68fb      	ldr	r3, [r7, #12]
}
 8010352:	4618      	mov	r0, r3
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <sml_value_free>:

void sml_value_free(sml_value *value)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b082      	sub	sp, #8
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
	if (value)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d022      	beq.n	80103ae <sml_value_free+0x54>
    {
		switch (value->type)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	2b40      	cmp	r3, #64	; 0x40
 801036e:	d009      	beq.n	8010384 <sml_value_free+0x2a>
 8010370:	2b70      	cmp	r3, #112	; 0x70
 8010372:	d00d      	beq.n	8010390 <sml_value_free+0x36>
 8010374:	2b00      	cmp	r3, #0
 8010376:	d111      	bne.n	801039c <sml_value_free+0x42>
        {
			case SML_TYPE_OCTET_STRING:
				sml_octet_string_free(value->data.bytes);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	4618      	mov	r0, r3
 801037e:	f7fc fd3e 	bl	800cdfe <sml_octet_string_free>
				break;
 8010382:	e011      	b.n	80103a8 <sml_value_free+0x4e>
			case SML_TYPE_BOOLEAN:
				sml_boolean_free(value->data.boolean);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	4618      	mov	r0, r3
 801038a:	f7f9 fa53 	bl	8009834 <sml_boolean_free>
				break;
 801038e:	e00b      	b.n	80103a8 <sml_value_free+0x4e>
			case SML_TYPE_LIST:
				sml_list_type_free(value->data.smlList);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	4618      	mov	r0, r3
 8010396:	f7ff feab 	bl	80100f0 <sml_list_type_free>
				break;
 801039a:	e005      	b.n	80103a8 <sml_value_free+0x4e>
			default:
				sml_number_free(value->data.int8);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7fc fbf8 	bl	800cb96 <sml_number_free>
				break;
 80103a6:	bf00      	nop
		}
		free(value);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f7f8 ff1b 	bl	80091e4 <vPortFree>
	}
}
 80103ae:	bf00      	nop
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
	...

080103b8 <__errno>:
 80103b8:	4b01      	ldr	r3, [pc, #4]	; (80103c0 <__errno+0x8>)
 80103ba:	6818      	ldr	r0, [r3, #0]
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	2000029c 	.word	0x2000029c

080103c4 <__libc_init_array>:
 80103c4:	b570      	push	{r4, r5, r6, lr}
 80103c6:	4e0d      	ldr	r6, [pc, #52]	; (80103fc <__libc_init_array+0x38>)
 80103c8:	4c0d      	ldr	r4, [pc, #52]	; (8010400 <__libc_init_array+0x3c>)
 80103ca:	1ba4      	subs	r4, r4, r6
 80103cc:	10a4      	asrs	r4, r4, #2
 80103ce:	2500      	movs	r5, #0
 80103d0:	42a5      	cmp	r5, r4
 80103d2:	d109      	bne.n	80103e8 <__libc_init_array+0x24>
 80103d4:	4e0b      	ldr	r6, [pc, #44]	; (8010404 <__libc_init_array+0x40>)
 80103d6:	4c0c      	ldr	r4, [pc, #48]	; (8010408 <__libc_init_array+0x44>)
 80103d8:	f001 f982 	bl	80116e0 <_init>
 80103dc:	1ba4      	subs	r4, r4, r6
 80103de:	10a4      	asrs	r4, r4, #2
 80103e0:	2500      	movs	r5, #0
 80103e2:	42a5      	cmp	r5, r4
 80103e4:	d105      	bne.n	80103f2 <__libc_init_array+0x2e>
 80103e6:	bd70      	pop	{r4, r5, r6, pc}
 80103e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80103ec:	4798      	blx	r3
 80103ee:	3501      	adds	r5, #1
 80103f0:	e7ee      	b.n	80103d0 <__libc_init_array+0xc>
 80103f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80103f6:	4798      	blx	r3
 80103f8:	3501      	adds	r5, #1
 80103fa:	e7f2      	b.n	80103e2 <__libc_init_array+0x1e>
 80103fc:	08012730 	.word	0x08012730
 8010400:	08012730 	.word	0x08012730
 8010404:	08012730 	.word	0x08012730
 8010408:	08012734 	.word	0x08012734

0801040c <memcmp>:
 801040c:	b530      	push	{r4, r5, lr}
 801040e:	2400      	movs	r4, #0
 8010410:	42a2      	cmp	r2, r4
 8010412:	d101      	bne.n	8010418 <memcmp+0xc>
 8010414:	2000      	movs	r0, #0
 8010416:	e007      	b.n	8010428 <memcmp+0x1c>
 8010418:	5d03      	ldrb	r3, [r0, r4]
 801041a:	3401      	adds	r4, #1
 801041c:	190d      	adds	r5, r1, r4
 801041e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8010422:	42ab      	cmp	r3, r5
 8010424:	d0f4      	beq.n	8010410 <memcmp+0x4>
 8010426:	1b58      	subs	r0, r3, r5
 8010428:	bd30      	pop	{r4, r5, pc}

0801042a <memcpy>:
 801042a:	b510      	push	{r4, lr}
 801042c:	1e43      	subs	r3, r0, #1
 801042e:	440a      	add	r2, r1
 8010430:	4291      	cmp	r1, r2
 8010432:	d100      	bne.n	8010436 <memcpy+0xc>
 8010434:	bd10      	pop	{r4, pc}
 8010436:	f811 4b01 	ldrb.w	r4, [r1], #1
 801043a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801043e:	e7f7      	b.n	8010430 <memcpy+0x6>

08010440 <memset>:
 8010440:	4402      	add	r2, r0
 8010442:	4603      	mov	r3, r0
 8010444:	4293      	cmp	r3, r2
 8010446:	d100      	bne.n	801044a <memset+0xa>
 8010448:	4770      	bx	lr
 801044a:	f803 1b01 	strb.w	r1, [r3], #1
 801044e:	e7f9      	b.n	8010444 <memset+0x4>

08010450 <__sfputc_r>:
 8010450:	6893      	ldr	r3, [r2, #8]
 8010452:	3b01      	subs	r3, #1
 8010454:	2b00      	cmp	r3, #0
 8010456:	b410      	push	{r4}
 8010458:	6093      	str	r3, [r2, #8]
 801045a:	da08      	bge.n	801046e <__sfputc_r+0x1e>
 801045c:	6994      	ldr	r4, [r2, #24]
 801045e:	42a3      	cmp	r3, r4
 8010460:	db01      	blt.n	8010466 <__sfputc_r+0x16>
 8010462:	290a      	cmp	r1, #10
 8010464:	d103      	bne.n	801046e <__sfputc_r+0x1e>
 8010466:	f85d 4b04 	ldr.w	r4, [sp], #4
 801046a:	f000 bb93 	b.w	8010b94 <__swbuf_r>
 801046e:	6813      	ldr	r3, [r2, #0]
 8010470:	1c58      	adds	r0, r3, #1
 8010472:	6010      	str	r0, [r2, #0]
 8010474:	7019      	strb	r1, [r3, #0]
 8010476:	4608      	mov	r0, r1
 8010478:	f85d 4b04 	ldr.w	r4, [sp], #4
 801047c:	4770      	bx	lr

0801047e <__sfputs_r>:
 801047e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010480:	4606      	mov	r6, r0
 8010482:	460f      	mov	r7, r1
 8010484:	4614      	mov	r4, r2
 8010486:	18d5      	adds	r5, r2, r3
 8010488:	42ac      	cmp	r4, r5
 801048a:	d101      	bne.n	8010490 <__sfputs_r+0x12>
 801048c:	2000      	movs	r0, #0
 801048e:	e007      	b.n	80104a0 <__sfputs_r+0x22>
 8010490:	463a      	mov	r2, r7
 8010492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010496:	4630      	mov	r0, r6
 8010498:	f7ff ffda 	bl	8010450 <__sfputc_r>
 801049c:	1c43      	adds	r3, r0, #1
 801049e:	d1f3      	bne.n	8010488 <__sfputs_r+0xa>
 80104a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104a4 <_vfiprintf_r>:
 80104a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a8:	460c      	mov	r4, r1
 80104aa:	b09d      	sub	sp, #116	; 0x74
 80104ac:	4617      	mov	r7, r2
 80104ae:	461d      	mov	r5, r3
 80104b0:	4606      	mov	r6, r0
 80104b2:	b118      	cbz	r0, 80104bc <_vfiprintf_r+0x18>
 80104b4:	6983      	ldr	r3, [r0, #24]
 80104b6:	b90b      	cbnz	r3, 80104bc <_vfiprintf_r+0x18>
 80104b8:	f000 fd1c 	bl	8010ef4 <__sinit>
 80104bc:	4b7c      	ldr	r3, [pc, #496]	; (80106b0 <_vfiprintf_r+0x20c>)
 80104be:	429c      	cmp	r4, r3
 80104c0:	d158      	bne.n	8010574 <_vfiprintf_r+0xd0>
 80104c2:	6874      	ldr	r4, [r6, #4]
 80104c4:	89a3      	ldrh	r3, [r4, #12]
 80104c6:	0718      	lsls	r0, r3, #28
 80104c8:	d55e      	bpl.n	8010588 <_vfiprintf_r+0xe4>
 80104ca:	6923      	ldr	r3, [r4, #16]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d05b      	beq.n	8010588 <_vfiprintf_r+0xe4>
 80104d0:	2300      	movs	r3, #0
 80104d2:	9309      	str	r3, [sp, #36]	; 0x24
 80104d4:	2320      	movs	r3, #32
 80104d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104da:	2330      	movs	r3, #48	; 0x30
 80104dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104e0:	9503      	str	r5, [sp, #12]
 80104e2:	f04f 0b01 	mov.w	fp, #1
 80104e6:	46b8      	mov	r8, r7
 80104e8:	4645      	mov	r5, r8
 80104ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80104ee:	b10b      	cbz	r3, 80104f4 <_vfiprintf_r+0x50>
 80104f0:	2b25      	cmp	r3, #37	; 0x25
 80104f2:	d154      	bne.n	801059e <_vfiprintf_r+0xfa>
 80104f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80104f8:	d00b      	beq.n	8010512 <_vfiprintf_r+0x6e>
 80104fa:	4653      	mov	r3, sl
 80104fc:	463a      	mov	r2, r7
 80104fe:	4621      	mov	r1, r4
 8010500:	4630      	mov	r0, r6
 8010502:	f7ff ffbc 	bl	801047e <__sfputs_r>
 8010506:	3001      	adds	r0, #1
 8010508:	f000 80c2 	beq.w	8010690 <_vfiprintf_r+0x1ec>
 801050c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801050e:	4453      	add	r3, sl
 8010510:	9309      	str	r3, [sp, #36]	; 0x24
 8010512:	f898 3000 	ldrb.w	r3, [r8]
 8010516:	2b00      	cmp	r3, #0
 8010518:	f000 80ba 	beq.w	8010690 <_vfiprintf_r+0x1ec>
 801051c:	2300      	movs	r3, #0
 801051e:	f04f 32ff 	mov.w	r2, #4294967295
 8010522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010526:	9304      	str	r3, [sp, #16]
 8010528:	9307      	str	r3, [sp, #28]
 801052a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801052e:	931a      	str	r3, [sp, #104]	; 0x68
 8010530:	46a8      	mov	r8, r5
 8010532:	2205      	movs	r2, #5
 8010534:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010538:	485e      	ldr	r0, [pc, #376]	; (80106b4 <_vfiprintf_r+0x210>)
 801053a:	f7ef fe51 	bl	80001e0 <memchr>
 801053e:	9b04      	ldr	r3, [sp, #16]
 8010540:	bb78      	cbnz	r0, 80105a2 <_vfiprintf_r+0xfe>
 8010542:	06d9      	lsls	r1, r3, #27
 8010544:	bf44      	itt	mi
 8010546:	2220      	movmi	r2, #32
 8010548:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801054c:	071a      	lsls	r2, r3, #28
 801054e:	bf44      	itt	mi
 8010550:	222b      	movmi	r2, #43	; 0x2b
 8010552:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010556:	782a      	ldrb	r2, [r5, #0]
 8010558:	2a2a      	cmp	r2, #42	; 0x2a
 801055a:	d02a      	beq.n	80105b2 <_vfiprintf_r+0x10e>
 801055c:	9a07      	ldr	r2, [sp, #28]
 801055e:	46a8      	mov	r8, r5
 8010560:	2000      	movs	r0, #0
 8010562:	250a      	movs	r5, #10
 8010564:	4641      	mov	r1, r8
 8010566:	f811 3b01 	ldrb.w	r3, [r1], #1
 801056a:	3b30      	subs	r3, #48	; 0x30
 801056c:	2b09      	cmp	r3, #9
 801056e:	d969      	bls.n	8010644 <_vfiprintf_r+0x1a0>
 8010570:	b360      	cbz	r0, 80105cc <_vfiprintf_r+0x128>
 8010572:	e024      	b.n	80105be <_vfiprintf_r+0x11a>
 8010574:	4b50      	ldr	r3, [pc, #320]	; (80106b8 <_vfiprintf_r+0x214>)
 8010576:	429c      	cmp	r4, r3
 8010578:	d101      	bne.n	801057e <_vfiprintf_r+0xda>
 801057a:	68b4      	ldr	r4, [r6, #8]
 801057c:	e7a2      	b.n	80104c4 <_vfiprintf_r+0x20>
 801057e:	4b4f      	ldr	r3, [pc, #316]	; (80106bc <_vfiprintf_r+0x218>)
 8010580:	429c      	cmp	r4, r3
 8010582:	bf08      	it	eq
 8010584:	68f4      	ldreq	r4, [r6, #12]
 8010586:	e79d      	b.n	80104c4 <_vfiprintf_r+0x20>
 8010588:	4621      	mov	r1, r4
 801058a:	4630      	mov	r0, r6
 801058c:	f000 fb54 	bl	8010c38 <__swsetup_r>
 8010590:	2800      	cmp	r0, #0
 8010592:	d09d      	beq.n	80104d0 <_vfiprintf_r+0x2c>
 8010594:	f04f 30ff 	mov.w	r0, #4294967295
 8010598:	b01d      	add	sp, #116	; 0x74
 801059a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801059e:	46a8      	mov	r8, r5
 80105a0:	e7a2      	b.n	80104e8 <_vfiprintf_r+0x44>
 80105a2:	4a44      	ldr	r2, [pc, #272]	; (80106b4 <_vfiprintf_r+0x210>)
 80105a4:	1a80      	subs	r0, r0, r2
 80105a6:	fa0b f000 	lsl.w	r0, fp, r0
 80105aa:	4318      	orrs	r0, r3
 80105ac:	9004      	str	r0, [sp, #16]
 80105ae:	4645      	mov	r5, r8
 80105b0:	e7be      	b.n	8010530 <_vfiprintf_r+0x8c>
 80105b2:	9a03      	ldr	r2, [sp, #12]
 80105b4:	1d11      	adds	r1, r2, #4
 80105b6:	6812      	ldr	r2, [r2, #0]
 80105b8:	9103      	str	r1, [sp, #12]
 80105ba:	2a00      	cmp	r2, #0
 80105bc:	db01      	blt.n	80105c2 <_vfiprintf_r+0x11e>
 80105be:	9207      	str	r2, [sp, #28]
 80105c0:	e004      	b.n	80105cc <_vfiprintf_r+0x128>
 80105c2:	4252      	negs	r2, r2
 80105c4:	f043 0302 	orr.w	r3, r3, #2
 80105c8:	9207      	str	r2, [sp, #28]
 80105ca:	9304      	str	r3, [sp, #16]
 80105cc:	f898 3000 	ldrb.w	r3, [r8]
 80105d0:	2b2e      	cmp	r3, #46	; 0x2e
 80105d2:	d10e      	bne.n	80105f2 <_vfiprintf_r+0x14e>
 80105d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80105d8:	2b2a      	cmp	r3, #42	; 0x2a
 80105da:	d138      	bne.n	801064e <_vfiprintf_r+0x1aa>
 80105dc:	9b03      	ldr	r3, [sp, #12]
 80105de:	1d1a      	adds	r2, r3, #4
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	9203      	str	r2, [sp, #12]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	bfb8      	it	lt
 80105e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80105ec:	f108 0802 	add.w	r8, r8, #2
 80105f0:	9305      	str	r3, [sp, #20]
 80105f2:	4d33      	ldr	r5, [pc, #204]	; (80106c0 <_vfiprintf_r+0x21c>)
 80105f4:	f898 1000 	ldrb.w	r1, [r8]
 80105f8:	2203      	movs	r2, #3
 80105fa:	4628      	mov	r0, r5
 80105fc:	f7ef fdf0 	bl	80001e0 <memchr>
 8010600:	b140      	cbz	r0, 8010614 <_vfiprintf_r+0x170>
 8010602:	2340      	movs	r3, #64	; 0x40
 8010604:	1b40      	subs	r0, r0, r5
 8010606:	fa03 f000 	lsl.w	r0, r3, r0
 801060a:	9b04      	ldr	r3, [sp, #16]
 801060c:	4303      	orrs	r3, r0
 801060e:	f108 0801 	add.w	r8, r8, #1
 8010612:	9304      	str	r3, [sp, #16]
 8010614:	f898 1000 	ldrb.w	r1, [r8]
 8010618:	482a      	ldr	r0, [pc, #168]	; (80106c4 <_vfiprintf_r+0x220>)
 801061a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801061e:	2206      	movs	r2, #6
 8010620:	f108 0701 	add.w	r7, r8, #1
 8010624:	f7ef fddc 	bl	80001e0 <memchr>
 8010628:	2800      	cmp	r0, #0
 801062a:	d037      	beq.n	801069c <_vfiprintf_r+0x1f8>
 801062c:	4b26      	ldr	r3, [pc, #152]	; (80106c8 <_vfiprintf_r+0x224>)
 801062e:	bb1b      	cbnz	r3, 8010678 <_vfiprintf_r+0x1d4>
 8010630:	9b03      	ldr	r3, [sp, #12]
 8010632:	3307      	adds	r3, #7
 8010634:	f023 0307 	bic.w	r3, r3, #7
 8010638:	3308      	adds	r3, #8
 801063a:	9303      	str	r3, [sp, #12]
 801063c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801063e:	444b      	add	r3, r9
 8010640:	9309      	str	r3, [sp, #36]	; 0x24
 8010642:	e750      	b.n	80104e6 <_vfiprintf_r+0x42>
 8010644:	fb05 3202 	mla	r2, r5, r2, r3
 8010648:	2001      	movs	r0, #1
 801064a:	4688      	mov	r8, r1
 801064c:	e78a      	b.n	8010564 <_vfiprintf_r+0xc0>
 801064e:	2300      	movs	r3, #0
 8010650:	f108 0801 	add.w	r8, r8, #1
 8010654:	9305      	str	r3, [sp, #20]
 8010656:	4619      	mov	r1, r3
 8010658:	250a      	movs	r5, #10
 801065a:	4640      	mov	r0, r8
 801065c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010660:	3a30      	subs	r2, #48	; 0x30
 8010662:	2a09      	cmp	r2, #9
 8010664:	d903      	bls.n	801066e <_vfiprintf_r+0x1ca>
 8010666:	2b00      	cmp	r3, #0
 8010668:	d0c3      	beq.n	80105f2 <_vfiprintf_r+0x14e>
 801066a:	9105      	str	r1, [sp, #20]
 801066c:	e7c1      	b.n	80105f2 <_vfiprintf_r+0x14e>
 801066e:	fb05 2101 	mla	r1, r5, r1, r2
 8010672:	2301      	movs	r3, #1
 8010674:	4680      	mov	r8, r0
 8010676:	e7f0      	b.n	801065a <_vfiprintf_r+0x1b6>
 8010678:	ab03      	add	r3, sp, #12
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	4622      	mov	r2, r4
 801067e:	4b13      	ldr	r3, [pc, #76]	; (80106cc <_vfiprintf_r+0x228>)
 8010680:	a904      	add	r1, sp, #16
 8010682:	4630      	mov	r0, r6
 8010684:	f3af 8000 	nop.w
 8010688:	f1b0 3fff 	cmp.w	r0, #4294967295
 801068c:	4681      	mov	r9, r0
 801068e:	d1d5      	bne.n	801063c <_vfiprintf_r+0x198>
 8010690:	89a3      	ldrh	r3, [r4, #12]
 8010692:	065b      	lsls	r3, r3, #25
 8010694:	f53f af7e 	bmi.w	8010594 <_vfiprintf_r+0xf0>
 8010698:	9809      	ldr	r0, [sp, #36]	; 0x24
 801069a:	e77d      	b.n	8010598 <_vfiprintf_r+0xf4>
 801069c:	ab03      	add	r3, sp, #12
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	4622      	mov	r2, r4
 80106a2:	4b0a      	ldr	r3, [pc, #40]	; (80106cc <_vfiprintf_r+0x228>)
 80106a4:	a904      	add	r1, sp, #16
 80106a6:	4630      	mov	r0, r6
 80106a8:	f000 f892 	bl	80107d0 <_printf_i>
 80106ac:	e7ec      	b.n	8010688 <_vfiprintf_r+0x1e4>
 80106ae:	bf00      	nop
 80106b0:	080126e8 	.word	0x080126e8
 80106b4:	08012694 	.word	0x08012694
 80106b8:	08012708 	.word	0x08012708
 80106bc:	080126c8 	.word	0x080126c8
 80106c0:	0801269a 	.word	0x0801269a
 80106c4:	0801269e 	.word	0x0801269e
 80106c8:	00000000 	.word	0x00000000
 80106cc:	0801047f 	.word	0x0801047f

080106d0 <vfiprintf>:
 80106d0:	4613      	mov	r3, r2
 80106d2:	460a      	mov	r2, r1
 80106d4:	4601      	mov	r1, r0
 80106d6:	4802      	ldr	r0, [pc, #8]	; (80106e0 <vfiprintf+0x10>)
 80106d8:	6800      	ldr	r0, [r0, #0]
 80106da:	f7ff bee3 	b.w	80104a4 <_vfiprintf_r>
 80106de:	bf00      	nop
 80106e0:	2000029c 	.word	0x2000029c

080106e4 <_printf_common>:
 80106e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106e8:	4691      	mov	r9, r2
 80106ea:	461f      	mov	r7, r3
 80106ec:	688a      	ldr	r2, [r1, #8]
 80106ee:	690b      	ldr	r3, [r1, #16]
 80106f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80106f4:	4293      	cmp	r3, r2
 80106f6:	bfb8      	it	lt
 80106f8:	4613      	movlt	r3, r2
 80106fa:	f8c9 3000 	str.w	r3, [r9]
 80106fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010702:	4606      	mov	r6, r0
 8010704:	460c      	mov	r4, r1
 8010706:	b112      	cbz	r2, 801070e <_printf_common+0x2a>
 8010708:	3301      	adds	r3, #1
 801070a:	f8c9 3000 	str.w	r3, [r9]
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	0699      	lsls	r1, r3, #26
 8010712:	bf42      	ittt	mi
 8010714:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010718:	3302      	addmi	r3, #2
 801071a:	f8c9 3000 	strmi.w	r3, [r9]
 801071e:	6825      	ldr	r5, [r4, #0]
 8010720:	f015 0506 	ands.w	r5, r5, #6
 8010724:	d107      	bne.n	8010736 <_printf_common+0x52>
 8010726:	f104 0a19 	add.w	sl, r4, #25
 801072a:	68e3      	ldr	r3, [r4, #12]
 801072c:	f8d9 2000 	ldr.w	r2, [r9]
 8010730:	1a9b      	subs	r3, r3, r2
 8010732:	42ab      	cmp	r3, r5
 8010734:	dc28      	bgt.n	8010788 <_printf_common+0xa4>
 8010736:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801073a:	6822      	ldr	r2, [r4, #0]
 801073c:	3300      	adds	r3, #0
 801073e:	bf18      	it	ne
 8010740:	2301      	movne	r3, #1
 8010742:	0692      	lsls	r2, r2, #26
 8010744:	d42d      	bmi.n	80107a2 <_printf_common+0xbe>
 8010746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801074a:	4639      	mov	r1, r7
 801074c:	4630      	mov	r0, r6
 801074e:	47c0      	blx	r8
 8010750:	3001      	adds	r0, #1
 8010752:	d020      	beq.n	8010796 <_printf_common+0xb2>
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	68e5      	ldr	r5, [r4, #12]
 8010758:	f8d9 2000 	ldr.w	r2, [r9]
 801075c:	f003 0306 	and.w	r3, r3, #6
 8010760:	2b04      	cmp	r3, #4
 8010762:	bf08      	it	eq
 8010764:	1aad      	subeq	r5, r5, r2
 8010766:	68a3      	ldr	r3, [r4, #8]
 8010768:	6922      	ldr	r2, [r4, #16]
 801076a:	bf0c      	ite	eq
 801076c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010770:	2500      	movne	r5, #0
 8010772:	4293      	cmp	r3, r2
 8010774:	bfc4      	itt	gt
 8010776:	1a9b      	subgt	r3, r3, r2
 8010778:	18ed      	addgt	r5, r5, r3
 801077a:	f04f 0900 	mov.w	r9, #0
 801077e:	341a      	adds	r4, #26
 8010780:	454d      	cmp	r5, r9
 8010782:	d11a      	bne.n	80107ba <_printf_common+0xd6>
 8010784:	2000      	movs	r0, #0
 8010786:	e008      	b.n	801079a <_printf_common+0xb6>
 8010788:	2301      	movs	r3, #1
 801078a:	4652      	mov	r2, sl
 801078c:	4639      	mov	r1, r7
 801078e:	4630      	mov	r0, r6
 8010790:	47c0      	blx	r8
 8010792:	3001      	adds	r0, #1
 8010794:	d103      	bne.n	801079e <_printf_common+0xba>
 8010796:	f04f 30ff 	mov.w	r0, #4294967295
 801079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801079e:	3501      	adds	r5, #1
 80107a0:	e7c3      	b.n	801072a <_printf_common+0x46>
 80107a2:	18e1      	adds	r1, r4, r3
 80107a4:	1c5a      	adds	r2, r3, #1
 80107a6:	2030      	movs	r0, #48	; 0x30
 80107a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80107ac:	4422      	add	r2, r4
 80107ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80107b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80107b6:	3302      	adds	r3, #2
 80107b8:	e7c5      	b.n	8010746 <_printf_common+0x62>
 80107ba:	2301      	movs	r3, #1
 80107bc:	4622      	mov	r2, r4
 80107be:	4639      	mov	r1, r7
 80107c0:	4630      	mov	r0, r6
 80107c2:	47c0      	blx	r8
 80107c4:	3001      	adds	r0, #1
 80107c6:	d0e6      	beq.n	8010796 <_printf_common+0xb2>
 80107c8:	f109 0901 	add.w	r9, r9, #1
 80107cc:	e7d8      	b.n	8010780 <_printf_common+0x9c>
	...

080107d0 <_printf_i>:
 80107d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80107d8:	460c      	mov	r4, r1
 80107da:	7e09      	ldrb	r1, [r1, #24]
 80107dc:	b085      	sub	sp, #20
 80107de:	296e      	cmp	r1, #110	; 0x6e
 80107e0:	4617      	mov	r7, r2
 80107e2:	4606      	mov	r6, r0
 80107e4:	4698      	mov	r8, r3
 80107e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107e8:	f000 80b3 	beq.w	8010952 <_printf_i+0x182>
 80107ec:	d822      	bhi.n	8010834 <_printf_i+0x64>
 80107ee:	2963      	cmp	r1, #99	; 0x63
 80107f0:	d036      	beq.n	8010860 <_printf_i+0x90>
 80107f2:	d80a      	bhi.n	801080a <_printf_i+0x3a>
 80107f4:	2900      	cmp	r1, #0
 80107f6:	f000 80b9 	beq.w	801096c <_printf_i+0x19c>
 80107fa:	2958      	cmp	r1, #88	; 0x58
 80107fc:	f000 8083 	beq.w	8010906 <_printf_i+0x136>
 8010800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010804:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010808:	e032      	b.n	8010870 <_printf_i+0xa0>
 801080a:	2964      	cmp	r1, #100	; 0x64
 801080c:	d001      	beq.n	8010812 <_printf_i+0x42>
 801080e:	2969      	cmp	r1, #105	; 0x69
 8010810:	d1f6      	bne.n	8010800 <_printf_i+0x30>
 8010812:	6820      	ldr	r0, [r4, #0]
 8010814:	6813      	ldr	r3, [r2, #0]
 8010816:	0605      	lsls	r5, r0, #24
 8010818:	f103 0104 	add.w	r1, r3, #4
 801081c:	d52a      	bpl.n	8010874 <_printf_i+0xa4>
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	6011      	str	r1, [r2, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	da03      	bge.n	801082e <_printf_i+0x5e>
 8010826:	222d      	movs	r2, #45	; 0x2d
 8010828:	425b      	negs	r3, r3
 801082a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801082e:	486f      	ldr	r0, [pc, #444]	; (80109ec <_printf_i+0x21c>)
 8010830:	220a      	movs	r2, #10
 8010832:	e039      	b.n	80108a8 <_printf_i+0xd8>
 8010834:	2973      	cmp	r1, #115	; 0x73
 8010836:	f000 809d 	beq.w	8010974 <_printf_i+0x1a4>
 801083a:	d808      	bhi.n	801084e <_printf_i+0x7e>
 801083c:	296f      	cmp	r1, #111	; 0x6f
 801083e:	d020      	beq.n	8010882 <_printf_i+0xb2>
 8010840:	2970      	cmp	r1, #112	; 0x70
 8010842:	d1dd      	bne.n	8010800 <_printf_i+0x30>
 8010844:	6823      	ldr	r3, [r4, #0]
 8010846:	f043 0320 	orr.w	r3, r3, #32
 801084a:	6023      	str	r3, [r4, #0]
 801084c:	e003      	b.n	8010856 <_printf_i+0x86>
 801084e:	2975      	cmp	r1, #117	; 0x75
 8010850:	d017      	beq.n	8010882 <_printf_i+0xb2>
 8010852:	2978      	cmp	r1, #120	; 0x78
 8010854:	d1d4      	bne.n	8010800 <_printf_i+0x30>
 8010856:	2378      	movs	r3, #120	; 0x78
 8010858:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801085c:	4864      	ldr	r0, [pc, #400]	; (80109f0 <_printf_i+0x220>)
 801085e:	e055      	b.n	801090c <_printf_i+0x13c>
 8010860:	6813      	ldr	r3, [r2, #0]
 8010862:	1d19      	adds	r1, r3, #4
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	6011      	str	r1, [r2, #0]
 8010868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801086c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010870:	2301      	movs	r3, #1
 8010872:	e08c      	b.n	801098e <_printf_i+0x1be>
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	6011      	str	r1, [r2, #0]
 8010878:	f010 0f40 	tst.w	r0, #64	; 0x40
 801087c:	bf18      	it	ne
 801087e:	b21b      	sxthne	r3, r3
 8010880:	e7cf      	b.n	8010822 <_printf_i+0x52>
 8010882:	6813      	ldr	r3, [r2, #0]
 8010884:	6825      	ldr	r5, [r4, #0]
 8010886:	1d18      	adds	r0, r3, #4
 8010888:	6010      	str	r0, [r2, #0]
 801088a:	0628      	lsls	r0, r5, #24
 801088c:	d501      	bpl.n	8010892 <_printf_i+0xc2>
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	e002      	b.n	8010898 <_printf_i+0xc8>
 8010892:	0668      	lsls	r0, r5, #25
 8010894:	d5fb      	bpl.n	801088e <_printf_i+0xbe>
 8010896:	881b      	ldrh	r3, [r3, #0]
 8010898:	4854      	ldr	r0, [pc, #336]	; (80109ec <_printf_i+0x21c>)
 801089a:	296f      	cmp	r1, #111	; 0x6f
 801089c:	bf14      	ite	ne
 801089e:	220a      	movne	r2, #10
 80108a0:	2208      	moveq	r2, #8
 80108a2:	2100      	movs	r1, #0
 80108a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80108a8:	6865      	ldr	r5, [r4, #4]
 80108aa:	60a5      	str	r5, [r4, #8]
 80108ac:	2d00      	cmp	r5, #0
 80108ae:	f2c0 8095 	blt.w	80109dc <_printf_i+0x20c>
 80108b2:	6821      	ldr	r1, [r4, #0]
 80108b4:	f021 0104 	bic.w	r1, r1, #4
 80108b8:	6021      	str	r1, [r4, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d13d      	bne.n	801093a <_printf_i+0x16a>
 80108be:	2d00      	cmp	r5, #0
 80108c0:	f040 808e 	bne.w	80109e0 <_printf_i+0x210>
 80108c4:	4665      	mov	r5, ip
 80108c6:	2a08      	cmp	r2, #8
 80108c8:	d10b      	bne.n	80108e2 <_printf_i+0x112>
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	07db      	lsls	r3, r3, #31
 80108ce:	d508      	bpl.n	80108e2 <_printf_i+0x112>
 80108d0:	6923      	ldr	r3, [r4, #16]
 80108d2:	6862      	ldr	r2, [r4, #4]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	bfde      	ittt	le
 80108d8:	2330      	movle	r3, #48	; 0x30
 80108da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80108de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80108e2:	ebac 0305 	sub.w	r3, ip, r5
 80108e6:	6123      	str	r3, [r4, #16]
 80108e8:	f8cd 8000 	str.w	r8, [sp]
 80108ec:	463b      	mov	r3, r7
 80108ee:	aa03      	add	r2, sp, #12
 80108f0:	4621      	mov	r1, r4
 80108f2:	4630      	mov	r0, r6
 80108f4:	f7ff fef6 	bl	80106e4 <_printf_common>
 80108f8:	3001      	adds	r0, #1
 80108fa:	d14d      	bne.n	8010998 <_printf_i+0x1c8>
 80108fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010900:	b005      	add	sp, #20
 8010902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010906:	4839      	ldr	r0, [pc, #228]	; (80109ec <_printf_i+0x21c>)
 8010908:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801090c:	6813      	ldr	r3, [r2, #0]
 801090e:	6821      	ldr	r1, [r4, #0]
 8010910:	1d1d      	adds	r5, r3, #4
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	6015      	str	r5, [r2, #0]
 8010916:	060a      	lsls	r2, r1, #24
 8010918:	d50b      	bpl.n	8010932 <_printf_i+0x162>
 801091a:	07ca      	lsls	r2, r1, #31
 801091c:	bf44      	itt	mi
 801091e:	f041 0120 	orrmi.w	r1, r1, #32
 8010922:	6021      	strmi	r1, [r4, #0]
 8010924:	b91b      	cbnz	r3, 801092e <_printf_i+0x15e>
 8010926:	6822      	ldr	r2, [r4, #0]
 8010928:	f022 0220 	bic.w	r2, r2, #32
 801092c:	6022      	str	r2, [r4, #0]
 801092e:	2210      	movs	r2, #16
 8010930:	e7b7      	b.n	80108a2 <_printf_i+0xd2>
 8010932:	064d      	lsls	r5, r1, #25
 8010934:	bf48      	it	mi
 8010936:	b29b      	uxthmi	r3, r3
 8010938:	e7ef      	b.n	801091a <_printf_i+0x14a>
 801093a:	4665      	mov	r5, ip
 801093c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010940:	fb02 3311 	mls	r3, r2, r1, r3
 8010944:	5cc3      	ldrb	r3, [r0, r3]
 8010946:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801094a:	460b      	mov	r3, r1
 801094c:	2900      	cmp	r1, #0
 801094e:	d1f5      	bne.n	801093c <_printf_i+0x16c>
 8010950:	e7b9      	b.n	80108c6 <_printf_i+0xf6>
 8010952:	6813      	ldr	r3, [r2, #0]
 8010954:	6825      	ldr	r5, [r4, #0]
 8010956:	6961      	ldr	r1, [r4, #20]
 8010958:	1d18      	adds	r0, r3, #4
 801095a:	6010      	str	r0, [r2, #0]
 801095c:	0628      	lsls	r0, r5, #24
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	d501      	bpl.n	8010966 <_printf_i+0x196>
 8010962:	6019      	str	r1, [r3, #0]
 8010964:	e002      	b.n	801096c <_printf_i+0x19c>
 8010966:	066a      	lsls	r2, r5, #25
 8010968:	d5fb      	bpl.n	8010962 <_printf_i+0x192>
 801096a:	8019      	strh	r1, [r3, #0]
 801096c:	2300      	movs	r3, #0
 801096e:	6123      	str	r3, [r4, #16]
 8010970:	4665      	mov	r5, ip
 8010972:	e7b9      	b.n	80108e8 <_printf_i+0x118>
 8010974:	6813      	ldr	r3, [r2, #0]
 8010976:	1d19      	adds	r1, r3, #4
 8010978:	6011      	str	r1, [r2, #0]
 801097a:	681d      	ldr	r5, [r3, #0]
 801097c:	6862      	ldr	r2, [r4, #4]
 801097e:	2100      	movs	r1, #0
 8010980:	4628      	mov	r0, r5
 8010982:	f7ef fc2d 	bl	80001e0 <memchr>
 8010986:	b108      	cbz	r0, 801098c <_printf_i+0x1bc>
 8010988:	1b40      	subs	r0, r0, r5
 801098a:	6060      	str	r0, [r4, #4]
 801098c:	6863      	ldr	r3, [r4, #4]
 801098e:	6123      	str	r3, [r4, #16]
 8010990:	2300      	movs	r3, #0
 8010992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010996:	e7a7      	b.n	80108e8 <_printf_i+0x118>
 8010998:	6923      	ldr	r3, [r4, #16]
 801099a:	462a      	mov	r2, r5
 801099c:	4639      	mov	r1, r7
 801099e:	4630      	mov	r0, r6
 80109a0:	47c0      	blx	r8
 80109a2:	3001      	adds	r0, #1
 80109a4:	d0aa      	beq.n	80108fc <_printf_i+0x12c>
 80109a6:	6823      	ldr	r3, [r4, #0]
 80109a8:	079b      	lsls	r3, r3, #30
 80109aa:	d413      	bmi.n	80109d4 <_printf_i+0x204>
 80109ac:	68e0      	ldr	r0, [r4, #12]
 80109ae:	9b03      	ldr	r3, [sp, #12]
 80109b0:	4298      	cmp	r0, r3
 80109b2:	bfb8      	it	lt
 80109b4:	4618      	movlt	r0, r3
 80109b6:	e7a3      	b.n	8010900 <_printf_i+0x130>
 80109b8:	2301      	movs	r3, #1
 80109ba:	464a      	mov	r2, r9
 80109bc:	4639      	mov	r1, r7
 80109be:	4630      	mov	r0, r6
 80109c0:	47c0      	blx	r8
 80109c2:	3001      	adds	r0, #1
 80109c4:	d09a      	beq.n	80108fc <_printf_i+0x12c>
 80109c6:	3501      	adds	r5, #1
 80109c8:	68e3      	ldr	r3, [r4, #12]
 80109ca:	9a03      	ldr	r2, [sp, #12]
 80109cc:	1a9b      	subs	r3, r3, r2
 80109ce:	42ab      	cmp	r3, r5
 80109d0:	dcf2      	bgt.n	80109b8 <_printf_i+0x1e8>
 80109d2:	e7eb      	b.n	80109ac <_printf_i+0x1dc>
 80109d4:	2500      	movs	r5, #0
 80109d6:	f104 0919 	add.w	r9, r4, #25
 80109da:	e7f5      	b.n	80109c8 <_printf_i+0x1f8>
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d1ac      	bne.n	801093a <_printf_i+0x16a>
 80109e0:	7803      	ldrb	r3, [r0, #0]
 80109e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80109e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109ea:	e76c      	b.n	80108c6 <_printf_i+0xf6>
 80109ec:	080126a5 	.word	0x080126a5
 80109f0:	080126b6 	.word	0x080126b6

080109f4 <iprintf>:
 80109f4:	b40f      	push	{r0, r1, r2, r3}
 80109f6:	4b0a      	ldr	r3, [pc, #40]	; (8010a20 <iprintf+0x2c>)
 80109f8:	b513      	push	{r0, r1, r4, lr}
 80109fa:	681c      	ldr	r4, [r3, #0]
 80109fc:	b124      	cbz	r4, 8010a08 <iprintf+0x14>
 80109fe:	69a3      	ldr	r3, [r4, #24]
 8010a00:	b913      	cbnz	r3, 8010a08 <iprintf+0x14>
 8010a02:	4620      	mov	r0, r4
 8010a04:	f000 fa76 	bl	8010ef4 <__sinit>
 8010a08:	ab05      	add	r3, sp, #20
 8010a0a:	9a04      	ldr	r2, [sp, #16]
 8010a0c:	68a1      	ldr	r1, [r4, #8]
 8010a0e:	9301      	str	r3, [sp, #4]
 8010a10:	4620      	mov	r0, r4
 8010a12:	f7ff fd47 	bl	80104a4 <_vfiprintf_r>
 8010a16:	b002      	add	sp, #8
 8010a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a1c:	b004      	add	sp, #16
 8010a1e:	4770      	bx	lr
 8010a20:	2000029c 	.word	0x2000029c

08010a24 <_puts_r>:
 8010a24:	b570      	push	{r4, r5, r6, lr}
 8010a26:	460e      	mov	r6, r1
 8010a28:	4605      	mov	r5, r0
 8010a2a:	b118      	cbz	r0, 8010a34 <_puts_r+0x10>
 8010a2c:	6983      	ldr	r3, [r0, #24]
 8010a2e:	b90b      	cbnz	r3, 8010a34 <_puts_r+0x10>
 8010a30:	f000 fa60 	bl	8010ef4 <__sinit>
 8010a34:	69ab      	ldr	r3, [r5, #24]
 8010a36:	68ac      	ldr	r4, [r5, #8]
 8010a38:	b913      	cbnz	r3, 8010a40 <_puts_r+0x1c>
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f000 fa5a 	bl	8010ef4 <__sinit>
 8010a40:	4b23      	ldr	r3, [pc, #140]	; (8010ad0 <_puts_r+0xac>)
 8010a42:	429c      	cmp	r4, r3
 8010a44:	d117      	bne.n	8010a76 <_puts_r+0x52>
 8010a46:	686c      	ldr	r4, [r5, #4]
 8010a48:	89a3      	ldrh	r3, [r4, #12]
 8010a4a:	071b      	lsls	r3, r3, #28
 8010a4c:	d51d      	bpl.n	8010a8a <_puts_r+0x66>
 8010a4e:	6923      	ldr	r3, [r4, #16]
 8010a50:	b1db      	cbz	r3, 8010a8a <_puts_r+0x66>
 8010a52:	3e01      	subs	r6, #1
 8010a54:	68a3      	ldr	r3, [r4, #8]
 8010a56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	60a3      	str	r3, [r4, #8]
 8010a5e:	b9e9      	cbnz	r1, 8010a9c <_puts_r+0x78>
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	da2e      	bge.n	8010ac2 <_puts_r+0x9e>
 8010a64:	4622      	mov	r2, r4
 8010a66:	210a      	movs	r1, #10
 8010a68:	4628      	mov	r0, r5
 8010a6a:	f000 f893 	bl	8010b94 <__swbuf_r>
 8010a6e:	3001      	adds	r0, #1
 8010a70:	d011      	beq.n	8010a96 <_puts_r+0x72>
 8010a72:	200a      	movs	r0, #10
 8010a74:	e011      	b.n	8010a9a <_puts_r+0x76>
 8010a76:	4b17      	ldr	r3, [pc, #92]	; (8010ad4 <_puts_r+0xb0>)
 8010a78:	429c      	cmp	r4, r3
 8010a7a:	d101      	bne.n	8010a80 <_puts_r+0x5c>
 8010a7c:	68ac      	ldr	r4, [r5, #8]
 8010a7e:	e7e3      	b.n	8010a48 <_puts_r+0x24>
 8010a80:	4b15      	ldr	r3, [pc, #84]	; (8010ad8 <_puts_r+0xb4>)
 8010a82:	429c      	cmp	r4, r3
 8010a84:	bf08      	it	eq
 8010a86:	68ec      	ldreq	r4, [r5, #12]
 8010a88:	e7de      	b.n	8010a48 <_puts_r+0x24>
 8010a8a:	4621      	mov	r1, r4
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	f000 f8d3 	bl	8010c38 <__swsetup_r>
 8010a92:	2800      	cmp	r0, #0
 8010a94:	d0dd      	beq.n	8010a52 <_puts_r+0x2e>
 8010a96:	f04f 30ff 	mov.w	r0, #4294967295
 8010a9a:	bd70      	pop	{r4, r5, r6, pc}
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	da04      	bge.n	8010aaa <_puts_r+0x86>
 8010aa0:	69a2      	ldr	r2, [r4, #24]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	dc06      	bgt.n	8010ab4 <_puts_r+0x90>
 8010aa6:	290a      	cmp	r1, #10
 8010aa8:	d004      	beq.n	8010ab4 <_puts_r+0x90>
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	1c5a      	adds	r2, r3, #1
 8010aae:	6022      	str	r2, [r4, #0]
 8010ab0:	7019      	strb	r1, [r3, #0]
 8010ab2:	e7cf      	b.n	8010a54 <_puts_r+0x30>
 8010ab4:	4622      	mov	r2, r4
 8010ab6:	4628      	mov	r0, r5
 8010ab8:	f000 f86c 	bl	8010b94 <__swbuf_r>
 8010abc:	3001      	adds	r0, #1
 8010abe:	d1c9      	bne.n	8010a54 <_puts_r+0x30>
 8010ac0:	e7e9      	b.n	8010a96 <_puts_r+0x72>
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	200a      	movs	r0, #10
 8010ac6:	1c5a      	adds	r2, r3, #1
 8010ac8:	6022      	str	r2, [r4, #0]
 8010aca:	7018      	strb	r0, [r3, #0]
 8010acc:	e7e5      	b.n	8010a9a <_puts_r+0x76>
 8010ace:	bf00      	nop
 8010ad0:	080126e8 	.word	0x080126e8
 8010ad4:	08012708 	.word	0x08012708
 8010ad8:	080126c8 	.word	0x080126c8

08010adc <puts>:
 8010adc:	4b02      	ldr	r3, [pc, #8]	; (8010ae8 <puts+0xc>)
 8010ade:	4601      	mov	r1, r0
 8010ae0:	6818      	ldr	r0, [r3, #0]
 8010ae2:	f7ff bf9f 	b.w	8010a24 <_puts_r>
 8010ae6:	bf00      	nop
 8010ae8:	2000029c 	.word	0x2000029c

08010aec <rand>:
 8010aec:	b538      	push	{r3, r4, r5, lr}
 8010aee:	4b13      	ldr	r3, [pc, #76]	; (8010b3c <rand+0x50>)
 8010af0:	681c      	ldr	r4, [r3, #0]
 8010af2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010af4:	b97b      	cbnz	r3, 8010b16 <rand+0x2a>
 8010af6:	2018      	movs	r0, #24
 8010af8:	f000 faea 	bl	80110d0 <malloc>
 8010afc:	4a10      	ldr	r2, [pc, #64]	; (8010b40 <rand+0x54>)
 8010afe:	4b11      	ldr	r3, [pc, #68]	; (8010b44 <rand+0x58>)
 8010b00:	63a0      	str	r0, [r4, #56]	; 0x38
 8010b02:	e9c0 2300 	strd	r2, r3, [r0]
 8010b06:	4b10      	ldr	r3, [pc, #64]	; (8010b48 <rand+0x5c>)
 8010b08:	6083      	str	r3, [r0, #8]
 8010b0a:	230b      	movs	r3, #11
 8010b0c:	8183      	strh	r3, [r0, #12]
 8010b0e:	2201      	movs	r2, #1
 8010b10:	2300      	movs	r3, #0
 8010b12:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010b16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010b18:	480c      	ldr	r0, [pc, #48]	; (8010b4c <rand+0x60>)
 8010b1a:	690a      	ldr	r2, [r1, #16]
 8010b1c:	694b      	ldr	r3, [r1, #20]
 8010b1e:	4c0c      	ldr	r4, [pc, #48]	; (8010b50 <rand+0x64>)
 8010b20:	4350      	muls	r0, r2
 8010b22:	fb04 0003 	mla	r0, r4, r3, r0
 8010b26:	fba2 2304 	umull	r2, r3, r2, r4
 8010b2a:	4403      	add	r3, r0
 8010b2c:	1c54      	adds	r4, r2, #1
 8010b2e:	f143 0500 	adc.w	r5, r3, #0
 8010b32:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8010b36:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8010b3a:	bd38      	pop	{r3, r4, r5, pc}
 8010b3c:	2000029c 	.word	0x2000029c
 8010b40:	abcd330e 	.word	0xabcd330e
 8010b44:	e66d1234 	.word	0xe66d1234
 8010b48:	0005deec 	.word	0x0005deec
 8010b4c:	5851f42d 	.word	0x5851f42d
 8010b50:	4c957f2d 	.word	0x4c957f2d

08010b54 <siprintf>:
 8010b54:	b40e      	push	{r1, r2, r3}
 8010b56:	b500      	push	{lr}
 8010b58:	b09c      	sub	sp, #112	; 0x70
 8010b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8010b5c:	9002      	str	r0, [sp, #8]
 8010b5e:	9006      	str	r0, [sp, #24]
 8010b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010b64:	4809      	ldr	r0, [pc, #36]	; (8010b8c <siprintf+0x38>)
 8010b66:	9107      	str	r1, [sp, #28]
 8010b68:	9104      	str	r1, [sp, #16]
 8010b6a:	4909      	ldr	r1, [pc, #36]	; (8010b90 <siprintf+0x3c>)
 8010b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b70:	9105      	str	r1, [sp, #20]
 8010b72:	6800      	ldr	r0, [r0, #0]
 8010b74:	9301      	str	r3, [sp, #4]
 8010b76:	a902      	add	r1, sp, #8
 8010b78:	f000 fbf4 	bl	8011364 <_svfiprintf_r>
 8010b7c:	9b02      	ldr	r3, [sp, #8]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	701a      	strb	r2, [r3, #0]
 8010b82:	b01c      	add	sp, #112	; 0x70
 8010b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b88:	b003      	add	sp, #12
 8010b8a:	4770      	bx	lr
 8010b8c:	2000029c 	.word	0x2000029c
 8010b90:	ffff0208 	.word	0xffff0208

08010b94 <__swbuf_r>:
 8010b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b96:	460e      	mov	r6, r1
 8010b98:	4614      	mov	r4, r2
 8010b9a:	4605      	mov	r5, r0
 8010b9c:	b118      	cbz	r0, 8010ba6 <__swbuf_r+0x12>
 8010b9e:	6983      	ldr	r3, [r0, #24]
 8010ba0:	b90b      	cbnz	r3, 8010ba6 <__swbuf_r+0x12>
 8010ba2:	f000 f9a7 	bl	8010ef4 <__sinit>
 8010ba6:	4b21      	ldr	r3, [pc, #132]	; (8010c2c <__swbuf_r+0x98>)
 8010ba8:	429c      	cmp	r4, r3
 8010baa:	d12a      	bne.n	8010c02 <__swbuf_r+0x6e>
 8010bac:	686c      	ldr	r4, [r5, #4]
 8010bae:	69a3      	ldr	r3, [r4, #24]
 8010bb0:	60a3      	str	r3, [r4, #8]
 8010bb2:	89a3      	ldrh	r3, [r4, #12]
 8010bb4:	071a      	lsls	r2, r3, #28
 8010bb6:	d52e      	bpl.n	8010c16 <__swbuf_r+0x82>
 8010bb8:	6923      	ldr	r3, [r4, #16]
 8010bba:	b363      	cbz	r3, 8010c16 <__swbuf_r+0x82>
 8010bbc:	6923      	ldr	r3, [r4, #16]
 8010bbe:	6820      	ldr	r0, [r4, #0]
 8010bc0:	1ac0      	subs	r0, r0, r3
 8010bc2:	6963      	ldr	r3, [r4, #20]
 8010bc4:	b2f6      	uxtb	r6, r6
 8010bc6:	4283      	cmp	r3, r0
 8010bc8:	4637      	mov	r7, r6
 8010bca:	dc04      	bgt.n	8010bd6 <__swbuf_r+0x42>
 8010bcc:	4621      	mov	r1, r4
 8010bce:	4628      	mov	r0, r5
 8010bd0:	f000 f926 	bl	8010e20 <_fflush_r>
 8010bd4:	bb28      	cbnz	r0, 8010c22 <__swbuf_r+0x8e>
 8010bd6:	68a3      	ldr	r3, [r4, #8]
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	60a3      	str	r3, [r4, #8]
 8010bdc:	6823      	ldr	r3, [r4, #0]
 8010bde:	1c5a      	adds	r2, r3, #1
 8010be0:	6022      	str	r2, [r4, #0]
 8010be2:	701e      	strb	r6, [r3, #0]
 8010be4:	6963      	ldr	r3, [r4, #20]
 8010be6:	3001      	adds	r0, #1
 8010be8:	4283      	cmp	r3, r0
 8010bea:	d004      	beq.n	8010bf6 <__swbuf_r+0x62>
 8010bec:	89a3      	ldrh	r3, [r4, #12]
 8010bee:	07db      	lsls	r3, r3, #31
 8010bf0:	d519      	bpl.n	8010c26 <__swbuf_r+0x92>
 8010bf2:	2e0a      	cmp	r6, #10
 8010bf4:	d117      	bne.n	8010c26 <__swbuf_r+0x92>
 8010bf6:	4621      	mov	r1, r4
 8010bf8:	4628      	mov	r0, r5
 8010bfa:	f000 f911 	bl	8010e20 <_fflush_r>
 8010bfe:	b190      	cbz	r0, 8010c26 <__swbuf_r+0x92>
 8010c00:	e00f      	b.n	8010c22 <__swbuf_r+0x8e>
 8010c02:	4b0b      	ldr	r3, [pc, #44]	; (8010c30 <__swbuf_r+0x9c>)
 8010c04:	429c      	cmp	r4, r3
 8010c06:	d101      	bne.n	8010c0c <__swbuf_r+0x78>
 8010c08:	68ac      	ldr	r4, [r5, #8]
 8010c0a:	e7d0      	b.n	8010bae <__swbuf_r+0x1a>
 8010c0c:	4b09      	ldr	r3, [pc, #36]	; (8010c34 <__swbuf_r+0xa0>)
 8010c0e:	429c      	cmp	r4, r3
 8010c10:	bf08      	it	eq
 8010c12:	68ec      	ldreq	r4, [r5, #12]
 8010c14:	e7cb      	b.n	8010bae <__swbuf_r+0x1a>
 8010c16:	4621      	mov	r1, r4
 8010c18:	4628      	mov	r0, r5
 8010c1a:	f000 f80d 	bl	8010c38 <__swsetup_r>
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d0cc      	beq.n	8010bbc <__swbuf_r+0x28>
 8010c22:	f04f 37ff 	mov.w	r7, #4294967295
 8010c26:	4638      	mov	r0, r7
 8010c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	080126e8 	.word	0x080126e8
 8010c30:	08012708 	.word	0x08012708
 8010c34:	080126c8 	.word	0x080126c8

08010c38 <__swsetup_r>:
 8010c38:	4b32      	ldr	r3, [pc, #200]	; (8010d04 <__swsetup_r+0xcc>)
 8010c3a:	b570      	push	{r4, r5, r6, lr}
 8010c3c:	681d      	ldr	r5, [r3, #0]
 8010c3e:	4606      	mov	r6, r0
 8010c40:	460c      	mov	r4, r1
 8010c42:	b125      	cbz	r5, 8010c4e <__swsetup_r+0x16>
 8010c44:	69ab      	ldr	r3, [r5, #24]
 8010c46:	b913      	cbnz	r3, 8010c4e <__swsetup_r+0x16>
 8010c48:	4628      	mov	r0, r5
 8010c4a:	f000 f953 	bl	8010ef4 <__sinit>
 8010c4e:	4b2e      	ldr	r3, [pc, #184]	; (8010d08 <__swsetup_r+0xd0>)
 8010c50:	429c      	cmp	r4, r3
 8010c52:	d10f      	bne.n	8010c74 <__swsetup_r+0x3c>
 8010c54:	686c      	ldr	r4, [r5, #4]
 8010c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	0715      	lsls	r5, r2, #28
 8010c5e:	d42c      	bmi.n	8010cba <__swsetup_r+0x82>
 8010c60:	06d0      	lsls	r0, r2, #27
 8010c62:	d411      	bmi.n	8010c88 <__swsetup_r+0x50>
 8010c64:	2209      	movs	r2, #9
 8010c66:	6032      	str	r2, [r6, #0]
 8010c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c6c:	81a3      	strh	r3, [r4, #12]
 8010c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c72:	e03e      	b.n	8010cf2 <__swsetup_r+0xba>
 8010c74:	4b25      	ldr	r3, [pc, #148]	; (8010d0c <__swsetup_r+0xd4>)
 8010c76:	429c      	cmp	r4, r3
 8010c78:	d101      	bne.n	8010c7e <__swsetup_r+0x46>
 8010c7a:	68ac      	ldr	r4, [r5, #8]
 8010c7c:	e7eb      	b.n	8010c56 <__swsetup_r+0x1e>
 8010c7e:	4b24      	ldr	r3, [pc, #144]	; (8010d10 <__swsetup_r+0xd8>)
 8010c80:	429c      	cmp	r4, r3
 8010c82:	bf08      	it	eq
 8010c84:	68ec      	ldreq	r4, [r5, #12]
 8010c86:	e7e6      	b.n	8010c56 <__swsetup_r+0x1e>
 8010c88:	0751      	lsls	r1, r2, #29
 8010c8a:	d512      	bpl.n	8010cb2 <__swsetup_r+0x7a>
 8010c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c8e:	b141      	cbz	r1, 8010ca2 <__swsetup_r+0x6a>
 8010c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c94:	4299      	cmp	r1, r3
 8010c96:	d002      	beq.n	8010c9e <__swsetup_r+0x66>
 8010c98:	4630      	mov	r0, r6
 8010c9a:	f000 fa3b 	bl	8011114 <_free_r>
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	6363      	str	r3, [r4, #52]	; 0x34
 8010ca2:	89a3      	ldrh	r3, [r4, #12]
 8010ca4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010ca8:	81a3      	strh	r3, [r4, #12]
 8010caa:	2300      	movs	r3, #0
 8010cac:	6063      	str	r3, [r4, #4]
 8010cae:	6923      	ldr	r3, [r4, #16]
 8010cb0:	6023      	str	r3, [r4, #0]
 8010cb2:	89a3      	ldrh	r3, [r4, #12]
 8010cb4:	f043 0308 	orr.w	r3, r3, #8
 8010cb8:	81a3      	strh	r3, [r4, #12]
 8010cba:	6923      	ldr	r3, [r4, #16]
 8010cbc:	b94b      	cbnz	r3, 8010cd2 <__swsetup_r+0x9a>
 8010cbe:	89a3      	ldrh	r3, [r4, #12]
 8010cc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cc8:	d003      	beq.n	8010cd2 <__swsetup_r+0x9a>
 8010cca:	4621      	mov	r1, r4
 8010ccc:	4630      	mov	r0, r6
 8010cce:	f000 f9bf 	bl	8011050 <__smakebuf_r>
 8010cd2:	89a2      	ldrh	r2, [r4, #12]
 8010cd4:	f012 0301 	ands.w	r3, r2, #1
 8010cd8:	d00c      	beq.n	8010cf4 <__swsetup_r+0xbc>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	60a3      	str	r3, [r4, #8]
 8010cde:	6963      	ldr	r3, [r4, #20]
 8010ce0:	425b      	negs	r3, r3
 8010ce2:	61a3      	str	r3, [r4, #24]
 8010ce4:	6923      	ldr	r3, [r4, #16]
 8010ce6:	b953      	cbnz	r3, 8010cfe <__swsetup_r+0xc6>
 8010ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010cf0:	d1ba      	bne.n	8010c68 <__swsetup_r+0x30>
 8010cf2:	bd70      	pop	{r4, r5, r6, pc}
 8010cf4:	0792      	lsls	r2, r2, #30
 8010cf6:	bf58      	it	pl
 8010cf8:	6963      	ldrpl	r3, [r4, #20]
 8010cfa:	60a3      	str	r3, [r4, #8]
 8010cfc:	e7f2      	b.n	8010ce4 <__swsetup_r+0xac>
 8010cfe:	2000      	movs	r0, #0
 8010d00:	e7f7      	b.n	8010cf2 <__swsetup_r+0xba>
 8010d02:	bf00      	nop
 8010d04:	2000029c 	.word	0x2000029c
 8010d08:	080126e8 	.word	0x080126e8
 8010d0c:	08012708 	.word	0x08012708
 8010d10:	080126c8 	.word	0x080126c8

08010d14 <__sflush_r>:
 8010d14:	898a      	ldrh	r2, [r1, #12]
 8010d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d1a:	4605      	mov	r5, r0
 8010d1c:	0710      	lsls	r0, r2, #28
 8010d1e:	460c      	mov	r4, r1
 8010d20:	d458      	bmi.n	8010dd4 <__sflush_r+0xc0>
 8010d22:	684b      	ldr	r3, [r1, #4]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	dc05      	bgt.n	8010d34 <__sflush_r+0x20>
 8010d28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	dc02      	bgt.n	8010d34 <__sflush_r+0x20>
 8010d2e:	2000      	movs	r0, #0
 8010d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d36:	2e00      	cmp	r6, #0
 8010d38:	d0f9      	beq.n	8010d2e <__sflush_r+0x1a>
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d40:	682f      	ldr	r7, [r5, #0]
 8010d42:	6a21      	ldr	r1, [r4, #32]
 8010d44:	602b      	str	r3, [r5, #0]
 8010d46:	d032      	beq.n	8010dae <__sflush_r+0x9a>
 8010d48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d4a:	89a3      	ldrh	r3, [r4, #12]
 8010d4c:	075a      	lsls	r2, r3, #29
 8010d4e:	d505      	bpl.n	8010d5c <__sflush_r+0x48>
 8010d50:	6863      	ldr	r3, [r4, #4]
 8010d52:	1ac0      	subs	r0, r0, r3
 8010d54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d56:	b10b      	cbz	r3, 8010d5c <__sflush_r+0x48>
 8010d58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d5a:	1ac0      	subs	r0, r0, r3
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	4602      	mov	r2, r0
 8010d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d62:	6a21      	ldr	r1, [r4, #32]
 8010d64:	4628      	mov	r0, r5
 8010d66:	47b0      	blx	r6
 8010d68:	1c43      	adds	r3, r0, #1
 8010d6a:	89a3      	ldrh	r3, [r4, #12]
 8010d6c:	d106      	bne.n	8010d7c <__sflush_r+0x68>
 8010d6e:	6829      	ldr	r1, [r5, #0]
 8010d70:	291d      	cmp	r1, #29
 8010d72:	d848      	bhi.n	8010e06 <__sflush_r+0xf2>
 8010d74:	4a29      	ldr	r2, [pc, #164]	; (8010e1c <__sflush_r+0x108>)
 8010d76:	40ca      	lsrs	r2, r1
 8010d78:	07d6      	lsls	r6, r2, #31
 8010d7a:	d544      	bpl.n	8010e06 <__sflush_r+0xf2>
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	6062      	str	r2, [r4, #4]
 8010d80:	04d9      	lsls	r1, r3, #19
 8010d82:	6922      	ldr	r2, [r4, #16]
 8010d84:	6022      	str	r2, [r4, #0]
 8010d86:	d504      	bpl.n	8010d92 <__sflush_r+0x7e>
 8010d88:	1c42      	adds	r2, r0, #1
 8010d8a:	d101      	bne.n	8010d90 <__sflush_r+0x7c>
 8010d8c:	682b      	ldr	r3, [r5, #0]
 8010d8e:	b903      	cbnz	r3, 8010d92 <__sflush_r+0x7e>
 8010d90:	6560      	str	r0, [r4, #84]	; 0x54
 8010d92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d94:	602f      	str	r7, [r5, #0]
 8010d96:	2900      	cmp	r1, #0
 8010d98:	d0c9      	beq.n	8010d2e <__sflush_r+0x1a>
 8010d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d9e:	4299      	cmp	r1, r3
 8010da0:	d002      	beq.n	8010da8 <__sflush_r+0x94>
 8010da2:	4628      	mov	r0, r5
 8010da4:	f000 f9b6 	bl	8011114 <_free_r>
 8010da8:	2000      	movs	r0, #0
 8010daa:	6360      	str	r0, [r4, #52]	; 0x34
 8010dac:	e7c0      	b.n	8010d30 <__sflush_r+0x1c>
 8010dae:	2301      	movs	r3, #1
 8010db0:	4628      	mov	r0, r5
 8010db2:	47b0      	blx	r6
 8010db4:	1c41      	adds	r1, r0, #1
 8010db6:	d1c8      	bne.n	8010d4a <__sflush_r+0x36>
 8010db8:	682b      	ldr	r3, [r5, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d0c5      	beq.n	8010d4a <__sflush_r+0x36>
 8010dbe:	2b1d      	cmp	r3, #29
 8010dc0:	d001      	beq.n	8010dc6 <__sflush_r+0xb2>
 8010dc2:	2b16      	cmp	r3, #22
 8010dc4:	d101      	bne.n	8010dca <__sflush_r+0xb6>
 8010dc6:	602f      	str	r7, [r5, #0]
 8010dc8:	e7b1      	b.n	8010d2e <__sflush_r+0x1a>
 8010dca:	89a3      	ldrh	r3, [r4, #12]
 8010dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dd0:	81a3      	strh	r3, [r4, #12]
 8010dd2:	e7ad      	b.n	8010d30 <__sflush_r+0x1c>
 8010dd4:	690f      	ldr	r7, [r1, #16]
 8010dd6:	2f00      	cmp	r7, #0
 8010dd8:	d0a9      	beq.n	8010d2e <__sflush_r+0x1a>
 8010dda:	0793      	lsls	r3, r2, #30
 8010ddc:	680e      	ldr	r6, [r1, #0]
 8010dde:	bf08      	it	eq
 8010de0:	694b      	ldreq	r3, [r1, #20]
 8010de2:	600f      	str	r7, [r1, #0]
 8010de4:	bf18      	it	ne
 8010de6:	2300      	movne	r3, #0
 8010de8:	eba6 0807 	sub.w	r8, r6, r7
 8010dec:	608b      	str	r3, [r1, #8]
 8010dee:	f1b8 0f00 	cmp.w	r8, #0
 8010df2:	dd9c      	ble.n	8010d2e <__sflush_r+0x1a>
 8010df4:	4643      	mov	r3, r8
 8010df6:	463a      	mov	r2, r7
 8010df8:	6a21      	ldr	r1, [r4, #32]
 8010dfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	47b0      	blx	r6
 8010e00:	2800      	cmp	r0, #0
 8010e02:	dc06      	bgt.n	8010e12 <__sflush_r+0xfe>
 8010e04:	89a3      	ldrh	r3, [r4, #12]
 8010e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e0a:	81a3      	strh	r3, [r4, #12]
 8010e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e10:	e78e      	b.n	8010d30 <__sflush_r+0x1c>
 8010e12:	4407      	add	r7, r0
 8010e14:	eba8 0800 	sub.w	r8, r8, r0
 8010e18:	e7e9      	b.n	8010dee <__sflush_r+0xda>
 8010e1a:	bf00      	nop
 8010e1c:	20400001 	.word	0x20400001

08010e20 <_fflush_r>:
 8010e20:	b538      	push	{r3, r4, r5, lr}
 8010e22:	690b      	ldr	r3, [r1, #16]
 8010e24:	4605      	mov	r5, r0
 8010e26:	460c      	mov	r4, r1
 8010e28:	b1db      	cbz	r3, 8010e62 <_fflush_r+0x42>
 8010e2a:	b118      	cbz	r0, 8010e34 <_fflush_r+0x14>
 8010e2c:	6983      	ldr	r3, [r0, #24]
 8010e2e:	b90b      	cbnz	r3, 8010e34 <_fflush_r+0x14>
 8010e30:	f000 f860 	bl	8010ef4 <__sinit>
 8010e34:	4b0c      	ldr	r3, [pc, #48]	; (8010e68 <_fflush_r+0x48>)
 8010e36:	429c      	cmp	r4, r3
 8010e38:	d109      	bne.n	8010e4e <_fflush_r+0x2e>
 8010e3a:	686c      	ldr	r4, [r5, #4]
 8010e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e40:	b17b      	cbz	r3, 8010e62 <_fflush_r+0x42>
 8010e42:	4621      	mov	r1, r4
 8010e44:	4628      	mov	r0, r5
 8010e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e4a:	f7ff bf63 	b.w	8010d14 <__sflush_r>
 8010e4e:	4b07      	ldr	r3, [pc, #28]	; (8010e6c <_fflush_r+0x4c>)
 8010e50:	429c      	cmp	r4, r3
 8010e52:	d101      	bne.n	8010e58 <_fflush_r+0x38>
 8010e54:	68ac      	ldr	r4, [r5, #8]
 8010e56:	e7f1      	b.n	8010e3c <_fflush_r+0x1c>
 8010e58:	4b05      	ldr	r3, [pc, #20]	; (8010e70 <_fflush_r+0x50>)
 8010e5a:	429c      	cmp	r4, r3
 8010e5c:	bf08      	it	eq
 8010e5e:	68ec      	ldreq	r4, [r5, #12]
 8010e60:	e7ec      	b.n	8010e3c <_fflush_r+0x1c>
 8010e62:	2000      	movs	r0, #0
 8010e64:	bd38      	pop	{r3, r4, r5, pc}
 8010e66:	bf00      	nop
 8010e68:	080126e8 	.word	0x080126e8
 8010e6c:	08012708 	.word	0x08012708
 8010e70:	080126c8 	.word	0x080126c8

08010e74 <std>:
 8010e74:	2300      	movs	r3, #0
 8010e76:	b510      	push	{r4, lr}
 8010e78:	4604      	mov	r4, r0
 8010e7a:	e9c0 3300 	strd	r3, r3, [r0]
 8010e7e:	6083      	str	r3, [r0, #8]
 8010e80:	8181      	strh	r1, [r0, #12]
 8010e82:	6643      	str	r3, [r0, #100]	; 0x64
 8010e84:	81c2      	strh	r2, [r0, #14]
 8010e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e8a:	6183      	str	r3, [r0, #24]
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	2208      	movs	r2, #8
 8010e90:	305c      	adds	r0, #92	; 0x5c
 8010e92:	f7ff fad5 	bl	8010440 <memset>
 8010e96:	4b05      	ldr	r3, [pc, #20]	; (8010eac <std+0x38>)
 8010e98:	6263      	str	r3, [r4, #36]	; 0x24
 8010e9a:	4b05      	ldr	r3, [pc, #20]	; (8010eb0 <std+0x3c>)
 8010e9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e9e:	4b05      	ldr	r3, [pc, #20]	; (8010eb4 <std+0x40>)
 8010ea0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ea2:	4b05      	ldr	r3, [pc, #20]	; (8010eb8 <std+0x44>)
 8010ea4:	6224      	str	r4, [r4, #32]
 8010ea6:	6323      	str	r3, [r4, #48]	; 0x30
 8010ea8:	bd10      	pop	{r4, pc}
 8010eaa:	bf00      	nop
 8010eac:	08011575 	.word	0x08011575
 8010eb0:	08011597 	.word	0x08011597
 8010eb4:	080115cf 	.word	0x080115cf
 8010eb8:	080115f3 	.word	0x080115f3

08010ebc <_cleanup_r>:
 8010ebc:	4901      	ldr	r1, [pc, #4]	; (8010ec4 <_cleanup_r+0x8>)
 8010ebe:	f000 b885 	b.w	8010fcc <_fwalk_reent>
 8010ec2:	bf00      	nop
 8010ec4:	08010e21 	.word	0x08010e21

08010ec8 <__sfmoreglue>:
 8010ec8:	b570      	push	{r4, r5, r6, lr}
 8010eca:	1e4a      	subs	r2, r1, #1
 8010ecc:	2568      	movs	r5, #104	; 0x68
 8010ece:	4355      	muls	r5, r2
 8010ed0:	460e      	mov	r6, r1
 8010ed2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010ed6:	f000 f96b 	bl	80111b0 <_malloc_r>
 8010eda:	4604      	mov	r4, r0
 8010edc:	b140      	cbz	r0, 8010ef0 <__sfmoreglue+0x28>
 8010ede:	2100      	movs	r1, #0
 8010ee0:	e9c0 1600 	strd	r1, r6, [r0]
 8010ee4:	300c      	adds	r0, #12
 8010ee6:	60a0      	str	r0, [r4, #8]
 8010ee8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010eec:	f7ff faa8 	bl	8010440 <memset>
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	bd70      	pop	{r4, r5, r6, pc}

08010ef4 <__sinit>:
 8010ef4:	6983      	ldr	r3, [r0, #24]
 8010ef6:	b510      	push	{r4, lr}
 8010ef8:	4604      	mov	r4, r0
 8010efa:	bb33      	cbnz	r3, 8010f4a <__sinit+0x56>
 8010efc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010f00:	6503      	str	r3, [r0, #80]	; 0x50
 8010f02:	4b12      	ldr	r3, [pc, #72]	; (8010f4c <__sinit+0x58>)
 8010f04:	4a12      	ldr	r2, [pc, #72]	; (8010f50 <__sinit+0x5c>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	6282      	str	r2, [r0, #40]	; 0x28
 8010f0a:	4298      	cmp	r0, r3
 8010f0c:	bf04      	itt	eq
 8010f0e:	2301      	moveq	r3, #1
 8010f10:	6183      	streq	r3, [r0, #24]
 8010f12:	f000 f81f 	bl	8010f54 <__sfp>
 8010f16:	6060      	str	r0, [r4, #4]
 8010f18:	4620      	mov	r0, r4
 8010f1a:	f000 f81b 	bl	8010f54 <__sfp>
 8010f1e:	60a0      	str	r0, [r4, #8]
 8010f20:	4620      	mov	r0, r4
 8010f22:	f000 f817 	bl	8010f54 <__sfp>
 8010f26:	2200      	movs	r2, #0
 8010f28:	60e0      	str	r0, [r4, #12]
 8010f2a:	2104      	movs	r1, #4
 8010f2c:	6860      	ldr	r0, [r4, #4]
 8010f2e:	f7ff ffa1 	bl	8010e74 <std>
 8010f32:	2201      	movs	r2, #1
 8010f34:	2109      	movs	r1, #9
 8010f36:	68a0      	ldr	r0, [r4, #8]
 8010f38:	f7ff ff9c 	bl	8010e74 <std>
 8010f3c:	2202      	movs	r2, #2
 8010f3e:	2112      	movs	r1, #18
 8010f40:	68e0      	ldr	r0, [r4, #12]
 8010f42:	f7ff ff97 	bl	8010e74 <std>
 8010f46:	2301      	movs	r3, #1
 8010f48:	61a3      	str	r3, [r4, #24]
 8010f4a:	bd10      	pop	{r4, pc}
 8010f4c:	08012690 	.word	0x08012690
 8010f50:	08010ebd 	.word	0x08010ebd

08010f54 <__sfp>:
 8010f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f56:	4b1b      	ldr	r3, [pc, #108]	; (8010fc4 <__sfp+0x70>)
 8010f58:	681e      	ldr	r6, [r3, #0]
 8010f5a:	69b3      	ldr	r3, [r6, #24]
 8010f5c:	4607      	mov	r7, r0
 8010f5e:	b913      	cbnz	r3, 8010f66 <__sfp+0x12>
 8010f60:	4630      	mov	r0, r6
 8010f62:	f7ff ffc7 	bl	8010ef4 <__sinit>
 8010f66:	3648      	adds	r6, #72	; 0x48
 8010f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f6c:	3b01      	subs	r3, #1
 8010f6e:	d503      	bpl.n	8010f78 <__sfp+0x24>
 8010f70:	6833      	ldr	r3, [r6, #0]
 8010f72:	b133      	cbz	r3, 8010f82 <__sfp+0x2e>
 8010f74:	6836      	ldr	r6, [r6, #0]
 8010f76:	e7f7      	b.n	8010f68 <__sfp+0x14>
 8010f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f7c:	b16d      	cbz	r5, 8010f9a <__sfp+0x46>
 8010f7e:	3468      	adds	r4, #104	; 0x68
 8010f80:	e7f4      	b.n	8010f6c <__sfp+0x18>
 8010f82:	2104      	movs	r1, #4
 8010f84:	4638      	mov	r0, r7
 8010f86:	f7ff ff9f 	bl	8010ec8 <__sfmoreglue>
 8010f8a:	6030      	str	r0, [r6, #0]
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	d1f1      	bne.n	8010f74 <__sfp+0x20>
 8010f90:	230c      	movs	r3, #12
 8010f92:	603b      	str	r3, [r7, #0]
 8010f94:	4604      	mov	r4, r0
 8010f96:	4620      	mov	r0, r4
 8010f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f9a:	4b0b      	ldr	r3, [pc, #44]	; (8010fc8 <__sfp+0x74>)
 8010f9c:	6665      	str	r5, [r4, #100]	; 0x64
 8010f9e:	e9c4 5500 	strd	r5, r5, [r4]
 8010fa2:	60a5      	str	r5, [r4, #8]
 8010fa4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010fa8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010fac:	2208      	movs	r2, #8
 8010fae:	4629      	mov	r1, r5
 8010fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010fb4:	f7ff fa44 	bl	8010440 <memset>
 8010fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010fc0:	e7e9      	b.n	8010f96 <__sfp+0x42>
 8010fc2:	bf00      	nop
 8010fc4:	08012690 	.word	0x08012690
 8010fc8:	ffff0001 	.word	0xffff0001

08010fcc <_fwalk_reent>:
 8010fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fd0:	4680      	mov	r8, r0
 8010fd2:	4689      	mov	r9, r1
 8010fd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010fd8:	2600      	movs	r6, #0
 8010fda:	b914      	cbnz	r4, 8010fe2 <_fwalk_reent+0x16>
 8010fdc:	4630      	mov	r0, r6
 8010fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fe2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010fe6:	3f01      	subs	r7, #1
 8010fe8:	d501      	bpl.n	8010fee <_fwalk_reent+0x22>
 8010fea:	6824      	ldr	r4, [r4, #0]
 8010fec:	e7f5      	b.n	8010fda <_fwalk_reent+0xe>
 8010fee:	89ab      	ldrh	r3, [r5, #12]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d907      	bls.n	8011004 <_fwalk_reent+0x38>
 8010ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	d003      	beq.n	8011004 <_fwalk_reent+0x38>
 8010ffc:	4629      	mov	r1, r5
 8010ffe:	4640      	mov	r0, r8
 8011000:	47c8      	blx	r9
 8011002:	4306      	orrs	r6, r0
 8011004:	3568      	adds	r5, #104	; 0x68
 8011006:	e7ee      	b.n	8010fe6 <_fwalk_reent+0x1a>

08011008 <__swhatbuf_r>:
 8011008:	b570      	push	{r4, r5, r6, lr}
 801100a:	460e      	mov	r6, r1
 801100c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011010:	2900      	cmp	r1, #0
 8011012:	b096      	sub	sp, #88	; 0x58
 8011014:	4614      	mov	r4, r2
 8011016:	461d      	mov	r5, r3
 8011018:	da07      	bge.n	801102a <__swhatbuf_r+0x22>
 801101a:	2300      	movs	r3, #0
 801101c:	602b      	str	r3, [r5, #0]
 801101e:	89b3      	ldrh	r3, [r6, #12]
 8011020:	061a      	lsls	r2, r3, #24
 8011022:	d410      	bmi.n	8011046 <__swhatbuf_r+0x3e>
 8011024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011028:	e00e      	b.n	8011048 <__swhatbuf_r+0x40>
 801102a:	466a      	mov	r2, sp
 801102c:	f000 fb08 	bl	8011640 <_fstat_r>
 8011030:	2800      	cmp	r0, #0
 8011032:	dbf2      	blt.n	801101a <__swhatbuf_r+0x12>
 8011034:	9a01      	ldr	r2, [sp, #4]
 8011036:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801103a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801103e:	425a      	negs	r2, r3
 8011040:	415a      	adcs	r2, r3
 8011042:	602a      	str	r2, [r5, #0]
 8011044:	e7ee      	b.n	8011024 <__swhatbuf_r+0x1c>
 8011046:	2340      	movs	r3, #64	; 0x40
 8011048:	2000      	movs	r0, #0
 801104a:	6023      	str	r3, [r4, #0]
 801104c:	b016      	add	sp, #88	; 0x58
 801104e:	bd70      	pop	{r4, r5, r6, pc}

08011050 <__smakebuf_r>:
 8011050:	898b      	ldrh	r3, [r1, #12]
 8011052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011054:	079d      	lsls	r5, r3, #30
 8011056:	4606      	mov	r6, r0
 8011058:	460c      	mov	r4, r1
 801105a:	d507      	bpl.n	801106c <__smakebuf_r+0x1c>
 801105c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011060:	6023      	str	r3, [r4, #0]
 8011062:	6123      	str	r3, [r4, #16]
 8011064:	2301      	movs	r3, #1
 8011066:	6163      	str	r3, [r4, #20]
 8011068:	b002      	add	sp, #8
 801106a:	bd70      	pop	{r4, r5, r6, pc}
 801106c:	ab01      	add	r3, sp, #4
 801106e:	466a      	mov	r2, sp
 8011070:	f7ff ffca 	bl	8011008 <__swhatbuf_r>
 8011074:	9900      	ldr	r1, [sp, #0]
 8011076:	4605      	mov	r5, r0
 8011078:	4630      	mov	r0, r6
 801107a:	f000 f899 	bl	80111b0 <_malloc_r>
 801107e:	b948      	cbnz	r0, 8011094 <__smakebuf_r+0x44>
 8011080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011084:	059a      	lsls	r2, r3, #22
 8011086:	d4ef      	bmi.n	8011068 <__smakebuf_r+0x18>
 8011088:	f023 0303 	bic.w	r3, r3, #3
 801108c:	f043 0302 	orr.w	r3, r3, #2
 8011090:	81a3      	strh	r3, [r4, #12]
 8011092:	e7e3      	b.n	801105c <__smakebuf_r+0xc>
 8011094:	4b0d      	ldr	r3, [pc, #52]	; (80110cc <__smakebuf_r+0x7c>)
 8011096:	62b3      	str	r3, [r6, #40]	; 0x28
 8011098:	89a3      	ldrh	r3, [r4, #12]
 801109a:	6020      	str	r0, [r4, #0]
 801109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110a0:	81a3      	strh	r3, [r4, #12]
 80110a2:	9b00      	ldr	r3, [sp, #0]
 80110a4:	6163      	str	r3, [r4, #20]
 80110a6:	9b01      	ldr	r3, [sp, #4]
 80110a8:	6120      	str	r0, [r4, #16]
 80110aa:	b15b      	cbz	r3, 80110c4 <__smakebuf_r+0x74>
 80110ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110b0:	4630      	mov	r0, r6
 80110b2:	f000 fad7 	bl	8011664 <_isatty_r>
 80110b6:	b128      	cbz	r0, 80110c4 <__smakebuf_r+0x74>
 80110b8:	89a3      	ldrh	r3, [r4, #12]
 80110ba:	f023 0303 	bic.w	r3, r3, #3
 80110be:	f043 0301 	orr.w	r3, r3, #1
 80110c2:	81a3      	strh	r3, [r4, #12]
 80110c4:	89a3      	ldrh	r3, [r4, #12]
 80110c6:	431d      	orrs	r5, r3
 80110c8:	81a5      	strh	r5, [r4, #12]
 80110ca:	e7cd      	b.n	8011068 <__smakebuf_r+0x18>
 80110cc:	08010ebd 	.word	0x08010ebd

080110d0 <malloc>:
 80110d0:	4b02      	ldr	r3, [pc, #8]	; (80110dc <malloc+0xc>)
 80110d2:	4601      	mov	r1, r0
 80110d4:	6818      	ldr	r0, [r3, #0]
 80110d6:	f000 b86b 	b.w	80111b0 <_malloc_r>
 80110da:	bf00      	nop
 80110dc:	2000029c 	.word	0x2000029c

080110e0 <memmove>:
 80110e0:	4288      	cmp	r0, r1
 80110e2:	b510      	push	{r4, lr}
 80110e4:	eb01 0302 	add.w	r3, r1, r2
 80110e8:	d807      	bhi.n	80110fa <memmove+0x1a>
 80110ea:	1e42      	subs	r2, r0, #1
 80110ec:	4299      	cmp	r1, r3
 80110ee:	d00a      	beq.n	8011106 <memmove+0x26>
 80110f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80110f8:	e7f8      	b.n	80110ec <memmove+0xc>
 80110fa:	4283      	cmp	r3, r0
 80110fc:	d9f5      	bls.n	80110ea <memmove+0xa>
 80110fe:	1881      	adds	r1, r0, r2
 8011100:	1ad2      	subs	r2, r2, r3
 8011102:	42d3      	cmn	r3, r2
 8011104:	d100      	bne.n	8011108 <memmove+0x28>
 8011106:	bd10      	pop	{r4, pc}
 8011108:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801110c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011110:	e7f7      	b.n	8011102 <memmove+0x22>
	...

08011114 <_free_r>:
 8011114:	b538      	push	{r3, r4, r5, lr}
 8011116:	4605      	mov	r5, r0
 8011118:	2900      	cmp	r1, #0
 801111a:	d045      	beq.n	80111a8 <_free_r+0x94>
 801111c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011120:	1f0c      	subs	r4, r1, #4
 8011122:	2b00      	cmp	r3, #0
 8011124:	bfb8      	it	lt
 8011126:	18e4      	addlt	r4, r4, r3
 8011128:	f000 fabe 	bl	80116a8 <__malloc_lock>
 801112c:	4a1f      	ldr	r2, [pc, #124]	; (80111ac <_free_r+0x98>)
 801112e:	6813      	ldr	r3, [r2, #0]
 8011130:	4610      	mov	r0, r2
 8011132:	b933      	cbnz	r3, 8011142 <_free_r+0x2e>
 8011134:	6063      	str	r3, [r4, #4]
 8011136:	6014      	str	r4, [r2, #0]
 8011138:	4628      	mov	r0, r5
 801113a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801113e:	f000 bab4 	b.w	80116aa <__malloc_unlock>
 8011142:	42a3      	cmp	r3, r4
 8011144:	d90c      	bls.n	8011160 <_free_r+0x4c>
 8011146:	6821      	ldr	r1, [r4, #0]
 8011148:	1862      	adds	r2, r4, r1
 801114a:	4293      	cmp	r3, r2
 801114c:	bf04      	itt	eq
 801114e:	681a      	ldreq	r2, [r3, #0]
 8011150:	685b      	ldreq	r3, [r3, #4]
 8011152:	6063      	str	r3, [r4, #4]
 8011154:	bf04      	itt	eq
 8011156:	1852      	addeq	r2, r2, r1
 8011158:	6022      	streq	r2, [r4, #0]
 801115a:	6004      	str	r4, [r0, #0]
 801115c:	e7ec      	b.n	8011138 <_free_r+0x24>
 801115e:	4613      	mov	r3, r2
 8011160:	685a      	ldr	r2, [r3, #4]
 8011162:	b10a      	cbz	r2, 8011168 <_free_r+0x54>
 8011164:	42a2      	cmp	r2, r4
 8011166:	d9fa      	bls.n	801115e <_free_r+0x4a>
 8011168:	6819      	ldr	r1, [r3, #0]
 801116a:	1858      	adds	r0, r3, r1
 801116c:	42a0      	cmp	r0, r4
 801116e:	d10b      	bne.n	8011188 <_free_r+0x74>
 8011170:	6820      	ldr	r0, [r4, #0]
 8011172:	4401      	add	r1, r0
 8011174:	1858      	adds	r0, r3, r1
 8011176:	4282      	cmp	r2, r0
 8011178:	6019      	str	r1, [r3, #0]
 801117a:	d1dd      	bne.n	8011138 <_free_r+0x24>
 801117c:	6810      	ldr	r0, [r2, #0]
 801117e:	6852      	ldr	r2, [r2, #4]
 8011180:	605a      	str	r2, [r3, #4]
 8011182:	4401      	add	r1, r0
 8011184:	6019      	str	r1, [r3, #0]
 8011186:	e7d7      	b.n	8011138 <_free_r+0x24>
 8011188:	d902      	bls.n	8011190 <_free_r+0x7c>
 801118a:	230c      	movs	r3, #12
 801118c:	602b      	str	r3, [r5, #0]
 801118e:	e7d3      	b.n	8011138 <_free_r+0x24>
 8011190:	6820      	ldr	r0, [r4, #0]
 8011192:	1821      	adds	r1, r4, r0
 8011194:	428a      	cmp	r2, r1
 8011196:	bf04      	itt	eq
 8011198:	6811      	ldreq	r1, [r2, #0]
 801119a:	6852      	ldreq	r2, [r2, #4]
 801119c:	6062      	str	r2, [r4, #4]
 801119e:	bf04      	itt	eq
 80111a0:	1809      	addeq	r1, r1, r0
 80111a2:	6021      	streq	r1, [r4, #0]
 80111a4:	605c      	str	r4, [r3, #4]
 80111a6:	e7c7      	b.n	8011138 <_free_r+0x24>
 80111a8:	bd38      	pop	{r3, r4, r5, pc}
 80111aa:	bf00      	nop
 80111ac:	20021838 	.word	0x20021838

080111b0 <_malloc_r>:
 80111b0:	b570      	push	{r4, r5, r6, lr}
 80111b2:	1ccd      	adds	r5, r1, #3
 80111b4:	f025 0503 	bic.w	r5, r5, #3
 80111b8:	3508      	adds	r5, #8
 80111ba:	2d0c      	cmp	r5, #12
 80111bc:	bf38      	it	cc
 80111be:	250c      	movcc	r5, #12
 80111c0:	2d00      	cmp	r5, #0
 80111c2:	4606      	mov	r6, r0
 80111c4:	db01      	blt.n	80111ca <_malloc_r+0x1a>
 80111c6:	42a9      	cmp	r1, r5
 80111c8:	d903      	bls.n	80111d2 <_malloc_r+0x22>
 80111ca:	230c      	movs	r3, #12
 80111cc:	6033      	str	r3, [r6, #0]
 80111ce:	2000      	movs	r0, #0
 80111d0:	bd70      	pop	{r4, r5, r6, pc}
 80111d2:	f000 fa69 	bl	80116a8 <__malloc_lock>
 80111d6:	4a21      	ldr	r2, [pc, #132]	; (801125c <_malloc_r+0xac>)
 80111d8:	6814      	ldr	r4, [r2, #0]
 80111da:	4621      	mov	r1, r4
 80111dc:	b991      	cbnz	r1, 8011204 <_malloc_r+0x54>
 80111de:	4c20      	ldr	r4, [pc, #128]	; (8011260 <_malloc_r+0xb0>)
 80111e0:	6823      	ldr	r3, [r4, #0]
 80111e2:	b91b      	cbnz	r3, 80111ec <_malloc_r+0x3c>
 80111e4:	4630      	mov	r0, r6
 80111e6:	f000 f9b5 	bl	8011554 <_sbrk_r>
 80111ea:	6020      	str	r0, [r4, #0]
 80111ec:	4629      	mov	r1, r5
 80111ee:	4630      	mov	r0, r6
 80111f0:	f000 f9b0 	bl	8011554 <_sbrk_r>
 80111f4:	1c43      	adds	r3, r0, #1
 80111f6:	d124      	bne.n	8011242 <_malloc_r+0x92>
 80111f8:	230c      	movs	r3, #12
 80111fa:	6033      	str	r3, [r6, #0]
 80111fc:	4630      	mov	r0, r6
 80111fe:	f000 fa54 	bl	80116aa <__malloc_unlock>
 8011202:	e7e4      	b.n	80111ce <_malloc_r+0x1e>
 8011204:	680b      	ldr	r3, [r1, #0]
 8011206:	1b5b      	subs	r3, r3, r5
 8011208:	d418      	bmi.n	801123c <_malloc_r+0x8c>
 801120a:	2b0b      	cmp	r3, #11
 801120c:	d90f      	bls.n	801122e <_malloc_r+0x7e>
 801120e:	600b      	str	r3, [r1, #0]
 8011210:	50cd      	str	r5, [r1, r3]
 8011212:	18cc      	adds	r4, r1, r3
 8011214:	4630      	mov	r0, r6
 8011216:	f000 fa48 	bl	80116aa <__malloc_unlock>
 801121a:	f104 000b 	add.w	r0, r4, #11
 801121e:	1d23      	adds	r3, r4, #4
 8011220:	f020 0007 	bic.w	r0, r0, #7
 8011224:	1ac3      	subs	r3, r0, r3
 8011226:	d0d3      	beq.n	80111d0 <_malloc_r+0x20>
 8011228:	425a      	negs	r2, r3
 801122a:	50e2      	str	r2, [r4, r3]
 801122c:	e7d0      	b.n	80111d0 <_malloc_r+0x20>
 801122e:	428c      	cmp	r4, r1
 8011230:	684b      	ldr	r3, [r1, #4]
 8011232:	bf16      	itet	ne
 8011234:	6063      	strne	r3, [r4, #4]
 8011236:	6013      	streq	r3, [r2, #0]
 8011238:	460c      	movne	r4, r1
 801123a:	e7eb      	b.n	8011214 <_malloc_r+0x64>
 801123c:	460c      	mov	r4, r1
 801123e:	6849      	ldr	r1, [r1, #4]
 8011240:	e7cc      	b.n	80111dc <_malloc_r+0x2c>
 8011242:	1cc4      	adds	r4, r0, #3
 8011244:	f024 0403 	bic.w	r4, r4, #3
 8011248:	42a0      	cmp	r0, r4
 801124a:	d005      	beq.n	8011258 <_malloc_r+0xa8>
 801124c:	1a21      	subs	r1, r4, r0
 801124e:	4630      	mov	r0, r6
 8011250:	f000 f980 	bl	8011554 <_sbrk_r>
 8011254:	3001      	adds	r0, #1
 8011256:	d0cf      	beq.n	80111f8 <_malloc_r+0x48>
 8011258:	6025      	str	r5, [r4, #0]
 801125a:	e7db      	b.n	8011214 <_malloc_r+0x64>
 801125c:	20021838 	.word	0x20021838
 8011260:	2002183c 	.word	0x2002183c

08011264 <_realloc_r>:
 8011264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011266:	4607      	mov	r7, r0
 8011268:	4614      	mov	r4, r2
 801126a:	460e      	mov	r6, r1
 801126c:	b921      	cbnz	r1, 8011278 <_realloc_r+0x14>
 801126e:	4611      	mov	r1, r2
 8011270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011274:	f7ff bf9c 	b.w	80111b0 <_malloc_r>
 8011278:	b922      	cbnz	r2, 8011284 <_realloc_r+0x20>
 801127a:	f7ff ff4b 	bl	8011114 <_free_r>
 801127e:	4625      	mov	r5, r4
 8011280:	4628      	mov	r0, r5
 8011282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011284:	f000 fa12 	bl	80116ac <_malloc_usable_size_r>
 8011288:	42a0      	cmp	r0, r4
 801128a:	d20f      	bcs.n	80112ac <_realloc_r+0x48>
 801128c:	4621      	mov	r1, r4
 801128e:	4638      	mov	r0, r7
 8011290:	f7ff ff8e 	bl	80111b0 <_malloc_r>
 8011294:	4605      	mov	r5, r0
 8011296:	2800      	cmp	r0, #0
 8011298:	d0f2      	beq.n	8011280 <_realloc_r+0x1c>
 801129a:	4631      	mov	r1, r6
 801129c:	4622      	mov	r2, r4
 801129e:	f7ff f8c4 	bl	801042a <memcpy>
 80112a2:	4631      	mov	r1, r6
 80112a4:	4638      	mov	r0, r7
 80112a6:	f7ff ff35 	bl	8011114 <_free_r>
 80112aa:	e7e9      	b.n	8011280 <_realloc_r+0x1c>
 80112ac:	4635      	mov	r5, r6
 80112ae:	e7e7      	b.n	8011280 <_realloc_r+0x1c>

080112b0 <__ssputs_r>:
 80112b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112b4:	688e      	ldr	r6, [r1, #8]
 80112b6:	429e      	cmp	r6, r3
 80112b8:	4682      	mov	sl, r0
 80112ba:	460c      	mov	r4, r1
 80112bc:	4690      	mov	r8, r2
 80112be:	4699      	mov	r9, r3
 80112c0:	d837      	bhi.n	8011332 <__ssputs_r+0x82>
 80112c2:	898a      	ldrh	r2, [r1, #12]
 80112c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80112c8:	d031      	beq.n	801132e <__ssputs_r+0x7e>
 80112ca:	6825      	ldr	r5, [r4, #0]
 80112cc:	6909      	ldr	r1, [r1, #16]
 80112ce:	1a6f      	subs	r7, r5, r1
 80112d0:	6965      	ldr	r5, [r4, #20]
 80112d2:	2302      	movs	r3, #2
 80112d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80112d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80112dc:	f109 0301 	add.w	r3, r9, #1
 80112e0:	443b      	add	r3, r7
 80112e2:	429d      	cmp	r5, r3
 80112e4:	bf38      	it	cc
 80112e6:	461d      	movcc	r5, r3
 80112e8:	0553      	lsls	r3, r2, #21
 80112ea:	d530      	bpl.n	801134e <__ssputs_r+0x9e>
 80112ec:	4629      	mov	r1, r5
 80112ee:	f7ff ff5f 	bl	80111b0 <_malloc_r>
 80112f2:	4606      	mov	r6, r0
 80112f4:	b950      	cbnz	r0, 801130c <__ssputs_r+0x5c>
 80112f6:	230c      	movs	r3, #12
 80112f8:	f8ca 3000 	str.w	r3, [sl]
 80112fc:	89a3      	ldrh	r3, [r4, #12]
 80112fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011302:	81a3      	strh	r3, [r4, #12]
 8011304:	f04f 30ff 	mov.w	r0, #4294967295
 8011308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801130c:	463a      	mov	r2, r7
 801130e:	6921      	ldr	r1, [r4, #16]
 8011310:	f7ff f88b 	bl	801042a <memcpy>
 8011314:	89a3      	ldrh	r3, [r4, #12]
 8011316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801131a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801131e:	81a3      	strh	r3, [r4, #12]
 8011320:	6126      	str	r6, [r4, #16]
 8011322:	6165      	str	r5, [r4, #20]
 8011324:	443e      	add	r6, r7
 8011326:	1bed      	subs	r5, r5, r7
 8011328:	6026      	str	r6, [r4, #0]
 801132a:	60a5      	str	r5, [r4, #8]
 801132c:	464e      	mov	r6, r9
 801132e:	454e      	cmp	r6, r9
 8011330:	d900      	bls.n	8011334 <__ssputs_r+0x84>
 8011332:	464e      	mov	r6, r9
 8011334:	4632      	mov	r2, r6
 8011336:	4641      	mov	r1, r8
 8011338:	6820      	ldr	r0, [r4, #0]
 801133a:	f7ff fed1 	bl	80110e0 <memmove>
 801133e:	68a3      	ldr	r3, [r4, #8]
 8011340:	1b9b      	subs	r3, r3, r6
 8011342:	60a3      	str	r3, [r4, #8]
 8011344:	6823      	ldr	r3, [r4, #0]
 8011346:	441e      	add	r6, r3
 8011348:	6026      	str	r6, [r4, #0]
 801134a:	2000      	movs	r0, #0
 801134c:	e7dc      	b.n	8011308 <__ssputs_r+0x58>
 801134e:	462a      	mov	r2, r5
 8011350:	f7ff ff88 	bl	8011264 <_realloc_r>
 8011354:	4606      	mov	r6, r0
 8011356:	2800      	cmp	r0, #0
 8011358:	d1e2      	bne.n	8011320 <__ssputs_r+0x70>
 801135a:	6921      	ldr	r1, [r4, #16]
 801135c:	4650      	mov	r0, sl
 801135e:	f7ff fed9 	bl	8011114 <_free_r>
 8011362:	e7c8      	b.n	80112f6 <__ssputs_r+0x46>

08011364 <_svfiprintf_r>:
 8011364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011368:	461d      	mov	r5, r3
 801136a:	898b      	ldrh	r3, [r1, #12]
 801136c:	061f      	lsls	r7, r3, #24
 801136e:	b09d      	sub	sp, #116	; 0x74
 8011370:	4680      	mov	r8, r0
 8011372:	460c      	mov	r4, r1
 8011374:	4616      	mov	r6, r2
 8011376:	d50f      	bpl.n	8011398 <_svfiprintf_r+0x34>
 8011378:	690b      	ldr	r3, [r1, #16]
 801137a:	b96b      	cbnz	r3, 8011398 <_svfiprintf_r+0x34>
 801137c:	2140      	movs	r1, #64	; 0x40
 801137e:	f7ff ff17 	bl	80111b0 <_malloc_r>
 8011382:	6020      	str	r0, [r4, #0]
 8011384:	6120      	str	r0, [r4, #16]
 8011386:	b928      	cbnz	r0, 8011394 <_svfiprintf_r+0x30>
 8011388:	230c      	movs	r3, #12
 801138a:	f8c8 3000 	str.w	r3, [r8]
 801138e:	f04f 30ff 	mov.w	r0, #4294967295
 8011392:	e0c8      	b.n	8011526 <_svfiprintf_r+0x1c2>
 8011394:	2340      	movs	r3, #64	; 0x40
 8011396:	6163      	str	r3, [r4, #20]
 8011398:	2300      	movs	r3, #0
 801139a:	9309      	str	r3, [sp, #36]	; 0x24
 801139c:	2320      	movs	r3, #32
 801139e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113a2:	2330      	movs	r3, #48	; 0x30
 80113a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113a8:	9503      	str	r5, [sp, #12]
 80113aa:	f04f 0b01 	mov.w	fp, #1
 80113ae:	4637      	mov	r7, r6
 80113b0:	463d      	mov	r5, r7
 80113b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80113b6:	b10b      	cbz	r3, 80113bc <_svfiprintf_r+0x58>
 80113b8:	2b25      	cmp	r3, #37	; 0x25
 80113ba:	d13e      	bne.n	801143a <_svfiprintf_r+0xd6>
 80113bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80113c0:	d00b      	beq.n	80113da <_svfiprintf_r+0x76>
 80113c2:	4653      	mov	r3, sl
 80113c4:	4632      	mov	r2, r6
 80113c6:	4621      	mov	r1, r4
 80113c8:	4640      	mov	r0, r8
 80113ca:	f7ff ff71 	bl	80112b0 <__ssputs_r>
 80113ce:	3001      	adds	r0, #1
 80113d0:	f000 80a4 	beq.w	801151c <_svfiprintf_r+0x1b8>
 80113d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113d6:	4453      	add	r3, sl
 80113d8:	9309      	str	r3, [sp, #36]	; 0x24
 80113da:	783b      	ldrb	r3, [r7, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	f000 809d 	beq.w	801151c <_svfiprintf_r+0x1b8>
 80113e2:	2300      	movs	r3, #0
 80113e4:	f04f 32ff 	mov.w	r2, #4294967295
 80113e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113ec:	9304      	str	r3, [sp, #16]
 80113ee:	9307      	str	r3, [sp, #28]
 80113f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113f4:	931a      	str	r3, [sp, #104]	; 0x68
 80113f6:	462f      	mov	r7, r5
 80113f8:	2205      	movs	r2, #5
 80113fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80113fe:	4850      	ldr	r0, [pc, #320]	; (8011540 <_svfiprintf_r+0x1dc>)
 8011400:	f7ee feee 	bl	80001e0 <memchr>
 8011404:	9b04      	ldr	r3, [sp, #16]
 8011406:	b9d0      	cbnz	r0, 801143e <_svfiprintf_r+0xda>
 8011408:	06d9      	lsls	r1, r3, #27
 801140a:	bf44      	itt	mi
 801140c:	2220      	movmi	r2, #32
 801140e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011412:	071a      	lsls	r2, r3, #28
 8011414:	bf44      	itt	mi
 8011416:	222b      	movmi	r2, #43	; 0x2b
 8011418:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801141c:	782a      	ldrb	r2, [r5, #0]
 801141e:	2a2a      	cmp	r2, #42	; 0x2a
 8011420:	d015      	beq.n	801144e <_svfiprintf_r+0xea>
 8011422:	9a07      	ldr	r2, [sp, #28]
 8011424:	462f      	mov	r7, r5
 8011426:	2000      	movs	r0, #0
 8011428:	250a      	movs	r5, #10
 801142a:	4639      	mov	r1, r7
 801142c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011430:	3b30      	subs	r3, #48	; 0x30
 8011432:	2b09      	cmp	r3, #9
 8011434:	d94d      	bls.n	80114d2 <_svfiprintf_r+0x16e>
 8011436:	b1b8      	cbz	r0, 8011468 <_svfiprintf_r+0x104>
 8011438:	e00f      	b.n	801145a <_svfiprintf_r+0xf6>
 801143a:	462f      	mov	r7, r5
 801143c:	e7b8      	b.n	80113b0 <_svfiprintf_r+0x4c>
 801143e:	4a40      	ldr	r2, [pc, #256]	; (8011540 <_svfiprintf_r+0x1dc>)
 8011440:	1a80      	subs	r0, r0, r2
 8011442:	fa0b f000 	lsl.w	r0, fp, r0
 8011446:	4318      	orrs	r0, r3
 8011448:	9004      	str	r0, [sp, #16]
 801144a:	463d      	mov	r5, r7
 801144c:	e7d3      	b.n	80113f6 <_svfiprintf_r+0x92>
 801144e:	9a03      	ldr	r2, [sp, #12]
 8011450:	1d11      	adds	r1, r2, #4
 8011452:	6812      	ldr	r2, [r2, #0]
 8011454:	9103      	str	r1, [sp, #12]
 8011456:	2a00      	cmp	r2, #0
 8011458:	db01      	blt.n	801145e <_svfiprintf_r+0xfa>
 801145a:	9207      	str	r2, [sp, #28]
 801145c:	e004      	b.n	8011468 <_svfiprintf_r+0x104>
 801145e:	4252      	negs	r2, r2
 8011460:	f043 0302 	orr.w	r3, r3, #2
 8011464:	9207      	str	r2, [sp, #28]
 8011466:	9304      	str	r3, [sp, #16]
 8011468:	783b      	ldrb	r3, [r7, #0]
 801146a:	2b2e      	cmp	r3, #46	; 0x2e
 801146c:	d10c      	bne.n	8011488 <_svfiprintf_r+0x124>
 801146e:	787b      	ldrb	r3, [r7, #1]
 8011470:	2b2a      	cmp	r3, #42	; 0x2a
 8011472:	d133      	bne.n	80114dc <_svfiprintf_r+0x178>
 8011474:	9b03      	ldr	r3, [sp, #12]
 8011476:	1d1a      	adds	r2, r3, #4
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	9203      	str	r2, [sp, #12]
 801147c:	2b00      	cmp	r3, #0
 801147e:	bfb8      	it	lt
 8011480:	f04f 33ff 	movlt.w	r3, #4294967295
 8011484:	3702      	adds	r7, #2
 8011486:	9305      	str	r3, [sp, #20]
 8011488:	4d2e      	ldr	r5, [pc, #184]	; (8011544 <_svfiprintf_r+0x1e0>)
 801148a:	7839      	ldrb	r1, [r7, #0]
 801148c:	2203      	movs	r2, #3
 801148e:	4628      	mov	r0, r5
 8011490:	f7ee fea6 	bl	80001e0 <memchr>
 8011494:	b138      	cbz	r0, 80114a6 <_svfiprintf_r+0x142>
 8011496:	2340      	movs	r3, #64	; 0x40
 8011498:	1b40      	subs	r0, r0, r5
 801149a:	fa03 f000 	lsl.w	r0, r3, r0
 801149e:	9b04      	ldr	r3, [sp, #16]
 80114a0:	4303      	orrs	r3, r0
 80114a2:	3701      	adds	r7, #1
 80114a4:	9304      	str	r3, [sp, #16]
 80114a6:	7839      	ldrb	r1, [r7, #0]
 80114a8:	4827      	ldr	r0, [pc, #156]	; (8011548 <_svfiprintf_r+0x1e4>)
 80114aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114ae:	2206      	movs	r2, #6
 80114b0:	1c7e      	adds	r6, r7, #1
 80114b2:	f7ee fe95 	bl	80001e0 <memchr>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	d038      	beq.n	801152c <_svfiprintf_r+0x1c8>
 80114ba:	4b24      	ldr	r3, [pc, #144]	; (801154c <_svfiprintf_r+0x1e8>)
 80114bc:	bb13      	cbnz	r3, 8011504 <_svfiprintf_r+0x1a0>
 80114be:	9b03      	ldr	r3, [sp, #12]
 80114c0:	3307      	adds	r3, #7
 80114c2:	f023 0307 	bic.w	r3, r3, #7
 80114c6:	3308      	adds	r3, #8
 80114c8:	9303      	str	r3, [sp, #12]
 80114ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114cc:	444b      	add	r3, r9
 80114ce:	9309      	str	r3, [sp, #36]	; 0x24
 80114d0:	e76d      	b.n	80113ae <_svfiprintf_r+0x4a>
 80114d2:	fb05 3202 	mla	r2, r5, r2, r3
 80114d6:	2001      	movs	r0, #1
 80114d8:	460f      	mov	r7, r1
 80114da:	e7a6      	b.n	801142a <_svfiprintf_r+0xc6>
 80114dc:	2300      	movs	r3, #0
 80114de:	3701      	adds	r7, #1
 80114e0:	9305      	str	r3, [sp, #20]
 80114e2:	4619      	mov	r1, r3
 80114e4:	250a      	movs	r5, #10
 80114e6:	4638      	mov	r0, r7
 80114e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114ec:	3a30      	subs	r2, #48	; 0x30
 80114ee:	2a09      	cmp	r2, #9
 80114f0:	d903      	bls.n	80114fa <_svfiprintf_r+0x196>
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d0c8      	beq.n	8011488 <_svfiprintf_r+0x124>
 80114f6:	9105      	str	r1, [sp, #20]
 80114f8:	e7c6      	b.n	8011488 <_svfiprintf_r+0x124>
 80114fa:	fb05 2101 	mla	r1, r5, r1, r2
 80114fe:	2301      	movs	r3, #1
 8011500:	4607      	mov	r7, r0
 8011502:	e7f0      	b.n	80114e6 <_svfiprintf_r+0x182>
 8011504:	ab03      	add	r3, sp, #12
 8011506:	9300      	str	r3, [sp, #0]
 8011508:	4622      	mov	r2, r4
 801150a:	4b11      	ldr	r3, [pc, #68]	; (8011550 <_svfiprintf_r+0x1ec>)
 801150c:	a904      	add	r1, sp, #16
 801150e:	4640      	mov	r0, r8
 8011510:	f3af 8000 	nop.w
 8011514:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011518:	4681      	mov	r9, r0
 801151a:	d1d6      	bne.n	80114ca <_svfiprintf_r+0x166>
 801151c:	89a3      	ldrh	r3, [r4, #12]
 801151e:	065b      	lsls	r3, r3, #25
 8011520:	f53f af35 	bmi.w	801138e <_svfiprintf_r+0x2a>
 8011524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011526:	b01d      	add	sp, #116	; 0x74
 8011528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801152c:	ab03      	add	r3, sp, #12
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	4622      	mov	r2, r4
 8011532:	4b07      	ldr	r3, [pc, #28]	; (8011550 <_svfiprintf_r+0x1ec>)
 8011534:	a904      	add	r1, sp, #16
 8011536:	4640      	mov	r0, r8
 8011538:	f7ff f94a 	bl	80107d0 <_printf_i>
 801153c:	e7ea      	b.n	8011514 <_svfiprintf_r+0x1b0>
 801153e:	bf00      	nop
 8011540:	08012694 	.word	0x08012694
 8011544:	0801269a 	.word	0x0801269a
 8011548:	0801269e 	.word	0x0801269e
 801154c:	00000000 	.word	0x00000000
 8011550:	080112b1 	.word	0x080112b1

08011554 <_sbrk_r>:
 8011554:	b538      	push	{r3, r4, r5, lr}
 8011556:	4c06      	ldr	r4, [pc, #24]	; (8011570 <_sbrk_r+0x1c>)
 8011558:	2300      	movs	r3, #0
 801155a:	4605      	mov	r5, r0
 801155c:	4608      	mov	r0, r1
 801155e:	6023      	str	r3, [r4, #0]
 8011560:	f7f2 fa7c 	bl	8003a5c <_sbrk>
 8011564:	1c43      	adds	r3, r0, #1
 8011566:	d102      	bne.n	801156e <_sbrk_r+0x1a>
 8011568:	6823      	ldr	r3, [r4, #0]
 801156a:	b103      	cbz	r3, 801156e <_sbrk_r+0x1a>
 801156c:	602b      	str	r3, [r5, #0]
 801156e:	bd38      	pop	{r3, r4, r5, pc}
 8011570:	200219d8 	.word	0x200219d8

08011574 <__sread>:
 8011574:	b510      	push	{r4, lr}
 8011576:	460c      	mov	r4, r1
 8011578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801157c:	f000 f89e 	bl	80116bc <_read_r>
 8011580:	2800      	cmp	r0, #0
 8011582:	bfab      	itete	ge
 8011584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011586:	89a3      	ldrhlt	r3, [r4, #12]
 8011588:	181b      	addge	r3, r3, r0
 801158a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801158e:	bfac      	ite	ge
 8011590:	6563      	strge	r3, [r4, #84]	; 0x54
 8011592:	81a3      	strhlt	r3, [r4, #12]
 8011594:	bd10      	pop	{r4, pc}

08011596 <__swrite>:
 8011596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801159a:	461f      	mov	r7, r3
 801159c:	898b      	ldrh	r3, [r1, #12]
 801159e:	05db      	lsls	r3, r3, #23
 80115a0:	4605      	mov	r5, r0
 80115a2:	460c      	mov	r4, r1
 80115a4:	4616      	mov	r6, r2
 80115a6:	d505      	bpl.n	80115b4 <__swrite+0x1e>
 80115a8:	2302      	movs	r3, #2
 80115aa:	2200      	movs	r2, #0
 80115ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115b0:	f000 f868 	bl	8011684 <_lseek_r>
 80115b4:	89a3      	ldrh	r3, [r4, #12]
 80115b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115be:	81a3      	strh	r3, [r4, #12]
 80115c0:	4632      	mov	r2, r6
 80115c2:	463b      	mov	r3, r7
 80115c4:	4628      	mov	r0, r5
 80115c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115ca:	f000 b817 	b.w	80115fc <_write_r>

080115ce <__sseek>:
 80115ce:	b510      	push	{r4, lr}
 80115d0:	460c      	mov	r4, r1
 80115d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115d6:	f000 f855 	bl	8011684 <_lseek_r>
 80115da:	1c43      	adds	r3, r0, #1
 80115dc:	89a3      	ldrh	r3, [r4, #12]
 80115de:	bf15      	itete	ne
 80115e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80115e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80115e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80115ea:	81a3      	strheq	r3, [r4, #12]
 80115ec:	bf18      	it	ne
 80115ee:	81a3      	strhne	r3, [r4, #12]
 80115f0:	bd10      	pop	{r4, pc}

080115f2 <__sclose>:
 80115f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115f6:	f000 b813 	b.w	8011620 <_close_r>
	...

080115fc <_write_r>:
 80115fc:	b538      	push	{r3, r4, r5, lr}
 80115fe:	4c07      	ldr	r4, [pc, #28]	; (801161c <_write_r+0x20>)
 8011600:	4605      	mov	r5, r0
 8011602:	4608      	mov	r0, r1
 8011604:	4611      	mov	r1, r2
 8011606:	2200      	movs	r2, #0
 8011608:	6022      	str	r2, [r4, #0]
 801160a:	461a      	mov	r2, r3
 801160c:	f7f2 f9d5 	bl	80039ba <_write>
 8011610:	1c43      	adds	r3, r0, #1
 8011612:	d102      	bne.n	801161a <_write_r+0x1e>
 8011614:	6823      	ldr	r3, [r4, #0]
 8011616:	b103      	cbz	r3, 801161a <_write_r+0x1e>
 8011618:	602b      	str	r3, [r5, #0]
 801161a:	bd38      	pop	{r3, r4, r5, pc}
 801161c:	200219d8 	.word	0x200219d8

08011620 <_close_r>:
 8011620:	b538      	push	{r3, r4, r5, lr}
 8011622:	4c06      	ldr	r4, [pc, #24]	; (801163c <_close_r+0x1c>)
 8011624:	2300      	movs	r3, #0
 8011626:	4605      	mov	r5, r0
 8011628:	4608      	mov	r0, r1
 801162a:	6023      	str	r3, [r4, #0]
 801162c:	f7f2 f9e1 	bl	80039f2 <_close>
 8011630:	1c43      	adds	r3, r0, #1
 8011632:	d102      	bne.n	801163a <_close_r+0x1a>
 8011634:	6823      	ldr	r3, [r4, #0]
 8011636:	b103      	cbz	r3, 801163a <_close_r+0x1a>
 8011638:	602b      	str	r3, [r5, #0]
 801163a:	bd38      	pop	{r3, r4, r5, pc}
 801163c:	200219d8 	.word	0x200219d8

08011640 <_fstat_r>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	4c07      	ldr	r4, [pc, #28]	; (8011660 <_fstat_r+0x20>)
 8011644:	2300      	movs	r3, #0
 8011646:	4605      	mov	r5, r0
 8011648:	4608      	mov	r0, r1
 801164a:	4611      	mov	r1, r2
 801164c:	6023      	str	r3, [r4, #0]
 801164e:	f7f2 f9dc 	bl	8003a0a <_fstat>
 8011652:	1c43      	adds	r3, r0, #1
 8011654:	d102      	bne.n	801165c <_fstat_r+0x1c>
 8011656:	6823      	ldr	r3, [r4, #0]
 8011658:	b103      	cbz	r3, 801165c <_fstat_r+0x1c>
 801165a:	602b      	str	r3, [r5, #0]
 801165c:	bd38      	pop	{r3, r4, r5, pc}
 801165e:	bf00      	nop
 8011660:	200219d8 	.word	0x200219d8

08011664 <_isatty_r>:
 8011664:	b538      	push	{r3, r4, r5, lr}
 8011666:	4c06      	ldr	r4, [pc, #24]	; (8011680 <_isatty_r+0x1c>)
 8011668:	2300      	movs	r3, #0
 801166a:	4605      	mov	r5, r0
 801166c:	4608      	mov	r0, r1
 801166e:	6023      	str	r3, [r4, #0]
 8011670:	f7f2 f9db 	bl	8003a2a <_isatty>
 8011674:	1c43      	adds	r3, r0, #1
 8011676:	d102      	bne.n	801167e <_isatty_r+0x1a>
 8011678:	6823      	ldr	r3, [r4, #0]
 801167a:	b103      	cbz	r3, 801167e <_isatty_r+0x1a>
 801167c:	602b      	str	r3, [r5, #0]
 801167e:	bd38      	pop	{r3, r4, r5, pc}
 8011680:	200219d8 	.word	0x200219d8

08011684 <_lseek_r>:
 8011684:	b538      	push	{r3, r4, r5, lr}
 8011686:	4c07      	ldr	r4, [pc, #28]	; (80116a4 <_lseek_r+0x20>)
 8011688:	4605      	mov	r5, r0
 801168a:	4608      	mov	r0, r1
 801168c:	4611      	mov	r1, r2
 801168e:	2200      	movs	r2, #0
 8011690:	6022      	str	r2, [r4, #0]
 8011692:	461a      	mov	r2, r3
 8011694:	f7f2 f9d4 	bl	8003a40 <_lseek>
 8011698:	1c43      	adds	r3, r0, #1
 801169a:	d102      	bne.n	80116a2 <_lseek_r+0x1e>
 801169c:	6823      	ldr	r3, [r4, #0]
 801169e:	b103      	cbz	r3, 80116a2 <_lseek_r+0x1e>
 80116a0:	602b      	str	r3, [r5, #0]
 80116a2:	bd38      	pop	{r3, r4, r5, pc}
 80116a4:	200219d8 	.word	0x200219d8

080116a8 <__malloc_lock>:
 80116a8:	4770      	bx	lr

080116aa <__malloc_unlock>:
 80116aa:	4770      	bx	lr

080116ac <_malloc_usable_size_r>:
 80116ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116b0:	1f18      	subs	r0, r3, #4
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	bfbc      	itt	lt
 80116b6:	580b      	ldrlt	r3, [r1, r0]
 80116b8:	18c0      	addlt	r0, r0, r3
 80116ba:	4770      	bx	lr

080116bc <_read_r>:
 80116bc:	b538      	push	{r3, r4, r5, lr}
 80116be:	4c07      	ldr	r4, [pc, #28]	; (80116dc <_read_r+0x20>)
 80116c0:	4605      	mov	r5, r0
 80116c2:	4608      	mov	r0, r1
 80116c4:	4611      	mov	r1, r2
 80116c6:	2200      	movs	r2, #0
 80116c8:	6022      	str	r2, [r4, #0]
 80116ca:	461a      	mov	r2, r3
 80116cc:	f7f2 f958 	bl	8003980 <_read>
 80116d0:	1c43      	adds	r3, r0, #1
 80116d2:	d102      	bne.n	80116da <_read_r+0x1e>
 80116d4:	6823      	ldr	r3, [r4, #0]
 80116d6:	b103      	cbz	r3, 80116da <_read_r+0x1e>
 80116d8:	602b      	str	r3, [r5, #0]
 80116da:	bd38      	pop	{r3, r4, r5, pc}
 80116dc:	200219d8 	.word	0x200219d8

080116e0 <_init>:
 80116e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116e2:	bf00      	nop
 80116e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116e6:	bc08      	pop	{r3}
 80116e8:	469e      	mov	lr, r3
 80116ea:	4770      	bx	lr

080116ec <_fini>:
 80116ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ee:	bf00      	nop
 80116f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116f2:	bc08      	pop	{r3}
 80116f4:	469e      	mov	lr, r3
 80116f6:	4770      	bx	lr
